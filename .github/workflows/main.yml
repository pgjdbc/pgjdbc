name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners
# GitHub Actions does not support Docker, PostgreSQL server on Windows, macOS :(

jobs:
  ubuntu-code-style:
    name: 'Ubuntu, code style (JDK 8)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - uses: burrunan/gradle-cache-action@v1
      name: Verify code style
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      with:
        job-id: jdk8
        arguments: autostyleCheck checkstyleAll

  ubuntu-latest:
    name: 'Ubuntu, PG latest (JDK 8)'
    runs-on: ubuntu-latest
# Service must be started after checkout, because we want to use git-stored files for initialization
# of the Docker container. So we start it with and explicit docker ... command
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: postgres
#          # Empty password
#          # POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: postgres
#        ports:
#          - 5432:5432
#        volumes:
#          - /home/runner/work/pgjdbc/pgjdbc/.travis:/scripts/.travis
#        # needed because the postgres container does not provide a healthcheck
#        options: >-
#          --name db
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Start PostgreSQL
      working-directory: docker
      run: docker-compose up -d && docker-compose logs
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Prepare ssltest.local.properties
      run: echo enable_ssl_tests=true > ssltest.local.properties
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      with:
        job-id: jdk${{ matrix.jdk }}
        arguments: --scan --no-parallel --no-daemon test
        properties: |
          skipReplicationTests=
          port=${{ job.services.postgres.ports['5432'] }}

  linux-checkerframework:
    name: 'CheckerFramework (JDK 11)'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: 'Set up JDK 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: burrunan/gradle-cache-action@v1
        name: Run CheckerFramework
        env:
          S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
          S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
        with:
          job-id: checker-jdk11
          arguments: --scan --no-parallel --no-daemon -PenableCheckerframework classes

  source-distribution-check:
    name: 'Source distribution (JDK 11)'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Start PostgreSQL
        working-directory: docker
        run: docker-compose up -d && docker-compose logs
      - name: 'Set up JDK 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: burrunan/gradle-cache-action@v1
        name: Prepare source distribution
        env:
          S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
          S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
        with:
          job-id: source-release-jdk11
          arguments: --scan --no-parallel --no-daemon sourceDistribution -Ppgjdbc.version=1.0 -Prelease
      - name: Verify source distribution
        working-directory: pgjdbc/build/distributions
        run: |
          tar xzf postgresql-1.0-jdbc-src.tar.gz
          cd postgresql-1.0-jdbc-src
          mvn --batch-mode --fail-at-end --show-version verify

  gss-encryption:
    name: 'Ubuntu, gss encryption (JDK 8)'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: 'Install software'
      run: |
        sudo apt -y update
        sudo apt -y install krb5-kdc krb5-admin-server libkrb5-dev postgresql-12
        
    - name: 'Update hosts'
      run: |
        sudo -- sh -c "echo 127.0.0.1 localhost auth-test-localhost.postgresql.example.com > /etc/hosts"
        cat /etc/hosts

    - uses: burrunan/gradle-cache-action@v1
      name: Build pgjdbc
      with:
        job-id: gss-jdk8
        arguments: publishToMavenLocal -Ppgjdbc.version=1.0.0-dev-master -PskipJavadoc
    - name: Run tests
      run: |
        cd test-gss
        ./gradlew assemble
        ./gradlew run
