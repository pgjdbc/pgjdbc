name: Omni CI

on:
  workflow_dispatch:
    inputs:
      gradle_args:
        description: Gradle arguments
        required: false
        default: "jandex test jacocoReport"
      # Filters to limit generated matrix. Empty or "*" values are ignored.
      matrix_jdk_distribution:
        description: JDK Distribution (adopt, zulu, ...)
        required: false
        default: "*"
      matrix_jdk_version:
        description: JDK Version (8, 11, ...)
        required: false
        default: "*"
      matrix_pg_version:
        description: PostgreSQL Server Version (8.4, 9.0, 9.1, ...)
        required: false
        default: "*"
      matrix_query_mode:
        description: Query Mode (simple | extended | extendedForPrepared)
        required: false
        default: "*"
      matrix_ssl:
        description: SSL (true | false)
        required: false
        default: "*"
      matrix_scram:
        description: SCRAM (true | false)
        required: false
        default: "*"
      matrix_slow_tests:
        description: Slow Tests (default | always | never)
        required: false
        default: default
  schedule:
    - cron: "0 6 * * *"

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      MATRIX_JDK_DISTRIBUTION: '${{ github.event.inputs.matrix_jdk_distribution }}'
      MATRIX_JDK_VERSION: '${{ github.event.inputs.matrix_jdk_version }}'
      MATRIX_PG_VERSION: '${{ github.event.inputs.matrix_pg_version }}'
      MATRIX_QUERY_MODE: '${{ github.event.inputs.matrix_query_mode }}'
      MATRIX_SCRAM: '${{ github.event.inputs.matrix_scram }}'
      MATRIX_SSL: '${{ github.event.inputs.matrix_ssl }}'
      MATRIX_SLOW_TESTS: '${{ github.event.inputs.matrix_slow_tests }}'
    steps:
    - id: set-matrix
      run: |
        node -e "
          const DEFAULT_SLOW_TESTS = (() => {
            if (process.env.MATRIX_SLOW_TESTS === 'always') {
              return true;
            } else if (process.env.MATRIX_SLOW_TESTS === 'never') {
              return false;
            }
            return undefined;
          })();

          const JDK_OPTIONS = [
              { version: '8', lts: true, distribution: 'zulu' },
              { version: '11', lts: true, distribution: 'zulu' },
              { version: '15', lts: false, distribution: 'zulu' },
          ];

          const OTHER_JDK_OPTIONS = [
            // Adopt
            { version: '8', lts: true, distribution: 'adopt' },
            { version: '11', lts: true, distribution: 'adopt' },

            // Adopt OpenJ9
            // TODO: Replace these hard coded versions with something that dynamically picks the most recent
            { version: '8', lts: true, distribution: 'jdkfile', url: 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10_openj9-0.26.0/OpenJDK8U-jdk_x64_linux_openj9_8u292b10_openj9-0.26.0.tar.gz'},
            { version: '11', lts: true, distribution: 'jdkfile', url: 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.11%2B9_openj9-0.26.0/OpenJDK11U-jdk_x64_linux_openj9_11.0.11_9_openj9-0.26.0.tar.gz'},

            // Amazon Corretto
            { version: '8', lts: true, distribution: 'jdkfile', url: 'https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz'},
            { version: '11', lts: true, distribution: 'jdkfile', url: 'https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz'},
          ];

          const PG_VERSIONS = [
              '8.4',
              '9.0',
              '9.1',
              '9.2',
              '9.3',
              '9.4',
              '9.5',
              '9.6',
              '10',
              '11',
              '12',
              '13',
              // TODO: Determine the latest and greatest server version automatically so we don't need to periodically update this
          ];


          const LTS_JDK_OPTIONS = JDK_OPTIONS.filter(jdk => jdk.lts);
          const UNSTABLE_JDK_OPTIONS = JDK_OPTIONS.filter(jdk => !jdk.lts);
          const LATEST_JDK = LTS_JDK_OPTIONS.slice(-1)[0];
          const LATEST_PG_VERSION = PG_VERSIONS.slice(-1)[0];

          const list = [];

          const matchesMatrixFilter = (name, value) => {
              const env_value = process.env['MATRIX_' + name];
              if (!env_value || env_value === '*') {
                return true;
              }
              // TODO: Consider expanding this to do globbing
              return env_value === ('' + value);
          };

          const addItem = (opts) => {
              const os = 'ubuntu-latest';
              const pg_version = opts.pg_version ?? LATEST_PG_VERSION;
              const jdk = opts.jdk ?? LATEST_JDK;
              const slow_tests = DEFAULT_SLOW_TESTS ?? opts.slow_tests ?? false;
              const replication_tests = opts.replication_tests ?? false;

              const isAtLeast = (minVersion) => Number(pg_version) >= Number(minVersion);
              const scramSupported = isAtLeast('10');
              const sslSupported = isAtLeast('9.3');

              const query_mode = opts.query_mode;
              const ssl = opts.ssl ?? sslSupported;
              const scram = opts.scram ?? scramSupported;

              if (!matchesMatrixFilter('JDK_DISTRIBUTION', jdk.distribution) ||
                  !matchesMatrixFilter('JDK_VERSION', jdk.version) ||
                  !matchesMatrixFilter('PG_VERSION', pg_version) ||
                  !matchesMatrixFilter('QUERY_MODE', query_mode ?? '') ||
                  !matchesMatrixFilter('SCRAM', scram) ||
                  !matchesMatrixFilter('SSL', ssl)) {
                return;
              }

              const tags = [];
              if (!slow_tests) {
                  tags.push('!org.postgresql.test.SlowTests');
              }
              if (!replication_tests) {
                  tags.push('!org.postgresql.test.Replication');
              }
              const junit_include_tags = tags.join(' & ');

              list.push({
                  os,
                  jdk_version: jdk.version,
                  jdk_distribution: jdk.distribution,
                  jdk_url: jdk.url,
                  pg_version,
                  ssl,
                  scram,
                  server_tz: opts.server_tz ?? 'Etc/UTC',
                  slow_tests,
                  replication_tests,
                  junit_include_tags,
                  experimental: opts.experimental ?? false,
                  query_mode,
                  gradle_args: opts.gradle_args ?? '',
              });
          };

          // Latest JDK x each stable PG version
          for (const pg_version of PG_VERSIONS) {
              addItem({
                  pg_version,
              });
          }

          // Latest PG version x each remaining JDK
          for (const jdk of JDK_OPTIONS) {
              if (jdk == LATEST_JDK) {
                  continue; // Skip duplicate
              }
              addItem({
                  jdk,
                  pg_version: LATEST_PG_VERSION,
                  experimental: !jdk.lts,
              });
          }

          // No SSL / No SCRAM (only on latest PG / JDK)
          addItem({
              ssl: false,
              scram: false,
          });

          // Custom server timezones (only on latest PG / JDK)
          addItem({
              server_tz: 'America/New_York'
          });
          addItem({
              server_tz: 'Pacific/Chatham'
          });

          // Custom query modes (only on latest PG / JDK)
          addItem({
              query_mode: 'simple',
          });
          addItem({
              query_mode: 'extendedForPrepared',
          });
          addItem({
              query_mode: 'extendedCacheEverything',
          });

          // Slow and replication tests (only on latest PG / JDK)
          // NOTE: Marked experimental for now due to server issues
          addItem({
              slow_tests: true,
              replication_tests: true,
              experimental: true,
              gradle_args: '--scan',
          });

          // TODO: Add latest PG built from source marked as experimental
          for(const jdk of OTHER_JDK_OPTIONS) {
              addItem({
                  jdk,
                  pg_version: LATEST_PG_VERSION,
                  experimental: !jdk.lts,
              });
          }

          if (list.length === 0) {
            throw new Error('Matrix list is empty. Check you matrix filters to ensure they match a valid combination.');
          }

          const toKey = (item) => JSON.stringify(Object.entries(item).sort())
          const include = list.filter((item, i) => {
            const key = toKey(item);
            // Deduplicate by picking only the first entry matching this key
            return i === list.findIndex((other) => key === toKey(other));
          });

          console.log('::set-output name=matrix::' + JSON.stringify({ include }));
        "

  test:
    name: '${{ toJson(matrix) }}'
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      SSL: ${{ matrix.ssl }}
      SCRAM: ${{ matrix.scram }}
      TZ: ${{ matrix.server_tz }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50

    - name: Start PostgreSQL
      working-directory: docker
      run: docker-compose up -d && docker-compose logs
      env:
        PGV: ${{ matrix.pg_version }}

    # Install built-in JDK
    - name: 'Set up JDK ${{ matrix.jdk_version }} / ${{ matrix.jdk_distribution }}'
      uses: actions/setup-java@v2
      if: ${{ matrix.jdk_distribution != 'jdkfile' }}
      with:
        distribution: ${{ matrix.jdk_distribution }}
        java-version: ${{ matrix.jdk_version }}
        architecture: x64
    # Install custom JDK from URL
    - name: 'Download JDK ${{ matrix.jdk_distribution }} / ${{ matrix.jdk_version }} from ${{ matrix.jdk_url }}'
      if: ${{ matrix.jdk_distribution == 'jdkfile' }}
      run: |
        jdk_url="${{ matrix.jdk_url }}"
        wget -nv -O "${{ runner.temp }}/java_package.tar.gz" "${jdk_url}"
    - name: 'Set up JDK ${{ matrix.jdk_version }} / ${{ matrix.jdk_url }}'
      uses: actions/setup-java@v2
      if: ${{ matrix.jdk_distribution == 'jdkfile' }}
      with:
        distribution: ${{ matrix.jdk_distribution }}
        java-version: ${{ matrix.jdk_version }}
        jdkFile: '${{ runner.temp }}/java_package.tar.gz'
        architecture: x64

    - name: Java version
      run: |
        java -version

    - name: PostgreSQL version
      env:
        PGUSER: postgres
        PGDATABASE: postgres
        PGHOST: localhost
      run: |
        if ! docker/bin/wait_for_pg_isready; then
            # Server is not online so dump some logs for debugging
            docker ps
            (cd docker && docker-compose logs)
        fi
        psql -c 'SELECT version()'

    - name: Prepare local properties
      run: |
        cat <<EOF >ssltest.local.properties
        enable_ssl_tests=${{ matrix.ssl }}
        EOF
        cat <<EOF >build.local.properties
        preferQueryMode=${{ matrix.query_mode}}
        EOF

    - name: Test
      uses: burrunan/gradle-cache-action@v1
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      with:
        job-id: jdk${{ matrix.jdk_version }}_pg${{ matrix.pg_version}}
        arguments: ${{ matrix.gradle_args }} --no-parallel --no-daemon ${{ github.event.inputs.gradle_args }}
        properties: |
          includeTestTags=${{ matrix.junit_include_tags }}

    - name: 'Upload code coverage'
      uses: codecov/codecov-action@a1ed4b322b4b38cb846afb5a0ebfa17086917d27
      if: ${{ contains(github.event.inputs.gradle_args, 'jacoco') }}
      with:
        file: ./build/reports/jacoco/jacocoReport/jacocoReport.xml
