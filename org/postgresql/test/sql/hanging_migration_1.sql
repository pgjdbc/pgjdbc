DO $$ BEGIN
	IF EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = '-NGS-' AND c.relname = 'database_setting') THEN	
		IF EXISTS(SELECT * FROM "-NGS-".Database_Setting WHERE Key ILIKE 'mode' AND NOT Value ILIKE 'unsafe') THEN
			RAISE EXCEPTION 'Database upgrade is forbidden. Change database mode to allow upgrade';
		END IF;
	END IF;
END $$ LANGUAGE plpgsql;

DO $$
DECLARE script VARCHAR;
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_namespace WHERE nspname = '-NGS-') THEN
		CREATE SCHEMA "-NGS-";
		COMMENT ON SCHEMA "-NGS-" IS 'NGS generated';
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_namespace WHERE nspname = 'public') THEN
		CREATE SCHEMA public;
		COMMENT ON SCHEMA public IS 'NGS generated';
	END IF;
	SELECT array_to_string(array_agg('DROP VIEW IF EXISTS ' || quote_ident(n.nspname) || '.' || quote_ident(cl.relname) || ' CASCADE;'), '')
	INTO script
	FROM pg_class cl
	INNER JOIN pg_namespace n ON cl.relnamespace = n.oid
	INNER JOIN pg_description d ON d.objoid = cl.oid
	WHERE cl.relkind = 'v' AND d.description LIKE 'NGS volatile%';
	IF length(script) > 0 THEN
		EXECUTE script;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS "-NGS-".Database_Migration
(
	Ordinal SERIAL PRIMARY KEY,
	Dsls TEXT,
	Implementations BYTEA,
	Version VARCHAR,
	Applied_At TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP)
);

CREATE OR REPLACE FUNCTION "-NGS-".Load_Last_Migration()
RETURNS "-NGS-".Database_Migration AS
$$
SELECT m FROM "-NGS-".Database_Migration m
ORDER BY Ordinal DESC 
LIMIT 1
$$ LANGUAGE sql SECURITY DEFINER STABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Persist_Concepts(dsls TEXT, implementations BYTEA, version VARCHAR)
  RETURNS void AS
$$
BEGIN
	INSERT INTO "-NGS-".Database_Migration(Dsls, Implementations, Version) VALUES(dsls, implementations, version);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "-NGS-".Split_Uri(s text) RETURNS TEXT[] AS
$$
DECLARE i int;
DECLARE pos int;
DECLARE len int;
DECLARE res TEXT[];
DECLARE cur TEXT;
DECLARE c CHAR(1);
BEGIN
	pos = 0;
	i = 1;
	cur = '';
	len = length(s);
	LOOP
		pos = pos + 1;
		EXIT WHEN pos > len;
		c = substr(s, pos, 1);
		IF c = '/' THEN
			res[i] = cur;
			i = i + 1;
			cur = '';
		ELSE
			IF c = '\' THEN
				pos = pos + 1;
				c = substr(s, pos, 1);
			END IF;		
			cur = cur || c;
		END IF;
	END LOOP;
	res[i] = cur;
	return res;
END
$$ LANGUAGE plpgsql SECURITY DEFINER IMMUTABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Load_Type_Info(
	OUT type_schema character varying, 
	OUT type_name character varying, 
	OUT column_name character varying, 
	OUT column_schema character varying,
	OUT column_type character varying, 
	OUT column_index smallint, 
	OUT is_not_null boolean,
	OUT is_ngs_generated boolean)
  RETURNS SETOF record AS
$BODY$
SELECT 
	ns.nspname::varchar, 
	cl.relname::varchar, 
	atr.attname::varchar, 
	ns_ref.nspname::varchar,
	typ.typname::varchar, 
	(SELECT COUNT(*) + 1
	FROM pg_attribute atr_ord
	WHERE 
		atr.attrelid = atr_ord.attrelid
		AND atr_ord.attisdropped = false
		AND atr_ord.attnum > 0
		AND atr_ord.attnum < atr.attnum)::smallint, 
	atr.attnotnull,
	coalesce(d.description LIKE 'NGS generated%', false)
FROM 
	pg_attribute atr
	INNER JOIN pg_class cl ON atr.attrelid = cl.oid
	INNER JOIN pg_namespace ns ON cl.relnamespace = ns.oid
	INNER JOIN pg_type typ ON atr.atttypid = typ.oid
	INNER JOIN pg_namespace ns_ref ON typ.typnamespace = ns_ref.oid
	LEFT JOIN pg_description d ON d.objoid = cl.oid
								AND d.objsubid = atr.attnum
WHERE
	(cl.relkind = 'r' OR cl.relkind = 'v' OR cl.relkind = 'c')
	AND ns.nspname NOT LIKE 'pg_%'
	AND ns.nspname != 'information_schema'
	AND atr.attnum > 0
	AND atr.attisdropped = FALSE
ORDER BY 1, 2, 6
$BODY$
  LANGUAGE SQL STABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Safe_Notify(target varchar, name varchar, operation varchar, uris varchar[]) RETURNS VOID AS
$$
DECLARE message VARCHAR;
DECLARE array_size INT;
BEGIN
	array_size = array_upper(uris, 1);
	message = name || ':' || operation || ':' || uris::TEXT;
	IF (array_size > 0 and length(message) < 8000) THEN 
		PERFORM pg_notify(target, message);
	ELSEIF (array_size > 1) THEN
		PERFORM "-NGS-".Safe_Notify(target, name, operation, (SELECT array_agg(u) FROM (SELECT unnest(uris) u LIMIT (array_size+1)/2) u));
		PERFORM "-NGS-".Safe_Notify(target, name, operation, (SELECT array_agg(u) FROM (SELECT unnest(uris) u OFFSET (array_size+1)/2) u));
	ELSEIF (array_size = 1) THEN
		RAISE EXCEPTION 'uri can''t be longer than 8000 characters';
	END IF;	
END
$$ LANGUAGE PLPGSQL SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "-NGS-".cast_int(int[]) RETURNS TEXT AS
$$ SELECT $1::TEXT[]::TEXT $$ LANGUAGE SQL IMMUTABLE COST 1;
CREATE OR REPLACE FUNCTION "-NGS-".cast_bigint(bigint[]) RETURNS TEXT AS
$$ SELECT $1::TEXT[]::TEXT $$ LANGUAGE SQL IMMUTABLE COST 1;

DO $$ BEGIN
	-- unfortunately only superuser can create such casts
	IF EXISTS(SELECT * FROM pg_catalog.pg_user WHERE usename = CURRENT_USER AND usesuper) THEN
		IF NOT EXISTS (SELECT * FROM pg_catalog.pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid WHERE s.typname = '_int4' AND t.typname = 'text') THEN
			CREATE CAST (int[] AS text) WITH FUNCTION "-NGS-".cast_int(int[]) AS ASSIGNMENT;
		END IF;
		IF NOT EXISTS (SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid WHERE s.typname = '_int8' AND t.typname = 'text') THEN
			CREATE CAST (bigint[] AS text) WITH FUNCTION "-NGS-".cast_bigint(bigint[]) AS ASSIGNMENT;
		END IF;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "-NGS-".Generate_Uri2(text, text) RETURNS text AS 
$$
BEGIN
	RETURN replace(replace($1, '\','\\'), '/', '\/')||'/'||replace(replace($2, '\','\\'), '/', '\/');
END;
$$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Generate_Uri3(text, text, text) RETURNS text AS 
$$
BEGIN
	RETURN replace(replace($1, '\','\\'), '/', '\/')||'/'||replace(replace($2, '\','\\'), '/', '\/')||'/'||replace(replace($3, '\','\\'), '/', '\/');
END;
$$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Generate_Uri4(text, text, text, text) RETURNS text AS 
$$
BEGIN
	RETURN replace(replace($1, '\','\\'), '/', '\/')||'/'||replace(replace($2, '\','\\'), '/', '\/')||'/'||replace(replace($3, '\','\\'), '/', '\/')||'/'||replace(replace($4, '\','\\'), '/', '\/');
END;
$$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Generate_Uri5(text, text, text, text, text) RETURNS text AS 
$$
BEGIN
	RETURN replace(replace($1, '\','\\'), '/', '\/')||'/'||replace(replace($2, '\','\\'), '/', '\/')||'/'||replace(replace($3, '\','\\'), '/', '\/')||'/'||replace(replace($4, '\','\\'), '/', '\/')||'/'||replace(replace($5, '\','\\'), '/', '\/');
END;
$$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE OR REPLACE FUNCTION "-NGS-".Generate_Uri(text[]) RETURNS text AS 
$$
BEGIN
	RETURN (SELECT array_to_string(array_agg(replace(replace(u, '\','\\'), '/', '\/')), '/') FROM unnest($1) u);
END;
$$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE TABLE IF NOT EXISTS "-NGS-".Database_Setting
(
	Key VARCHAR PRIMARY KEY,
	Value TEXT NOT NULL
);

CREATE OR REPLACE FUNCTION "-NGS-".Create_Type_Cast(function VARCHAR, schema VARCHAR, from_name VARCHAR, to_name VARCHAR)
RETURNS void
AS
$$
DECLARE header VARCHAR;
DECLARE source VARCHAR;
DECLARE footer VARCHAR;
DECLARE col_name VARCHAR;
DECLARE type VARCHAR = '"' || schema || '"."' || to_name || '"';
BEGIN
	header = 'CREATE OR REPLACE FUNCTION ' || function || '
RETURNS ' || type || '
AS
$BODY$
SELECT ROW(';
	footer = ')::' || type || '
$BODY$ IMMUTABLE LANGUAGE sql;';
	source = '';
	FOR col_name IN 
		SELECT 
			CASE WHEN 
				EXISTS (SELECT * FROM "-NGS-".Load_Type_Info() f 
					WHERE f.type_schema = schema AND f.type_name = from_name AND f.column_name = t.column_name)
				OR EXISTS(SELECT * FROM pg_proc p JOIN pg_type t_in ON p.proargtypes[0] = t_in.oid 
					JOIN pg_namespace n_in ON t_in.typnamespace = n_in.oid JOIN pg_namespace n ON p.pronamespace = n.oid
					WHERE array_upper(p.proargtypes, 1) = 0 AND n.nspname = 'public' AND t_in.typname = from_name AND p.proname = t.column_name) THEN t.column_name
				ELSE null
			END
		FROM "-NGS-".Load_Type_Info() t
		WHERE 
			t.type_schema = schema 
			AND t.type_name = to_name
		ORDER BY t.column_index 
	LOOP
		IF col_name IS NULL THEN
			source = source || 'null, ';
		ELSE
			source = source || '$1."' || col_name || '", ';
		END IF;
	END LOOP;
	IF (LENGTH(source) > 0) THEN 
		source = SUBSTRING(source, 1, LENGTH(source) - 2);
	END IF;
	EXECUTE (header || source || footer);
END
$$ LANGUAGE plpgsql;;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_namespace WHERE nspname = 'AggregateOneEntityBinary') THEN
		CREATE SCHEMA "AggregateOneEntityBinary";
		COMMENT ON SCHEMA "AggregateOneEntityBinary" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA0V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BA1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BA1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."BA1V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_BE1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."BE1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."BE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA0V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA0V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GA1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GA1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."GA1V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."GA1V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_GE1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."GE1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."GE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA0V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE0V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE0V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1A0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1A0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1A0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1A0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1A0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1A1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1A1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1A1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1A1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1A1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1C0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1C0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1C0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1C0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1C0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1C1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1C1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1C1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1C1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1C1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1K0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1K0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1K0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1K0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1K0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1K1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1K1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1K1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1K1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1K1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1L0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1L0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1L0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1L0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1L0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1L1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1L1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1L1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1L1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1L1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Q1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1Q1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1Q1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1Q1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1Q1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1S0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1S0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1S0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1S0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1S0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1S1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1S1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1S1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1S1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1S1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V0Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1V0Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1V0Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1V0Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1V0Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1V0Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SA1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SA1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V1Bi_sequence') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1V1Bi_sequence";
		COMMENT ON SEQUENCE "AggregateOneEntityBinary"."SA1V1Bi_sequence" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND t.typname = '-ngs_SE1V1Bi_type-') THEN	
		CREATE TYPE "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" AS ();
		COMMENT ON TYPE "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1V1Bi') THEN	
		CREATE TABLE "AggregateOneEntityBinary"."SE1V1Bi" ();
		COMMENT ON TABLE "AggregateOneEntityBinary"."SE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0A0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A0Bi_type-' AND column_name = 'bE0A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" ADD ATTRIBUTE "bE0A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-"."bE0A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0A0Bi_type-' AND column_name = 'p0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" ADD ATTRIBUTE "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0A0Bi' AND column_name = 'p0A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0A0Bi" ADD COLUMN "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0A0Bi"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0A1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A1Bi_type-' AND column_name = 'bE0A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" ADD ATTRIBUTE "bE0A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-"."bE0A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0A1Bi_type-' AND column_name = 'p0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" ADD ATTRIBUTE "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0A1Bi' AND column_name = 'p0A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0A1Bi" ADD COLUMN "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0A1Bi"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Bi_type-' AND column_name = 'bE0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" ADD ATTRIBUTE "bE0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Bi_type-"."bE0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0Bi_type-' AND column_name = 'p0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0Bi_type-" ADD ATTRIBUTE "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0Bi_type-"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0Bi' AND column_name = 'p0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0Bi" ADD COLUMN "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0Bi"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0C0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C0Bi_type-' AND column_name = 'bE0C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" ADD ATTRIBUTE "bE0C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-"."bE0C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0C0Bi_type-' AND column_name = 'p0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" ADD ATTRIBUTE "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0C0Bi' AND column_name = 'p0C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0C0Bi" ADD COLUMN "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0C0Bi"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0C1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C1Bi_type-' AND column_name = 'bE0C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" ADD ATTRIBUTE "bE0C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-"."bE0C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0C1Bi_type-' AND column_name = 'p0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" ADD ATTRIBUTE "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0C1Bi' AND column_name = 'p0C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0C1Bi" ADD COLUMN "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0C1Bi"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0K0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K0Bi_type-' AND column_name = 'bE0K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" ADD ATTRIBUTE "bE0K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-"."bE0K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0K0Bi_type-' AND column_name = 'p0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" ADD ATTRIBUTE "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0K0Bi' AND column_name = 'p0K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0K0Bi" ADD COLUMN "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0K0Bi"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0K1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K1Bi_type-' AND column_name = 'bE0K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" ADD ATTRIBUTE "bE0K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-"."bE0K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0K1Bi_type-' AND column_name = 'p0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" ADD ATTRIBUTE "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0K1Bi' AND column_name = 'p0K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0K1Bi" ADD COLUMN "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0K1Bi"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0L0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L0Bi_type-' AND column_name = 'bE0L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" ADD ATTRIBUTE "bE0L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-"."bE0L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0L0Bi_type-' AND column_name = 'p0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" ADD ATTRIBUTE "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0L0Bi' AND column_name = 'p0L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0L0Bi" ADD COLUMN "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0L0Bi"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0L1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L1Bi_type-' AND column_name = 'bE0L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" ADD ATTRIBUTE "bE0L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-"."bE0L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0L1Bi_type-' AND column_name = 'p0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" ADD ATTRIBUTE "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0L1Bi' AND column_name = 'p0L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0L1Bi" ADD COLUMN "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0L1Bi"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0Q1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Q1Bi_type-' AND column_name = 'bE0Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" ADD ATTRIBUTE "bE0Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-"."bE0Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0Q1Bi_type-' AND column_name = 'p0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" ADD ATTRIBUTE "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0Q1Bi' AND column_name = 'p0Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0Q1Bi" ADD COLUMN "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0Q1Bi"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0S0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S0Bi_type-' AND column_name = 'bE0S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" ADD ATTRIBUTE "bE0S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-"."bE0S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0S0Bi_type-' AND column_name = 'p0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" ADD ATTRIBUTE "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0S0Bi' AND column_name = 'p0S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0S0Bi" ADD COLUMN "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0S0Bi"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0S1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S1Bi_type-' AND column_name = 'bE0S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" ADD ATTRIBUTE "bE0S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-"."bE0S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0S1Bi_type-' AND column_name = 'p0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" ADD ATTRIBUTE "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0S1Bi' AND column_name = 'p0S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0S1Bi" ADD COLUMN "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0S1Bi"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0V0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V0Bi_type-' AND column_name = 'bE0V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" ADD ATTRIBUTE "bE0V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-"."bE0V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0V0Bi_type-' AND column_name = 'p0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" ADD ATTRIBUTE "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0V0Bi' AND column_name = 'p0V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0V0Bi" ADD COLUMN "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0V0Bi"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA0V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA0V1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA0V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V1Bi_type-' AND column_name = 'bE0V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" ADD ATTRIBUTE "bE0V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-"."bE0V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0V1Bi_type-' AND column_name = 'p0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" ADD ATTRIBUTE "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0V1Bi' AND column_name = 'p0V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0V1Bi" ADD COLUMN "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0V1Bi"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1A0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A0Bi_type-' AND column_name = 'bE1A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" ADD ATTRIBUTE "bE1A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-"."bE1A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1A0Bi_type-' AND column_name = 'p1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" ADD ATTRIBUTE "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1A0Bi' AND column_name = 'p1A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" ADD COLUMN "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1A0Bi"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1A1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A1Bi_type-' AND column_name = 'bE1A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" ADD ATTRIBUTE "bE1A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-"."bE1A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1A1Bi_type-' AND column_name = 'p1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" ADD ATTRIBUTE "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1A1Bi' AND column_name = 'p1A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" ADD COLUMN "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1A1Bi"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Bi_type-' AND column_name = 'bE1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" ADD ATTRIBUTE "bE1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Bi_type-"."bE1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1Bi_type-' AND column_name = 'p1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1Bi_type-" ADD ATTRIBUTE "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1Bi_type-"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1Bi' AND column_name = 'p1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" ADD COLUMN "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1Bi"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1C0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C0Bi_type-' AND column_name = 'bE1C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" ADD ATTRIBUTE "bE1C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-"."bE1C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1C0Bi_type-' AND column_name = 'p1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" ADD ATTRIBUTE "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1C0Bi' AND column_name = 'p1C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" ADD COLUMN "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1C0Bi"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1C1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C1Bi_type-' AND column_name = 'bE1C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" ADD ATTRIBUTE "bE1C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-"."bE1C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1C1Bi_type-' AND column_name = 'p1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" ADD ATTRIBUTE "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1C1Bi' AND column_name = 'p1C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" ADD COLUMN "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1C1Bi"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1K0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K0Bi_type-' AND column_name = 'bE1K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" ADD ATTRIBUTE "bE1K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-"."bE1K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1K0Bi_type-' AND column_name = 'p1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" ADD ATTRIBUTE "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1K0Bi' AND column_name = 'p1K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" ADD COLUMN "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1K0Bi"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1K1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K1Bi_type-' AND column_name = 'bE1K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" ADD ATTRIBUTE "bE1K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-"."bE1K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1K1Bi_type-' AND column_name = 'p1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" ADD ATTRIBUTE "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1K1Bi' AND column_name = 'p1K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" ADD COLUMN "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1K1Bi"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1L0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L0Bi_type-' AND column_name = 'bE1L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" ADD ATTRIBUTE "bE1L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-"."bE1L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1L0Bi_type-' AND column_name = 'p1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" ADD ATTRIBUTE "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1L0Bi' AND column_name = 'p1L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" ADD COLUMN "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1L0Bi"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1L1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L1Bi_type-' AND column_name = 'bE1L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" ADD ATTRIBUTE "bE1L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-"."bE1L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1L1Bi_type-' AND column_name = 'p1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" ADD ATTRIBUTE "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1L1Bi' AND column_name = 'p1L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" ADD COLUMN "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1L1Bi"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1Q1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Q1Bi_type-' AND column_name = 'bE1Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" ADD ATTRIBUTE "bE1Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-"."bE1Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1Q1Bi_type-' AND column_name = 'p1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" ADD ATTRIBUTE "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1Q1Bi' AND column_name = 'p1Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ADD COLUMN "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1Q1Bi"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1S0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S0Bi_type-' AND column_name = 'bE1S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" ADD ATTRIBUTE "bE1S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-"."bE1S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1S0Bi_type-' AND column_name = 'p1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" ADD ATTRIBUTE "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1S0Bi' AND column_name = 'p1S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" ADD COLUMN "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1S0Bi"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1S1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S1Bi_type-' AND column_name = 'bE1S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" ADD ATTRIBUTE "bE1S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-"."bE1S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1S1Bi_type-' AND column_name = 'p1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" ADD ATTRIBUTE "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1S1Bi' AND column_name = 'p1S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" ADD COLUMN "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1S1Bi"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1V0Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V0Bi_type-' AND column_name = 'bE1V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" ADD ATTRIBUTE "bE1V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-"."bE1V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1V0Bi_type-' AND column_name = 'p1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" ADD ATTRIBUTE "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1V0Bi' AND column_name = 'p1V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" ADD COLUMN "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1V0Bi"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" ADD ATTRIBUTE "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BA1V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BA1V1Bi" ADD COLUMN "ID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BA1V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V1Bi_type-' AND column_name = 'bE1V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" ADD ATTRIBUTE "bE1V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-"."bE1V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1V1Bi_type-' AND column_name = 'p1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" ADD ATTRIBUTE "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1V1Bi' AND column_name = 'p1V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" ADD COLUMN "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1V1Bi"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0A0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A0Bi_type-' AND column_name = 'gE0A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" ADD ATTRIBUTE "gE0A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-"."gE0A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0A0Bi_type-' AND column_name = 'p0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" ADD ATTRIBUTE "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0A0Bi' AND column_name = 'p0A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0A0Bi" ADD COLUMN "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0A0Bi"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0A1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A1Bi_type-' AND column_name = 'gE0A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" ADD ATTRIBUTE "gE0A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-"."gE0A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0A1Bi_type-' AND column_name = 'p0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" ADD ATTRIBUTE "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0A1Bi' AND column_name = 'p0A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0A1Bi" ADD COLUMN "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0A1Bi"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Bi_type-' AND column_name = 'gE0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" ADD ATTRIBUTE "gE0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Bi_type-"."gE0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0Bi_type-' AND column_name = 'p0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0Bi_type-" ADD ATTRIBUTE "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0Bi_type-"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0Bi' AND column_name = 'p0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0Bi" ADD COLUMN "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0Bi"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0C0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C0Bi_type-' AND column_name = 'gE0C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" ADD ATTRIBUTE "gE0C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-"."gE0C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0C0Bi_type-' AND column_name = 'p0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" ADD ATTRIBUTE "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0C0Bi' AND column_name = 'p0C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0C0Bi" ADD COLUMN "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0C0Bi"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0C1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C1Bi_type-' AND column_name = 'gE0C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" ADD ATTRIBUTE "gE0C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-"."gE0C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0C1Bi_type-' AND column_name = 'p0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" ADD ATTRIBUTE "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0C1Bi' AND column_name = 'p0C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0C1Bi" ADD COLUMN "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0C1Bi"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0K0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K0Bi_type-' AND column_name = 'gE0K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" ADD ATTRIBUTE "gE0K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-"."gE0K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0K0Bi_type-' AND column_name = 'p0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" ADD ATTRIBUTE "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0K0Bi' AND column_name = 'p0K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0K0Bi" ADD COLUMN "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0K0Bi"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0K1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K1Bi_type-' AND column_name = 'gE0K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" ADD ATTRIBUTE "gE0K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-"."gE0K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0K1Bi_type-' AND column_name = 'p0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" ADD ATTRIBUTE "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0K1Bi' AND column_name = 'p0K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0K1Bi" ADD COLUMN "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0K1Bi"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0L0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L0Bi_type-' AND column_name = 'gE0L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" ADD ATTRIBUTE "gE0L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-"."gE0L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0L0Bi_type-' AND column_name = 'p0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" ADD ATTRIBUTE "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0L0Bi' AND column_name = 'p0L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0L0Bi" ADD COLUMN "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0L0Bi"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0L1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L1Bi_type-' AND column_name = 'gE0L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" ADD ATTRIBUTE "gE0L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-"."gE0L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0L1Bi_type-' AND column_name = 'p0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" ADD ATTRIBUTE "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0L1Bi' AND column_name = 'p0L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0L1Bi" ADD COLUMN "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0L1Bi"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0Q1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Q1Bi_type-' AND column_name = 'gE0Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" ADD ATTRIBUTE "gE0Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-"."gE0Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0Q1Bi_type-' AND column_name = 'p0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" ADD ATTRIBUTE "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0Q1Bi' AND column_name = 'p0Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0Q1Bi" ADD COLUMN "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0Q1Bi"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0S0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S0Bi_type-' AND column_name = 'gE0S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" ADD ATTRIBUTE "gE0S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-"."gE0S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0S0Bi_type-' AND column_name = 'p0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" ADD ATTRIBUTE "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0S0Bi' AND column_name = 'p0S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0S0Bi" ADD COLUMN "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0S0Bi"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0S1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S1Bi_type-' AND column_name = 'gE0S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" ADD ATTRIBUTE "gE0S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-"."gE0S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0S1Bi_type-' AND column_name = 'p0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" ADD ATTRIBUTE "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0S1Bi' AND column_name = 'p0S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0S1Bi" ADD COLUMN "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0S1Bi"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0V0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V0Bi_type-' AND column_name = 'gE0V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" ADD ATTRIBUTE "gE0V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-"."gE0V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0V0Bi_type-' AND column_name = 'p0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" ADD ATTRIBUTE "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0V0Bi' AND column_name = 'p0V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0V0Bi" ADD COLUMN "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0V0Bi"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA0V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA0V1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA0V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V1Bi_type-' AND column_name = 'gE0V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" ADD ATTRIBUTE "gE0V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-"."gE0V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0V1Bi_type-' AND column_name = 'p0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" ADD ATTRIBUTE "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0V1Bi' AND column_name = 'p0V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0V1Bi" ADD COLUMN "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0V1Bi"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1A0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A0Bi_type-' AND column_name = 'gE1A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" ADD ATTRIBUTE "gE1A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-"."gE1A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1A0Bi_type-' AND column_name = 'p1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" ADD ATTRIBUTE "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1A0Bi' AND column_name = 'p1A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" ADD COLUMN "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1A0Bi"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1A1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A1Bi_type-' AND column_name = 'gE1A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" ADD ATTRIBUTE "gE1A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-"."gE1A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1A1Bi_type-' AND column_name = 'p1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" ADD ATTRIBUTE "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1A1Bi' AND column_name = 'p1A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" ADD COLUMN "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1A1Bi"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Bi_type-' AND column_name = 'gE1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" ADD ATTRIBUTE "gE1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Bi_type-"."gE1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1Bi_type-' AND column_name = 'p1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1Bi_type-" ADD ATTRIBUTE "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1Bi_type-"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1Bi' AND column_name = 'p1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" ADD COLUMN "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1Bi"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1C0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C0Bi_type-' AND column_name = 'gE1C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" ADD ATTRIBUTE "gE1C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-"."gE1C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1C0Bi_type-' AND column_name = 'p1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" ADD ATTRIBUTE "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1C0Bi' AND column_name = 'p1C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" ADD COLUMN "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1C0Bi"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1C1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C1Bi_type-' AND column_name = 'gE1C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" ADD ATTRIBUTE "gE1C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-"."gE1C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1C1Bi_type-' AND column_name = 'p1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" ADD ATTRIBUTE "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1C1Bi' AND column_name = 'p1C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" ADD COLUMN "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1C1Bi"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1K0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K0Bi_type-' AND column_name = 'gE1K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" ADD ATTRIBUTE "gE1K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-"."gE1K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1K0Bi_type-' AND column_name = 'p1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" ADD ATTRIBUTE "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1K0Bi' AND column_name = 'p1K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" ADD COLUMN "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1K0Bi"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1K1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K1Bi_type-' AND column_name = 'gE1K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" ADD ATTRIBUTE "gE1K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-"."gE1K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1K1Bi_type-' AND column_name = 'p1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" ADD ATTRIBUTE "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1K1Bi' AND column_name = 'p1K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" ADD COLUMN "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1K1Bi"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1L0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L0Bi_type-' AND column_name = 'gE1L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" ADD ATTRIBUTE "gE1L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-"."gE1L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1L0Bi_type-' AND column_name = 'p1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" ADD ATTRIBUTE "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1L0Bi' AND column_name = 'p1L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" ADD COLUMN "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1L0Bi"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1L1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L1Bi_type-' AND column_name = 'gE1L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" ADD ATTRIBUTE "gE1L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-"."gE1L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1L1Bi_type-' AND column_name = 'p1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" ADD ATTRIBUTE "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1L1Bi' AND column_name = 'p1L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" ADD COLUMN "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1L1Bi"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1Q1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Q1Bi_type-' AND column_name = 'gE1Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" ADD ATTRIBUTE "gE1Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-"."gE1Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1Q1Bi_type-' AND column_name = 'p1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" ADD ATTRIBUTE "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1Q1Bi' AND column_name = 'p1Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ADD COLUMN "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1Q1Bi"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1S0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S0Bi_type-' AND column_name = 'gE1S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" ADD ATTRIBUTE "gE1S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-"."gE1S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1S0Bi_type-' AND column_name = 'p1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" ADD ATTRIBUTE "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1S0Bi' AND column_name = 'p1S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" ADD COLUMN "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1S0Bi"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1S1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S1Bi_type-' AND column_name = 'gE1S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" ADD ATTRIBUTE "gE1S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-"."gE1S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1S1Bi_type-' AND column_name = 'p1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" ADD ATTRIBUTE "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1S1Bi' AND column_name = 'p1S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" ADD COLUMN "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1S1Bi"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1V0Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V0Bi_type-' AND column_name = 'gE1V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" ADD ATTRIBUTE "gE1V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-"."gE1V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1V0Bi_type-' AND column_name = 'p1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" ADD ATTRIBUTE "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1V0Bi' AND column_name = 'p1V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" ADD COLUMN "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1V0Bi"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" ADD ATTRIBUTE "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GA1V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GA1V1Bi" ADD COLUMN "ID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GA1V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V1Bi_type-' AND column_name = 'gE1V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" ADD ATTRIBUTE "gE1V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-"."gE1V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1V1Bi_type-' AND column_name = 'p1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" ADD ATTRIBUTE "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1V1Bi' AND column_name = 'p1V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" ADD COLUMN "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1V1Bi"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0A0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A0Bi_type-' AND column_name = 'sE0A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" ADD ATTRIBUTE "sE0A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-"."sE0A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0A0Bi_type-' AND column_name = 'p0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" ADD ATTRIBUTE "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0A0Bi' AND column_name = 'p0A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0A0Bi" ADD COLUMN "p0A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0A0Bi"."p0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0A1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A1Bi_type-' AND column_name = 'sE0A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" ADD ATTRIBUTE "sE0A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-"."sE0A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0A1Bi_type-' AND column_name = 'p0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" ADD ATTRIBUTE "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0A1Bi' AND column_name = 'p0A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0A1Bi" ADD COLUMN "p0A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0A1Bi"."p0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Bi_type-' AND column_name = 'sE0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" ADD ATTRIBUTE "sE0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Bi_type-"."sE0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0Bi_type-' AND column_name = 'p0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0Bi_type-" ADD ATTRIBUTE "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0Bi_type-"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0Bi' AND column_name = 'p0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0Bi" ADD COLUMN "p0Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0Bi"."p0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0C0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C0Bi_type-' AND column_name = 'sE0C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" ADD ATTRIBUTE "sE0C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-"."sE0C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0C0Bi_type-' AND column_name = 'p0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" ADD ATTRIBUTE "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0C0Bi' AND column_name = 'p0C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0C0Bi" ADD COLUMN "p0C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0C0Bi"."p0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0C1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C1Bi_type-' AND column_name = 'sE0C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" ADD ATTRIBUTE "sE0C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-"."sE0C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0C1Bi_type-' AND column_name = 'p0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" ADD ATTRIBUTE "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0C1Bi' AND column_name = 'p0C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0C1Bi" ADD COLUMN "p0C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0C1Bi"."p0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0K0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K0Bi_type-' AND column_name = 'sE0K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" ADD ATTRIBUTE "sE0K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-"."sE0K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0K0Bi_type-' AND column_name = 'p0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" ADD ATTRIBUTE "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0K0Bi' AND column_name = 'p0K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0K0Bi" ADD COLUMN "p0K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0K0Bi"."p0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0K1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K1Bi_type-' AND column_name = 'sE0K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" ADD ATTRIBUTE "sE0K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-"."sE0K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0K1Bi_type-' AND column_name = 'p0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" ADD ATTRIBUTE "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0K1Bi' AND column_name = 'p0K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0K1Bi" ADD COLUMN "p0K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0K1Bi"."p0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0L0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L0Bi_type-' AND column_name = 'sE0L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" ADD ATTRIBUTE "sE0L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-"."sE0L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0L0Bi_type-' AND column_name = 'p0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" ADD ATTRIBUTE "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0L0Bi' AND column_name = 'p0L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0L0Bi" ADD COLUMN "p0L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0L0Bi"."p0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0L1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L1Bi_type-' AND column_name = 'sE0L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" ADD ATTRIBUTE "sE0L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-"."sE0L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0L1Bi_type-' AND column_name = 'p0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" ADD ATTRIBUTE "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0L1Bi' AND column_name = 'p0L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0L1Bi" ADD COLUMN "p0L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0L1Bi"."p0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0Q1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Q1Bi_type-' AND column_name = 'sE0Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" ADD ATTRIBUTE "sE0Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-"."sE0Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0Q1Bi_type-' AND column_name = 'p0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" ADD ATTRIBUTE "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0Q1Bi' AND column_name = 'p0Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0Q1Bi" ADD COLUMN "p0Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0Q1Bi"."p0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0S0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S0Bi_type-' AND column_name = 'sE0S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" ADD ATTRIBUTE "sE0S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-"."sE0S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0S0Bi_type-' AND column_name = 'p0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" ADD ATTRIBUTE "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0S0Bi' AND column_name = 'p0S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0S0Bi" ADD COLUMN "p0S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0S0Bi"."p0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0S1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S1Bi_type-' AND column_name = 'sE0S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" ADD ATTRIBUTE "sE0S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-"."sE0S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0S1Bi_type-' AND column_name = 'p0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" ADD ATTRIBUTE "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0S1Bi' AND column_name = 'p0S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0S1Bi" ADD COLUMN "p0S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0S1Bi"."p0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0V0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V0Bi_type-' AND column_name = 'sE0V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" ADD ATTRIBUTE "sE0V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-"."sE0V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0V0Bi_type-' AND column_name = 'p0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" ADD ATTRIBUTE "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0V0Bi' AND column_name = 'p0V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0V0Bi" ADD COLUMN "p0V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0V0Bi"."p0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA0V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA0V1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA0V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V1Bi_type-' AND column_name = 'sE0V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" ADD ATTRIBUTE "sE0V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-"."sE0V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0V1Bi_type-' AND column_name = 'p0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" ADD ATTRIBUTE "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0V1Bi' AND column_name = 'p0V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0V1Bi" ADD COLUMN "p0V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0V1Bi"."p0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1A0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1A0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1A0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A0Bi_type-' AND column_name = 'sE1A0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" ADD ATTRIBUTE "sE1A0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-"."sE1A0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1A0Bi_type-' AND column_name = 'p1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" ADD ATTRIBUTE "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1A0Bi' AND column_name = 'p1A0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" ADD COLUMN "p1A0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1A0Bi"."p1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1A1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1A1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1A1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A1Bi_type-' AND column_name = 'sE1A1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" ADD ATTRIBUTE "sE1A1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-"."sE1A1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1A1Bi_type-' AND column_name = 'p1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" ADD ATTRIBUTE "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1A1Bi' AND column_name = 'p1A1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" ADD COLUMN "p1A1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1A1Bi"."p1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Bi_type-' AND column_name = 'sE1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" ADD ATTRIBUTE "sE1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Bi_type-"."sE1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1Bi_type-' AND column_name = 'p1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1Bi_type-" ADD ATTRIBUTE "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1Bi_type-"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1Bi' AND column_name = 'p1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" ADD COLUMN "p1Bi" BYTEA;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1Bi"."p1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1C0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1C0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1C0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C0Bi_type-' AND column_name = 'sE1C0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" ADD ATTRIBUTE "sE1C0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-"."sE1C0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1C0Bi_type-' AND column_name = 'p1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" ADD ATTRIBUTE "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1C0Bi' AND column_name = 'p1C0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" ADD COLUMN "p1C0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1C0Bi"."p1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1C1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1C1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1C1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C1Bi_type-' AND column_name = 'sE1C1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" ADD ATTRIBUTE "sE1C1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-"."sE1C1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1C1Bi_type-' AND column_name = 'p1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" ADD ATTRIBUTE "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1C1Bi' AND column_name = 'p1C1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" ADD COLUMN "p1C1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1C1Bi"."p1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1K0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1K0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1K0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K0Bi_type-' AND column_name = 'sE1K0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" ADD ATTRIBUTE "sE1K0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-"."sE1K0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1K0Bi_type-' AND column_name = 'p1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" ADD ATTRIBUTE "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1K0Bi' AND column_name = 'p1K0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" ADD COLUMN "p1K0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1K0Bi"."p1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1K1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1K1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1K1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K1Bi_type-' AND column_name = 'sE1K1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" ADD ATTRIBUTE "sE1K1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-"."sE1K1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1K1Bi_type-' AND column_name = 'p1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" ADD ATTRIBUTE "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1K1Bi' AND column_name = 'p1K1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" ADD COLUMN "p1K1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1K1Bi"."p1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1L0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1L0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1L0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L0Bi_type-' AND column_name = 'sE1L0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" ADD ATTRIBUTE "sE1L0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-"."sE1L0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1L0Bi_type-' AND column_name = 'p1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" ADD ATTRIBUTE "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1L0Bi' AND column_name = 'p1L0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" ADD COLUMN "p1L0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1L0Bi"."p1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1L1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1L1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1L1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L1Bi_type-' AND column_name = 'sE1L1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" ADD ATTRIBUTE "sE1L1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-"."sE1L1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1L1Bi_type-' AND column_name = 'p1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" ADD ATTRIBUTE "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1L1Bi' AND column_name = 'p1L1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" ADD COLUMN "p1L1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1L1Bi"."p1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Q1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1Q1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1Q1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1Q1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Q1Bi_type-' AND column_name = 'sE1Q1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" ADD ATTRIBUTE "sE1Q1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-"."sE1Q1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1Q1Bi_type-' AND column_name = 'p1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" ADD ATTRIBUTE "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1Q1Bi' AND column_name = 'p1Q1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ADD COLUMN "p1Q1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1Q1Bi"."p1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1S0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1S0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1S0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S0Bi_type-' AND column_name = 'sE1S0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" ADD ATTRIBUTE "sE1S0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-"."sE1S0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1S0Bi_type-' AND column_name = 'p1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" ADD ATTRIBUTE "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1S0Bi' AND column_name = 'p1S0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" ADD COLUMN "p1S0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1S0Bi"."p1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1S1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1S1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1S1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S1Bi_type-' AND column_name = 'sE1S1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" ADD ATTRIBUTE "sE1S1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-"."sE1S1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1S1Bi_type-' AND column_name = 'p1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" ADD ATTRIBUTE "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1S1Bi' AND column_name = 'p1S1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" ADD COLUMN "p1S1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1S1Bi"."p1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V0Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1V0Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1V0Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1V0Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V0Bi_type-' AND column_name = 'sE1V0BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" ADD ATTRIBUTE "sE1V0BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-"."sE1V0BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1V0Bi_type-' AND column_name = 'p1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" ADD ATTRIBUTE "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1V0Bi' AND column_name = 'p1V0Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" ADD COLUMN "p1V0Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1V0Bi"."p1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V1Bi_type-' AND column_name = 'ID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" ADD ATTRIBUTE "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SA1V1Bi' AND column_name = 'ID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SA1V1Bi" ADD COLUMN "ID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SA1V1Bi"."ID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V1Bi_type-' AND column_name = 'sE1V1BiURI') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" ADD ATTRIBUTE "sE1V1BiURI" TEXT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-"."sE1V1BiURI" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1V1Bi_type-' AND column_name = 'p1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" ADD ATTRIBUTE "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1V1Bi' AND column_name = 'p1V1Bi') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" ADD COLUMN "p1V1Bi" BYTEA[];
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1V1Bi"."p1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0A0Bi_type-' AND column_name = 'BA0A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" ADD ATTRIBUTE "BA0A0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-"."BA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0A0Bi' AND column_name = 'BA0A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0A0Bi" ADD COLUMN "BA0A0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0A0Bi"."BA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0A1Bi_type-' AND column_name = 'BA0A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" ADD ATTRIBUTE "BA0A1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-"."BA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0A1Bi' AND column_name = 'BA0A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0A1Bi" ADD COLUMN "BA0A1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0A1Bi"."BA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0Bi_type-' AND column_name = 'BA0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0Bi_type-" ADD ATTRIBUTE "BA0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0Bi_type-"."BA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0Bi' AND column_name = 'BA0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0Bi" ADD COLUMN "BA0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0Bi"."BA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0C0Bi_type-' AND column_name = 'BA0C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" ADD ATTRIBUTE "BA0C0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-"."BA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0C0Bi' AND column_name = 'BA0C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0C0Bi" ADD COLUMN "BA0C0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0C0Bi"."BA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0C1Bi_type-' AND column_name = 'BA0C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" ADD ATTRIBUTE "BA0C1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-"."BA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0C1Bi' AND column_name = 'BA0C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0C1Bi" ADD COLUMN "BA0C1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0C1Bi"."BA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0K0Bi_type-' AND column_name = 'BA0K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" ADD ATTRIBUTE "BA0K0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-"."BA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0K0Bi' AND column_name = 'BA0K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0K0Bi" ADD COLUMN "BA0K0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0K0Bi"."BA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0K1Bi_type-' AND column_name = 'BA0K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" ADD ATTRIBUTE "BA0K1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-"."BA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0K1Bi' AND column_name = 'BA0K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0K1Bi" ADD COLUMN "BA0K1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0K1Bi"."BA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0L0Bi_type-' AND column_name = 'BA0L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" ADD ATTRIBUTE "BA0L0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-"."BA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0L0Bi' AND column_name = 'BA0L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0L0Bi" ADD COLUMN "BA0L0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0L0Bi"."BA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0L1Bi_type-' AND column_name = 'BA0L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" ADD ATTRIBUTE "BA0L1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-"."BA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0L1Bi' AND column_name = 'BA0L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0L1Bi" ADD COLUMN "BA0L1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0L1Bi"."BA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0Q1Bi_type-' AND column_name = 'BA0Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" ADD ATTRIBUTE "BA0Q1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-"."BA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0Q1Bi' AND column_name = 'BA0Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0Q1Bi" ADD COLUMN "BA0Q1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0Q1Bi"."BA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0S0Bi_type-' AND column_name = 'BA0S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" ADD ATTRIBUTE "BA0S0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-"."BA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0S0Bi' AND column_name = 'BA0S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0S0Bi" ADD COLUMN "BA0S0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0S0Bi"."BA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0S1Bi_type-' AND column_name = 'BA0S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" ADD ATTRIBUTE "BA0S1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-"."BA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0S1Bi' AND column_name = 'BA0S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0S1Bi" ADD COLUMN "BA0S1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0S1Bi"."BA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0V0Bi_type-' AND column_name = 'BA0V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" ADD ATTRIBUTE "BA0V0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-"."BA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0V0Bi' AND column_name = 'BA0V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0V0Bi" ADD COLUMN "BA0V0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0V0Bi"."BA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE0V1Bi_type-' AND column_name = 'BA0V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" ADD ATTRIBUTE "BA0V1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-"."BA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE0V1Bi' AND column_name = 'BA0V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE0V1Bi" ADD COLUMN "BA0V1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE0V1Bi"."BA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1A0Bi_type-' AND column_name = 'BA1A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" ADD ATTRIBUTE "BA1A0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-"."BA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1A0Bi' AND column_name = 'BA1A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" ADD COLUMN "BA1A0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1A0Bi"."BA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1A1Bi_type-' AND column_name = 'BA1A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" ADD ATTRIBUTE "BA1A1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-"."BA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1A1Bi' AND column_name = 'BA1A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" ADD COLUMN "BA1A1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1A1Bi"."BA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1Bi_type-' AND column_name = 'BA1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1Bi_type-" ADD ATTRIBUTE "BA1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1Bi_type-"."BA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1Bi' AND column_name = 'BA1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" ADD COLUMN "BA1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1Bi"."BA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1C0Bi_type-' AND column_name = 'BA1C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" ADD ATTRIBUTE "BA1C0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-"."BA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1C0Bi' AND column_name = 'BA1C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" ADD COLUMN "BA1C0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1C0Bi"."BA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1C1Bi_type-' AND column_name = 'BA1C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" ADD ATTRIBUTE "BA1C1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-"."BA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1C1Bi' AND column_name = 'BA1C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" ADD COLUMN "BA1C1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1C1Bi"."BA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1K0Bi_type-' AND column_name = 'BA1K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" ADD ATTRIBUTE "BA1K0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-"."BA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1K0Bi' AND column_name = 'BA1K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" ADD COLUMN "BA1K0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1K0Bi"."BA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1K1Bi_type-' AND column_name = 'BA1K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" ADD ATTRIBUTE "BA1K1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-"."BA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1K1Bi' AND column_name = 'BA1K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" ADD COLUMN "BA1K1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1K1Bi"."BA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1L0Bi_type-' AND column_name = 'BA1L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" ADD ATTRIBUTE "BA1L0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-"."BA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1L0Bi' AND column_name = 'BA1L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" ADD COLUMN "BA1L0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1L0Bi"."BA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1L1Bi_type-' AND column_name = 'BA1L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" ADD ATTRIBUTE "BA1L1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-"."BA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1L1Bi' AND column_name = 'BA1L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" ADD COLUMN "BA1L1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1L1Bi"."BA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1Q1Bi_type-' AND column_name = 'BA1Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" ADD ATTRIBUTE "BA1Q1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-"."BA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1Q1Bi' AND column_name = 'BA1Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ADD COLUMN "BA1Q1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1Q1Bi"."BA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1S0Bi_type-' AND column_name = 'BA1S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" ADD ATTRIBUTE "BA1S0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-"."BA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1S0Bi' AND column_name = 'BA1S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" ADD COLUMN "BA1S0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1S0Bi"."BA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1S1Bi_type-' AND column_name = 'BA1S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" ADD ATTRIBUTE "BA1S1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-"."BA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1S1Bi' AND column_name = 'BA1S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" ADD COLUMN "BA1S1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1S1Bi"."BA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1V0Bi_type-' AND column_name = 'BA1V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" ADD ATTRIBUTE "BA1V0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-"."BA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1V0Bi' AND column_name = 'BA1V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" ADD COLUMN "BA1V0BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1V0Bi"."BA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BE1V1Bi_type-' AND column_name = 'BA1V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" ADD ATTRIBUTE "BA1V1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-"."BA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'BE1V1Bi' AND column_name = 'BA1V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" ADD COLUMN "BA1V1BiID" BIGINT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."BE1V1Bi"."BA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0A0Bi_type-' AND column_name = 'GA0A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" ADD ATTRIBUTE "GA0A0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-"."GA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0A0Bi' AND column_name = 'GA0A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0A0Bi" ADD COLUMN "GA0A0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0A0Bi"."GA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0A1Bi_type-' AND column_name = 'GA0A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" ADD ATTRIBUTE "GA0A1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-"."GA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0A1Bi' AND column_name = 'GA0A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0A1Bi" ADD COLUMN "GA0A1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0A1Bi"."GA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0Bi_type-' AND column_name = 'GA0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0Bi_type-" ADD ATTRIBUTE "GA0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0Bi_type-"."GA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0Bi' AND column_name = 'GA0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0Bi" ADD COLUMN "GA0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0Bi"."GA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0C0Bi_type-' AND column_name = 'GA0C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" ADD ATTRIBUTE "GA0C0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-"."GA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0C0Bi' AND column_name = 'GA0C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0C0Bi" ADD COLUMN "GA0C0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0C0Bi"."GA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0C1Bi_type-' AND column_name = 'GA0C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" ADD ATTRIBUTE "GA0C1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-"."GA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0C1Bi' AND column_name = 'GA0C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0C1Bi" ADD COLUMN "GA0C1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0C1Bi"."GA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0K0Bi_type-' AND column_name = 'GA0K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" ADD ATTRIBUTE "GA0K0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-"."GA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0K0Bi' AND column_name = 'GA0K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0K0Bi" ADD COLUMN "GA0K0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0K0Bi"."GA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0K1Bi_type-' AND column_name = 'GA0K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" ADD ATTRIBUTE "GA0K1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-"."GA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0K1Bi' AND column_name = 'GA0K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0K1Bi" ADD COLUMN "GA0K1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0K1Bi"."GA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0L0Bi_type-' AND column_name = 'GA0L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" ADD ATTRIBUTE "GA0L0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-"."GA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0L0Bi' AND column_name = 'GA0L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0L0Bi" ADD COLUMN "GA0L0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0L0Bi"."GA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0L1Bi_type-' AND column_name = 'GA0L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" ADD ATTRIBUTE "GA0L1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-"."GA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0L1Bi' AND column_name = 'GA0L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0L1Bi" ADD COLUMN "GA0L1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0L1Bi"."GA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0Q1Bi_type-' AND column_name = 'GA0Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" ADD ATTRIBUTE "GA0Q1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-"."GA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0Q1Bi' AND column_name = 'GA0Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0Q1Bi" ADD COLUMN "GA0Q1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0Q1Bi"."GA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0S0Bi_type-' AND column_name = 'GA0S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" ADD ATTRIBUTE "GA0S0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-"."GA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0S0Bi' AND column_name = 'GA0S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0S0Bi" ADD COLUMN "GA0S0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0S0Bi"."GA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0S1Bi_type-' AND column_name = 'GA0S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" ADD ATTRIBUTE "GA0S1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-"."GA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0S1Bi' AND column_name = 'GA0S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0S1Bi" ADD COLUMN "GA0S1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0S1Bi"."GA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0V0Bi_type-' AND column_name = 'GA0V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" ADD ATTRIBUTE "GA0V0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-"."GA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0V0Bi' AND column_name = 'GA0V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0V0Bi" ADD COLUMN "GA0V0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0V0Bi"."GA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE0V1Bi_type-' AND column_name = 'GA0V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" ADD ATTRIBUTE "GA0V1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-"."GA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE0V1Bi' AND column_name = 'GA0V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE0V1Bi" ADD COLUMN "GA0V1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE0V1Bi"."GA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1A0Bi_type-' AND column_name = 'GA1A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" ADD ATTRIBUTE "GA1A0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-"."GA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1A0Bi' AND column_name = 'GA1A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" ADD COLUMN "GA1A0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1A0Bi"."GA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1A1Bi_type-' AND column_name = 'GA1A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" ADD ATTRIBUTE "GA1A1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-"."GA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1A1Bi' AND column_name = 'GA1A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" ADD COLUMN "GA1A1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1A1Bi"."GA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1Bi_type-' AND column_name = 'GA1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1Bi_type-" ADD ATTRIBUTE "GA1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1Bi_type-"."GA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1Bi' AND column_name = 'GA1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" ADD COLUMN "GA1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1Bi"."GA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1C0Bi_type-' AND column_name = 'GA1C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" ADD ATTRIBUTE "GA1C0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-"."GA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1C0Bi' AND column_name = 'GA1C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" ADD COLUMN "GA1C0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1C0Bi"."GA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1C1Bi_type-' AND column_name = 'GA1C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" ADD ATTRIBUTE "GA1C1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-"."GA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1C1Bi' AND column_name = 'GA1C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" ADD COLUMN "GA1C1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1C1Bi"."GA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1K0Bi_type-' AND column_name = 'GA1K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" ADD ATTRIBUTE "GA1K0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-"."GA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1K0Bi' AND column_name = 'GA1K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" ADD COLUMN "GA1K0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1K0Bi"."GA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1K1Bi_type-' AND column_name = 'GA1K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" ADD ATTRIBUTE "GA1K1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-"."GA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1K1Bi' AND column_name = 'GA1K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" ADD COLUMN "GA1K1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1K1Bi"."GA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1L0Bi_type-' AND column_name = 'GA1L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" ADD ATTRIBUTE "GA1L0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-"."GA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1L0Bi' AND column_name = 'GA1L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" ADD COLUMN "GA1L0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1L0Bi"."GA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1L1Bi_type-' AND column_name = 'GA1L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" ADD ATTRIBUTE "GA1L1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-"."GA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1L1Bi' AND column_name = 'GA1L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" ADD COLUMN "GA1L1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1L1Bi"."GA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1Q1Bi_type-' AND column_name = 'GA1Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" ADD ATTRIBUTE "GA1Q1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-"."GA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1Q1Bi' AND column_name = 'GA1Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ADD COLUMN "GA1Q1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1Q1Bi"."GA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1S0Bi_type-' AND column_name = 'GA1S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" ADD ATTRIBUTE "GA1S0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-"."GA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1S0Bi' AND column_name = 'GA1S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" ADD COLUMN "GA1S0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1S0Bi"."GA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1S1Bi_type-' AND column_name = 'GA1S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" ADD ATTRIBUTE "GA1S1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-"."GA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1S1Bi' AND column_name = 'GA1S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" ADD COLUMN "GA1S1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1S1Bi"."GA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1V0Bi_type-' AND column_name = 'GA1V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" ADD ATTRIBUTE "GA1V0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-"."GA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1V0Bi' AND column_name = 'GA1V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" ADD COLUMN "GA1V0BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1V0Bi"."GA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GE1V1Bi_type-' AND column_name = 'GA1V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" ADD ATTRIBUTE "GA1V1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-"."GA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'GE1V1Bi' AND column_name = 'GA1V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" ADD COLUMN "GA1V1BiID" UUID;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."GE1V1Bi"."GA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0A0Bi_type-' AND column_name = 'SA0A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" ADD ATTRIBUTE "SA0A0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-"."SA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0A0Bi' AND column_name = 'SA0A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0A0Bi" ADD COLUMN "SA0A0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0A0Bi"."SA0A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0A1Bi_type-' AND column_name = 'SA0A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" ADD ATTRIBUTE "SA0A1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-"."SA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0A1Bi' AND column_name = 'SA0A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0A1Bi" ADD COLUMN "SA0A1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0A1Bi"."SA0A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0Bi_type-' AND column_name = 'SA0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0Bi_type-" ADD ATTRIBUTE "SA0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0Bi_type-"."SA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0Bi' AND column_name = 'SA0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0Bi" ADD COLUMN "SA0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0Bi"."SA0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0C0Bi_type-' AND column_name = 'SA0C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" ADD ATTRIBUTE "SA0C0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-"."SA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0C0Bi' AND column_name = 'SA0C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0C0Bi" ADD COLUMN "SA0C0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0C0Bi"."SA0C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0C1Bi_type-' AND column_name = 'SA0C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" ADD ATTRIBUTE "SA0C1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-"."SA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0C1Bi' AND column_name = 'SA0C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0C1Bi" ADD COLUMN "SA0C1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0C1Bi"."SA0C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0K0Bi_type-' AND column_name = 'SA0K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" ADD ATTRIBUTE "SA0K0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-"."SA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0K0Bi' AND column_name = 'SA0K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0K0Bi" ADD COLUMN "SA0K0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0K0Bi"."SA0K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0K1Bi_type-' AND column_name = 'SA0K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" ADD ATTRIBUTE "SA0K1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-"."SA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0K1Bi' AND column_name = 'SA0K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0K1Bi" ADD COLUMN "SA0K1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0K1Bi"."SA0K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0L0Bi_type-' AND column_name = 'SA0L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" ADD ATTRIBUTE "SA0L0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-"."SA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0L0Bi' AND column_name = 'SA0L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0L0Bi" ADD COLUMN "SA0L0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0L0Bi"."SA0L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0L1Bi_type-' AND column_name = 'SA0L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" ADD ATTRIBUTE "SA0L1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-"."SA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0L1Bi' AND column_name = 'SA0L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0L1Bi" ADD COLUMN "SA0L1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0L1Bi"."SA0L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0Q1Bi_type-' AND column_name = 'SA0Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" ADD ATTRIBUTE "SA0Q1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-"."SA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0Q1Bi' AND column_name = 'SA0Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0Q1Bi" ADD COLUMN "SA0Q1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0Q1Bi"."SA0Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0S0Bi_type-' AND column_name = 'SA0S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" ADD ATTRIBUTE "SA0S0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-"."SA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0S0Bi' AND column_name = 'SA0S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0S0Bi" ADD COLUMN "SA0S0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0S0Bi"."SA0S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0S1Bi_type-' AND column_name = 'SA0S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" ADD ATTRIBUTE "SA0S1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-"."SA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0S1Bi' AND column_name = 'SA0S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0S1Bi" ADD COLUMN "SA0S1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0S1Bi"."SA0S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0V0Bi_type-' AND column_name = 'SA0V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" ADD ATTRIBUTE "SA0V0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-"."SA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0V0Bi' AND column_name = 'SA0V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0V0Bi" ADD COLUMN "SA0V0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0V0Bi"."SA0V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE0V1Bi_type-' AND column_name = 'SA0V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" ADD ATTRIBUTE "SA0V1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-"."SA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE0V1Bi' AND column_name = 'SA0V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE0V1Bi" ADD COLUMN "SA0V1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE0V1Bi"."SA0V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1A0Bi_type-' AND column_name = 'SA1A0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" ADD ATTRIBUTE "SA1A0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-"."SA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1A0Bi' AND column_name = 'SA1A0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" ADD COLUMN "SA1A0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1A0Bi"."SA1A0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1A1Bi_type-' AND column_name = 'SA1A1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" ADD ATTRIBUTE "SA1A1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-"."SA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1A1Bi' AND column_name = 'SA1A1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" ADD COLUMN "SA1A1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1A1Bi"."SA1A1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1Bi_type-' AND column_name = 'SA1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1Bi_type-" ADD ATTRIBUTE "SA1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1Bi_type-"."SA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1Bi' AND column_name = 'SA1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" ADD COLUMN "SA1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1Bi"."SA1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1C0Bi_type-' AND column_name = 'SA1C0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" ADD ATTRIBUTE "SA1C0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-"."SA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1C0Bi' AND column_name = 'SA1C0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" ADD COLUMN "SA1C0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1C0Bi"."SA1C0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1C1Bi_type-' AND column_name = 'SA1C1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" ADD ATTRIBUTE "SA1C1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-"."SA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1C1Bi' AND column_name = 'SA1C1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" ADD COLUMN "SA1C1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1C1Bi"."SA1C1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1K0Bi_type-' AND column_name = 'SA1K0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" ADD ATTRIBUTE "SA1K0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-"."SA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1K0Bi' AND column_name = 'SA1K0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" ADD COLUMN "SA1K0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1K0Bi"."SA1K0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1K1Bi_type-' AND column_name = 'SA1K1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" ADD ATTRIBUTE "SA1K1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-"."SA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1K1Bi' AND column_name = 'SA1K1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" ADD COLUMN "SA1K1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1K1Bi"."SA1K1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1L0Bi_type-' AND column_name = 'SA1L0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" ADD ATTRIBUTE "SA1L0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-"."SA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1L0Bi' AND column_name = 'SA1L0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" ADD COLUMN "SA1L0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1L0Bi"."SA1L0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1L1Bi_type-' AND column_name = 'SA1L1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" ADD ATTRIBUTE "SA1L1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-"."SA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1L1Bi' AND column_name = 'SA1L1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" ADD COLUMN "SA1L1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1L1Bi"."SA1L1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1Q1Bi_type-' AND column_name = 'SA1Q1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" ADD ATTRIBUTE "SA1Q1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-"."SA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1Q1Bi' AND column_name = 'SA1Q1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ADD COLUMN "SA1Q1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1Q1Bi"."SA1Q1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1S0Bi_type-' AND column_name = 'SA1S0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" ADD ATTRIBUTE "SA1S0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-"."SA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1S0Bi' AND column_name = 'SA1S0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" ADD COLUMN "SA1S0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1S0Bi"."SA1S0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1S1Bi_type-' AND column_name = 'SA1S1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" ADD ATTRIBUTE "SA1S1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-"."SA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1S1Bi' AND column_name = 'SA1S1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" ADD COLUMN "SA1S1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1S1Bi"."SA1S1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1V0Bi_type-' AND column_name = 'SA1V0BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" ADD ATTRIBUTE "SA1V0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-"."SA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1V0Bi' AND column_name = 'SA1V0BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" ADD COLUMN "SA1V0BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1V0Bi"."SA1V0BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SE1V1Bi_type-' AND column_name = 'SA1V1BiID') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" ADD ATTRIBUTE "SA1V1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-"."SA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = 'SE1V1Bi' AND column_name = 'SA1V1BiID') THEN
		ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" ADD COLUMN "SA1V1BiID" INT;
		COMMENT ON COLUMN "AggregateOneEntityBinary"."SE1V1Bi"."SA1V1BiID" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A0Bi_type-' AND column_name = 'bE0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" ADD ATTRIBUTE "bE0A0Bi" "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-"."bE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0A1Bi_type-' AND column_name = 'bE0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" ADD ATTRIBUTE "bE0A1Bi" "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-"."bE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Bi_type-' AND column_name = 'bE0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" ADD ATTRIBUTE "bE0Bi" "AggregateOneEntityBinary"."-ngs_BE0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Bi_type-"."bE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C0Bi_type-' AND column_name = 'bE0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" ADD ATTRIBUTE "bE0C0Bi" "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-"."bE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0C1Bi_type-' AND column_name = 'bE0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" ADD ATTRIBUTE "bE0C1Bi" "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-"."bE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K0Bi_type-' AND column_name = 'bE0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" ADD ATTRIBUTE "bE0K0Bi" "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-"."bE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0K1Bi_type-' AND column_name = 'bE0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" ADD ATTRIBUTE "bE0K1Bi" "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-"."bE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L0Bi_type-' AND column_name = 'bE0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" ADD ATTRIBUTE "bE0L0Bi" "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-"."bE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0L1Bi_type-' AND column_name = 'bE0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" ADD ATTRIBUTE "bE0L1Bi" "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-"."bE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0Q1Bi_type-' AND column_name = 'bE0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" ADD ATTRIBUTE "bE0Q1Bi" "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-"."bE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S0Bi_type-' AND column_name = 'bE0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" ADD ATTRIBUTE "bE0S0Bi" "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-"."bE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0S1Bi_type-' AND column_name = 'bE0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" ADD ATTRIBUTE "bE0S1Bi" "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-"."bE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V0Bi_type-' AND column_name = 'bE0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" ADD ATTRIBUTE "bE0V0Bi" "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-"."bE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA0V1Bi_type-' AND column_name = 'bE0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" ADD ATTRIBUTE "bE0V1Bi" "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-"."bE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A0Bi_type-' AND column_name = 'bE1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" ADD ATTRIBUTE "bE1A0Bi" "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-"."bE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1A1Bi_type-' AND column_name = 'bE1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" ADD ATTRIBUTE "bE1A1Bi" "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-"."bE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Bi_type-' AND column_name = 'bE1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" ADD ATTRIBUTE "bE1Bi" "AggregateOneEntityBinary"."-ngs_BE1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Bi_type-"."bE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C0Bi_type-' AND column_name = 'bE1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" ADD ATTRIBUTE "bE1C0Bi" "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-"."bE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1C1Bi_type-' AND column_name = 'bE1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" ADD ATTRIBUTE "bE1C1Bi" "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-"."bE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K0Bi_type-' AND column_name = 'bE1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" ADD ATTRIBUTE "bE1K0Bi" "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-"."bE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1K1Bi_type-' AND column_name = 'bE1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" ADD ATTRIBUTE "bE1K1Bi" "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-"."bE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L0Bi_type-' AND column_name = 'bE1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" ADD ATTRIBUTE "bE1L0Bi" "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-"."bE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1L1Bi_type-' AND column_name = 'bE1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" ADD ATTRIBUTE "bE1L1Bi" "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-"."bE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1Q1Bi_type-' AND column_name = 'bE1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" ADD ATTRIBUTE "bE1Q1Bi" "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-"."bE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S0Bi_type-' AND column_name = 'bE1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" ADD ATTRIBUTE "bE1S0Bi" "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-"."bE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1S1Bi_type-' AND column_name = 'bE1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" ADD ATTRIBUTE "bE1S1Bi" "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-"."bE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V0Bi_type-' AND column_name = 'bE1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" ADD ATTRIBUTE "bE1V0Bi" "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-"."bE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_BA1V1Bi_type-' AND column_name = 'bE1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" ADD ATTRIBUTE "bE1V1Bi" "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-"."bE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A0Bi_type-' AND column_name = 'gE0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" ADD ATTRIBUTE "gE0A0Bi" "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-"."gE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0A1Bi_type-' AND column_name = 'gE0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" ADD ATTRIBUTE "gE0A1Bi" "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-"."gE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Bi_type-' AND column_name = 'gE0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" ADD ATTRIBUTE "gE0Bi" "AggregateOneEntityBinary"."-ngs_GE0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Bi_type-"."gE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C0Bi_type-' AND column_name = 'gE0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" ADD ATTRIBUTE "gE0C0Bi" "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-"."gE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0C1Bi_type-' AND column_name = 'gE0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" ADD ATTRIBUTE "gE0C1Bi" "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-"."gE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K0Bi_type-' AND column_name = 'gE0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" ADD ATTRIBUTE "gE0K0Bi" "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-"."gE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0K1Bi_type-' AND column_name = 'gE0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" ADD ATTRIBUTE "gE0K1Bi" "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-"."gE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L0Bi_type-' AND column_name = 'gE0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" ADD ATTRIBUTE "gE0L0Bi" "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-"."gE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0L1Bi_type-' AND column_name = 'gE0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" ADD ATTRIBUTE "gE0L1Bi" "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-"."gE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0Q1Bi_type-' AND column_name = 'gE0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" ADD ATTRIBUTE "gE0Q1Bi" "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-"."gE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S0Bi_type-' AND column_name = 'gE0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" ADD ATTRIBUTE "gE0S0Bi" "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-"."gE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0S1Bi_type-' AND column_name = 'gE0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" ADD ATTRIBUTE "gE0S1Bi" "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-"."gE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V0Bi_type-' AND column_name = 'gE0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" ADD ATTRIBUTE "gE0V0Bi" "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-"."gE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA0V1Bi_type-' AND column_name = 'gE0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" ADD ATTRIBUTE "gE0V1Bi" "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-"."gE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A0Bi_type-' AND column_name = 'gE1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" ADD ATTRIBUTE "gE1A0Bi" "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-"."gE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1A1Bi_type-' AND column_name = 'gE1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" ADD ATTRIBUTE "gE1A1Bi" "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-"."gE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Bi_type-' AND column_name = 'gE1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" ADD ATTRIBUTE "gE1Bi" "AggregateOneEntityBinary"."-ngs_GE1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Bi_type-"."gE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C0Bi_type-' AND column_name = 'gE1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" ADD ATTRIBUTE "gE1C0Bi" "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-"."gE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1C1Bi_type-' AND column_name = 'gE1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" ADD ATTRIBUTE "gE1C1Bi" "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-"."gE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K0Bi_type-' AND column_name = 'gE1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" ADD ATTRIBUTE "gE1K0Bi" "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-"."gE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1K1Bi_type-' AND column_name = 'gE1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" ADD ATTRIBUTE "gE1K1Bi" "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-"."gE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L0Bi_type-' AND column_name = 'gE1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" ADD ATTRIBUTE "gE1L0Bi" "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-"."gE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1L1Bi_type-' AND column_name = 'gE1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" ADD ATTRIBUTE "gE1L1Bi" "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-"."gE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1Q1Bi_type-' AND column_name = 'gE1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" ADD ATTRIBUTE "gE1Q1Bi" "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-"."gE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S0Bi_type-' AND column_name = 'gE1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" ADD ATTRIBUTE "gE1S0Bi" "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-"."gE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1S1Bi_type-' AND column_name = 'gE1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" ADD ATTRIBUTE "gE1S1Bi" "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-"."gE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V0Bi_type-' AND column_name = 'gE1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" ADD ATTRIBUTE "gE1V0Bi" "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-"."gE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_GA1V1Bi_type-' AND column_name = 'gE1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" ADD ATTRIBUTE "gE1V1Bi" "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-"."gE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A0Bi_type-' AND column_name = 'sE0A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" ADD ATTRIBUTE "sE0A0Bi" "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-"."sE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0A1Bi_type-' AND column_name = 'sE0A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" ADD ATTRIBUTE "sE0A1Bi" "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-"."sE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Bi_type-' AND column_name = 'sE0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" ADD ATTRIBUTE "sE0Bi" "AggregateOneEntityBinary"."-ngs_SE0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Bi_type-"."sE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C0Bi_type-' AND column_name = 'sE0C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" ADD ATTRIBUTE "sE0C0Bi" "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-"."sE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0C1Bi_type-' AND column_name = 'sE0C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" ADD ATTRIBUTE "sE0C1Bi" "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-"."sE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K0Bi_type-' AND column_name = 'sE0K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" ADD ATTRIBUTE "sE0K0Bi" "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-"."sE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0K1Bi_type-' AND column_name = 'sE0K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" ADD ATTRIBUTE "sE0K1Bi" "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-"."sE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L0Bi_type-' AND column_name = 'sE0L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" ADD ATTRIBUTE "sE0L0Bi" "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-"."sE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0L1Bi_type-' AND column_name = 'sE0L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" ADD ATTRIBUTE "sE0L1Bi" "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-"."sE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0Q1Bi_type-' AND column_name = 'sE0Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" ADD ATTRIBUTE "sE0Q1Bi" "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-"."sE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S0Bi_type-' AND column_name = 'sE0S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" ADD ATTRIBUTE "sE0S0Bi" "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-"."sE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0S1Bi_type-' AND column_name = 'sE0S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" ADD ATTRIBUTE "sE0S1Bi" "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-"."sE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V0Bi_type-' AND column_name = 'sE0V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" ADD ATTRIBUTE "sE0V0Bi" "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-"."sE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA0V1Bi_type-' AND column_name = 'sE0V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" ADD ATTRIBUTE "sE0V1Bi" "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-"."sE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A0Bi_type-' AND column_name = 'sE1A0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" ADD ATTRIBUTE "sE1A0Bi" "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-"."sE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1A1Bi_type-' AND column_name = 'sE1A1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" ADD ATTRIBUTE "sE1A1Bi" "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-"."sE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Bi_type-' AND column_name = 'sE1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" ADD ATTRIBUTE "sE1Bi" "AggregateOneEntityBinary"."-ngs_SE1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Bi_type-"."sE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C0Bi_type-' AND column_name = 'sE1C0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" ADD ATTRIBUTE "sE1C0Bi" "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-"."sE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1C1Bi_type-' AND column_name = 'sE1C1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" ADD ATTRIBUTE "sE1C1Bi" "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-"."sE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K0Bi_type-' AND column_name = 'sE1K0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" ADD ATTRIBUTE "sE1K0Bi" "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-"."sE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1K1Bi_type-' AND column_name = 'sE1K1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" ADD ATTRIBUTE "sE1K1Bi" "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-"."sE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L0Bi_type-' AND column_name = 'sE1L0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" ADD ATTRIBUTE "sE1L0Bi" "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-"."sE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1L1Bi_type-' AND column_name = 'sE1L1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" ADD ATTRIBUTE "sE1L1Bi" "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-"."sE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1Q1Bi_type-' AND column_name = 'sE1Q1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" ADD ATTRIBUTE "sE1Q1Bi" "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-"."sE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S0Bi_type-' AND column_name = 'sE1S0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" ADD ATTRIBUTE "sE1S0Bi" "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-"."sE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1S1Bi_type-' AND column_name = 'sE1S1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" ADD ATTRIBUTE "sE1S1Bi" "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-"."sE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V0Bi_type-' AND column_name = 'sE1V0Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" ADD ATTRIBUTE "sE1V0Bi" "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-"."sE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '-ngs_SA1V1Bi_type-' AND column_name = 'sE1V1Bi') THEN
		ALTER TYPE "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" ADD ATTRIBUTE "sE1V1Bi" "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-";
		COMMENT ON COLUMN "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-"."sE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0A0Bi_entity" AS
SELECT _entity."p0A0Bi", _entity."BA0A0BiID"
FROM
	"AggregateOneEntityBinary"."BE0A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0A1Bi_entity" AS
SELECT _entity."p0A1Bi", _entity."BA0A1BiID"
FROM
	"AggregateOneEntityBinary"."BE0A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0Bi_entity" AS
SELECT _entity."p0Bi", _entity."BA0BiID"
FROM
	"AggregateOneEntityBinary"."BE0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0C0Bi_entity" AS
SELECT _entity."p0C0Bi", _entity."BA0C0BiID"
FROM
	"AggregateOneEntityBinary"."BE0C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0C1Bi_entity" AS
SELECT _entity."p0C1Bi", _entity."BA0C1BiID"
FROM
	"AggregateOneEntityBinary"."BE0C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0K0Bi_entity" AS
SELECT _entity."p0K0Bi", _entity."BA0K0BiID"
FROM
	"AggregateOneEntityBinary"."BE0K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0K1Bi_entity" AS
SELECT _entity."p0K1Bi", _entity."BA0K1BiID"
FROM
	"AggregateOneEntityBinary"."BE0K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0L0Bi_entity" AS
SELECT _entity."p0L0Bi", _entity."BA0L0BiID"
FROM
	"AggregateOneEntityBinary"."BE0L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0L1Bi_entity" AS
SELECT _entity."p0L1Bi", _entity."BA0L1BiID"
FROM
	"AggregateOneEntityBinary"."BE0L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0Q1Bi_entity" AS
SELECT _entity."p0Q1Bi", _entity."BA0Q1BiID"
FROM
	"AggregateOneEntityBinary"."BE0Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0S0Bi_entity" AS
SELECT _entity."p0S0Bi", _entity."BA0S0BiID"
FROM
	"AggregateOneEntityBinary"."BE0S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0S1Bi_entity" AS
SELECT _entity."p0S1Bi", _entity."BA0S1BiID"
FROM
	"AggregateOneEntityBinary"."BE0S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0V0Bi_entity" AS
SELECT _entity."p0V0Bi", _entity."BA0V0BiID"
FROM
	"AggregateOneEntityBinary"."BE0V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE0V1Bi_entity" AS
SELECT _entity."p0V1Bi", _entity."BA0V1BiID"
FROM
	"AggregateOneEntityBinary"."BE0V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA0V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1A0Bi_entity" AS
SELECT _entity."p1A0Bi", _entity."BA1A0BiID"
FROM
	"AggregateOneEntityBinary"."BE1A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1A1Bi_entity" AS
SELECT _entity."p1A1Bi", _entity."BA1A1BiID"
FROM
	"AggregateOneEntityBinary"."BE1A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1Bi_entity" AS
SELECT _entity."p1Bi", _entity."BA1BiID"
FROM
	"AggregateOneEntityBinary"."BE1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1C0Bi_entity" AS
SELECT _entity."p1C0Bi", _entity."BA1C0BiID"
FROM
	"AggregateOneEntityBinary"."BE1C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1C1Bi_entity" AS
SELECT _entity."p1C1Bi", _entity."BA1C1BiID"
FROM
	"AggregateOneEntityBinary"."BE1C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1K0Bi_entity" AS
SELECT _entity."p1K0Bi", _entity."BA1K0BiID"
FROM
	"AggregateOneEntityBinary"."BE1K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1K1Bi_entity" AS
SELECT _entity."p1K1Bi", _entity."BA1K1BiID"
FROM
	"AggregateOneEntityBinary"."BE1K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1L0Bi_entity" AS
SELECT _entity."p1L0Bi", _entity."BA1L0BiID"
FROM
	"AggregateOneEntityBinary"."BE1L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1L1Bi_entity" AS
SELECT _entity."p1L1Bi", _entity."BA1L1BiID"
FROM
	"AggregateOneEntityBinary"."BE1L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1Q1Bi_entity" AS
SELECT _entity."p1Q1Bi", _entity."BA1Q1BiID"
FROM
	"AggregateOneEntityBinary"."BE1Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1S0Bi_entity" AS
SELECT _entity."p1S0Bi", _entity."BA1S0BiID"
FROM
	"AggregateOneEntityBinary"."BE1S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1S1Bi_entity" AS
SELECT _entity."p1S1Bi", _entity."BA1S1BiID"
FROM
	"AggregateOneEntityBinary"."BE1S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1V0Bi_entity" AS
SELECT _entity."p1V0Bi", _entity."BA1V0BiID"
FROM
	"AggregateOneEntityBinary"."BE1V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BE1V1Bi_entity" AS
SELECT _entity."p1V1Bi", _entity."BA1V1BiID"
FROM
	"AggregateOneEntityBinary"."BE1V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."BE1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BE1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."BA1V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0A0Bi_entity" AS
SELECT _entity."p0A0Bi", _entity."GA0A0BiID"
FROM
	"AggregateOneEntityBinary"."GE0A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0A1Bi_entity" AS
SELECT _entity."p0A1Bi", _entity."GA0A1BiID"
FROM
	"AggregateOneEntityBinary"."GE0A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0Bi_entity" AS
SELECT _entity."p0Bi", _entity."GA0BiID"
FROM
	"AggregateOneEntityBinary"."GE0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0C0Bi_entity" AS
SELECT _entity."p0C0Bi", _entity."GA0C0BiID"
FROM
	"AggregateOneEntityBinary"."GE0C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0C1Bi_entity" AS
SELECT _entity."p0C1Bi", _entity."GA0C1BiID"
FROM
	"AggregateOneEntityBinary"."GE0C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0K0Bi_entity" AS
SELECT _entity."p0K0Bi", _entity."GA0K0BiID"
FROM
	"AggregateOneEntityBinary"."GE0K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0K1Bi_entity" AS
SELECT _entity."p0K1Bi", _entity."GA0K1BiID"
FROM
	"AggregateOneEntityBinary"."GE0K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0L0Bi_entity" AS
SELECT _entity."p0L0Bi", _entity."GA0L0BiID"
FROM
	"AggregateOneEntityBinary"."GE0L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0L1Bi_entity" AS
SELECT _entity."p0L1Bi", _entity."GA0L1BiID"
FROM
	"AggregateOneEntityBinary"."GE0L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0Q1Bi_entity" AS
SELECT _entity."p0Q1Bi", _entity."GA0Q1BiID"
FROM
	"AggregateOneEntityBinary"."GE0Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0S0Bi_entity" AS
SELECT _entity."p0S0Bi", _entity."GA0S0BiID"
FROM
	"AggregateOneEntityBinary"."GE0S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0S1Bi_entity" AS
SELECT _entity."p0S1Bi", _entity."GA0S1BiID"
FROM
	"AggregateOneEntityBinary"."GE0S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0V0Bi_entity" AS
SELECT _entity."p0V0Bi", _entity."GA0V0BiID"
FROM
	"AggregateOneEntityBinary"."GE0V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE0V1Bi_entity" AS
SELECT _entity."p0V1Bi", _entity."GA0V1BiID"
FROM
	"AggregateOneEntityBinary"."GE0V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA0V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1A0Bi_entity" AS
SELECT _entity."p1A0Bi", _entity."GA1A0BiID"
FROM
	"AggregateOneEntityBinary"."GE1A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1A1Bi_entity" AS
SELECT _entity."p1A1Bi", _entity."GA1A1BiID"
FROM
	"AggregateOneEntityBinary"."GE1A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1Bi_entity" AS
SELECT _entity."p1Bi", _entity."GA1BiID"
FROM
	"AggregateOneEntityBinary"."GE1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1C0Bi_entity" AS
SELECT _entity."p1C0Bi", _entity."GA1C0BiID"
FROM
	"AggregateOneEntityBinary"."GE1C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1C1Bi_entity" AS
SELECT _entity."p1C1Bi", _entity."GA1C1BiID"
FROM
	"AggregateOneEntityBinary"."GE1C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1K0Bi_entity" AS
SELECT _entity."p1K0Bi", _entity."GA1K0BiID"
FROM
	"AggregateOneEntityBinary"."GE1K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1K1Bi_entity" AS
SELECT _entity."p1K1Bi", _entity."GA1K1BiID"
FROM
	"AggregateOneEntityBinary"."GE1K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1L0Bi_entity" AS
SELECT _entity."p1L0Bi", _entity."GA1L0BiID"
FROM
	"AggregateOneEntityBinary"."GE1L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1L1Bi_entity" AS
SELECT _entity."p1L1Bi", _entity."GA1L1BiID"
FROM
	"AggregateOneEntityBinary"."GE1L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1Q1Bi_entity" AS
SELECT _entity."p1Q1Bi", _entity."GA1Q1BiID"
FROM
	"AggregateOneEntityBinary"."GE1Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1S0Bi_entity" AS
SELECT _entity."p1S0Bi", _entity."GA1S0BiID"
FROM
	"AggregateOneEntityBinary"."GE1S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1S1Bi_entity" AS
SELECT _entity."p1S1Bi", _entity."GA1S1BiID"
FROM
	"AggregateOneEntityBinary"."GE1S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1V0Bi_entity" AS
SELECT _entity."p1V0Bi", _entity."GA1V0BiID"
FROM
	"AggregateOneEntityBinary"."GE1V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GE1V1Bi_entity" AS
SELECT _entity."p1V1Bi", _entity."GA1V1BiID"
FROM
	"AggregateOneEntityBinary"."GE1V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."GE1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GE1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."GA1V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0A0Bi_entity" AS
SELECT _entity."p0A0Bi", _entity."SA0A0BiID"
FROM
	"AggregateOneEntityBinary"."SE0A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0A1Bi_entity" AS
SELECT _entity."p0A1Bi", _entity."SA0A1BiID"
FROM
	"AggregateOneEntityBinary"."SE0A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0Bi_entity" AS
SELECT _entity."p0Bi", _entity."SA0BiID"
FROM
	"AggregateOneEntityBinary"."SE0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0C0Bi_entity" AS
SELECT _entity."p0C0Bi", _entity."SA0C0BiID"
FROM
	"AggregateOneEntityBinary"."SE0C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0C1Bi_entity" AS
SELECT _entity."p0C1Bi", _entity."SA0C1BiID"
FROM
	"AggregateOneEntityBinary"."SE0C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0K0Bi_entity" AS
SELECT _entity."p0K0Bi", _entity."SA0K0BiID"
FROM
	"AggregateOneEntityBinary"."SE0K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0K1Bi_entity" AS
SELECT _entity."p0K1Bi", _entity."SA0K1BiID"
FROM
	"AggregateOneEntityBinary"."SE0K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0L0Bi_entity" AS
SELECT _entity."p0L0Bi", _entity."SA0L0BiID"
FROM
	"AggregateOneEntityBinary"."SE0L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0L1Bi_entity" AS
SELECT _entity."p0L1Bi", _entity."SA0L1BiID"
FROM
	"AggregateOneEntityBinary"."SE0L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0Q1Bi_entity" AS
SELECT _entity."p0Q1Bi", _entity."SA0Q1BiID"
FROM
	"AggregateOneEntityBinary"."SE0Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0S0Bi_entity" AS
SELECT _entity."p0S0Bi", _entity."SA0S0BiID"
FROM
	"AggregateOneEntityBinary"."SE0S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0S1Bi_entity" AS
SELECT _entity."p0S1Bi", _entity."SA0S1BiID"
FROM
	"AggregateOneEntityBinary"."SE0S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0V0Bi_entity" AS
SELECT _entity."p0V0Bi", _entity."SA0V0BiID"
FROM
	"AggregateOneEntityBinary"."SE0V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE0V1Bi_entity" AS
SELECT _entity."p0V1Bi", _entity."SA0V1BiID"
FROM
	"AggregateOneEntityBinary"."SE0V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA0V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1A0Bi_entity" AS
SELECT _entity."p1A0Bi", _entity."SA1A0BiID"
FROM
	"AggregateOneEntityBinary"."SE1A0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1A0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1A1Bi_entity" AS
SELECT _entity."p1A1Bi", _entity."SA1A1BiID"
FROM
	"AggregateOneEntityBinary"."SE1A1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1A1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1Bi_entity" AS
SELECT _entity."p1Bi", _entity."SA1BiID"
FROM
	"AggregateOneEntityBinary"."SE1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1C0Bi_entity" AS
SELECT _entity."p1C0Bi", _entity."SA1C0BiID"
FROM
	"AggregateOneEntityBinary"."SE1C0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1C0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1C1Bi_entity" AS
SELECT _entity."p1C1Bi", _entity."SA1C1BiID"
FROM
	"AggregateOneEntityBinary"."SE1C1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1C1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1K0Bi_entity" AS
SELECT _entity."p1K0Bi", _entity."SA1K0BiID"
FROM
	"AggregateOneEntityBinary"."SE1K0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1K0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1K1Bi_entity" AS
SELECT _entity."p1K1Bi", _entity."SA1K1BiID"
FROM
	"AggregateOneEntityBinary"."SE1K1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1K1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1L0Bi_entity" AS
SELECT _entity."p1L0Bi", _entity."SA1L0BiID"
FROM
	"AggregateOneEntityBinary"."SE1L0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1L0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1L1Bi_entity" AS
SELECT _entity."p1L1Bi", _entity."SA1L1BiID"
FROM
	"AggregateOneEntityBinary"."SE1L1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1L1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1Q1Bi_entity" AS
SELECT _entity."p1Q1Bi", _entity."SA1Q1BiID"
FROM
	"AggregateOneEntityBinary"."SE1Q1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1Q1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1S0Bi_entity" AS
SELECT _entity."p1S0Bi", _entity."SA1S0BiID"
FROM
	"AggregateOneEntityBinary"."SE1S0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1S0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1S1Bi_entity" AS
SELECT _entity."p1S1Bi", _entity."SA1S1BiID"
FROM
	"AggregateOneEntityBinary"."SE1S1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1S1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1V0Bi_entity" AS
SELECT _entity."p1V0Bi", _entity."SA1V0BiID"
FROM
	"AggregateOneEntityBinary"."SE1V0Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1V0BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SE1V1Bi_entity" AS
SELECT _entity."p1V1Bi", _entity."SA1V1BiID"
FROM
	"AggregateOneEntityBinary"."SE1V1Bi" _entity
	;
COMMENT ON VIEW "AggregateOneEntityBinary"."SE1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SE1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."SA1V1BiID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0A0Bi_entity" AS
SELECT _entity."ID", "__join_bE0A0Bi" AS "bE0A0Bi"
FROM
	"AggregateOneEntityBinary"."BA0A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0A0Bi_entity" "__join_bE0A0Bi" ON "__join_bE0A0Bi"."BA0A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0A1Bi_entity" AS
SELECT _entity."ID", "__join_bE0A1Bi" AS "bE0A1Bi"
FROM
	"AggregateOneEntityBinary"."BA0A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0A1Bi_entity" "__join_bE0A1Bi" ON "__join_bE0A1Bi"."BA0A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0Bi_entity" AS
SELECT _entity."ID", "__join_bE0Bi" AS "bE0Bi"
FROM
	"AggregateOneEntityBinary"."BA0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0Bi_entity" "__join_bE0Bi" ON "__join_bE0Bi"."BA0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0C0Bi_entity" AS
SELECT _entity."ID", "__join_bE0C0Bi" AS "bE0C0Bi"
FROM
	"AggregateOneEntityBinary"."BA0C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0C0Bi_entity" "__join_bE0C0Bi" ON "__join_bE0C0Bi"."BA0C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0C1Bi_entity" AS
SELECT _entity."ID", "__join_bE0C1Bi" AS "bE0C1Bi"
FROM
	"AggregateOneEntityBinary"."BA0C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0C1Bi_entity" "__join_bE0C1Bi" ON "__join_bE0C1Bi"."BA0C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0K0Bi_entity" AS
SELECT _entity."ID", "__join_bE0K0Bi" AS "bE0K0Bi"
FROM
	"AggregateOneEntityBinary"."BA0K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0K0Bi_entity" "__join_bE0K0Bi" ON "__join_bE0K0Bi"."BA0K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0K1Bi_entity" AS
SELECT _entity."ID", "__join_bE0K1Bi" AS "bE0K1Bi"
FROM
	"AggregateOneEntityBinary"."BA0K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0K1Bi_entity" "__join_bE0K1Bi" ON "__join_bE0K1Bi"."BA0K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0L0Bi_entity" AS
SELECT _entity."ID", "__join_bE0L0Bi" AS "bE0L0Bi"
FROM
	"AggregateOneEntityBinary"."BA0L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0L0Bi_entity" "__join_bE0L0Bi" ON "__join_bE0L0Bi"."BA0L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0L1Bi_entity" AS
SELECT _entity."ID", "__join_bE0L1Bi" AS "bE0L1Bi"
FROM
	"AggregateOneEntityBinary"."BA0L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0L1Bi_entity" "__join_bE0L1Bi" ON "__join_bE0L1Bi"."BA0L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0Q1Bi_entity" AS
SELECT _entity."ID", "__join_bE0Q1Bi" AS "bE0Q1Bi"
FROM
	"AggregateOneEntityBinary"."BA0Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0Q1Bi_entity" "__join_bE0Q1Bi" ON "__join_bE0Q1Bi"."BA0Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0S0Bi_entity" AS
SELECT _entity."ID", "__join_bE0S0Bi" AS "bE0S0Bi"
FROM
	"AggregateOneEntityBinary"."BA0S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0S0Bi_entity" "__join_bE0S0Bi" ON "__join_bE0S0Bi"."BA0S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0S1Bi_entity" AS
SELECT _entity."ID", "__join_bE0S1Bi" AS "bE0S1Bi"
FROM
	"AggregateOneEntityBinary"."BA0S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0S1Bi_entity" "__join_bE0S1Bi" ON "__join_bE0S1Bi"."BA0S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0V0Bi_entity" AS
SELECT _entity."ID", "__join_bE0V0Bi" AS "bE0V0Bi"
FROM
	"AggregateOneEntityBinary"."BA0V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0V0Bi_entity" "__join_bE0V0Bi" ON "__join_bE0V0Bi"."BA0V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0V1Bi_entity" AS
SELECT _entity."ID", "__join_bE0V1Bi" AS "bE0V1Bi"
FROM
	"AggregateOneEntityBinary"."BA0V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE0V1Bi_entity" "__join_bE0V1Bi" ON "__join_bE0V1Bi"."BA0V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1A0Bi_entity" AS
SELECT _entity."ID", "__join_bE1A0Bi" AS "bE1A0Bi"
FROM
	"AggregateOneEntityBinary"."BA1A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1A0Bi_entity" "__join_bE1A0Bi" ON "__join_bE1A0Bi"."BA1A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1A1Bi_entity" AS
SELECT _entity."ID", "__join_bE1A1Bi" AS "bE1A1Bi"
FROM
	"AggregateOneEntityBinary"."BA1A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1A1Bi_entity" "__join_bE1A1Bi" ON "__join_bE1A1Bi"."BA1A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1Bi_entity" AS
SELECT _entity."ID", "__join_bE1Bi" AS "bE1Bi"
FROM
	"AggregateOneEntityBinary"."BA1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1Bi_entity" "__join_bE1Bi" ON "__join_bE1Bi"."BA1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1C0Bi_entity" AS
SELECT _entity."ID", "__join_bE1C0Bi" AS "bE1C0Bi"
FROM
	"AggregateOneEntityBinary"."BA1C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1C0Bi_entity" "__join_bE1C0Bi" ON "__join_bE1C0Bi"."BA1C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1C1Bi_entity" AS
SELECT _entity."ID", "__join_bE1C1Bi" AS "bE1C1Bi"
FROM
	"AggregateOneEntityBinary"."BA1C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1C1Bi_entity" "__join_bE1C1Bi" ON "__join_bE1C1Bi"."BA1C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1K0Bi_entity" AS
SELECT _entity."ID", "__join_bE1K0Bi" AS "bE1K0Bi"
FROM
	"AggregateOneEntityBinary"."BA1K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1K0Bi_entity" "__join_bE1K0Bi" ON "__join_bE1K0Bi"."BA1K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1K1Bi_entity" AS
SELECT _entity."ID", "__join_bE1K1Bi" AS "bE1K1Bi"
FROM
	"AggregateOneEntityBinary"."BA1K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1K1Bi_entity" "__join_bE1K1Bi" ON "__join_bE1K1Bi"."BA1K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1L0Bi_entity" AS
SELECT _entity."ID", "__join_bE1L0Bi" AS "bE1L0Bi"
FROM
	"AggregateOneEntityBinary"."BA1L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1L0Bi_entity" "__join_bE1L0Bi" ON "__join_bE1L0Bi"."BA1L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1L1Bi_entity" AS
SELECT _entity."ID", "__join_bE1L1Bi" AS "bE1L1Bi"
FROM
	"AggregateOneEntityBinary"."BA1L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1L1Bi_entity" "__join_bE1L1Bi" ON "__join_bE1L1Bi"."BA1L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1Q1Bi_entity" AS
SELECT _entity."ID", "__join_bE1Q1Bi" AS "bE1Q1Bi"
FROM
	"AggregateOneEntityBinary"."BA1Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1Q1Bi_entity" "__join_bE1Q1Bi" ON "__join_bE1Q1Bi"."BA1Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1S0Bi_entity" AS
SELECT _entity."ID", "__join_bE1S0Bi" AS "bE1S0Bi"
FROM
	"AggregateOneEntityBinary"."BA1S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1S0Bi_entity" "__join_bE1S0Bi" ON "__join_bE1S0Bi"."BA1S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1S1Bi_entity" AS
SELECT _entity."ID", "__join_bE1S1Bi" AS "bE1S1Bi"
FROM
	"AggregateOneEntityBinary"."BA1S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1S1Bi_entity" "__join_bE1S1Bi" ON "__join_bE1S1Bi"."BA1S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1V0Bi_entity" AS
SELECT _entity."ID", "__join_bE1V0Bi" AS "bE1V0Bi"
FROM
	"AggregateOneEntityBinary"."BA1V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1V0Bi_entity" "__join_bE1V0Bi" ON "__join_bE1V0Bi"."BA1V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1V1Bi_entity" AS
SELECT _entity."ID", "__join_bE1V1Bi" AS "bE1V1Bi"
FROM
	"AggregateOneEntityBinary"."BA1V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."BE1V1Bi_entity" "__join_bE1V1Bi" ON "__join_bE1V1Bi"."BA1V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."BA1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0A0Bi_entity" AS
SELECT _entity."ID", "__join_gE0A0Bi" AS "gE0A0Bi"
FROM
	"AggregateOneEntityBinary"."GA0A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0A0Bi_entity" "__join_gE0A0Bi" ON "__join_gE0A0Bi"."GA0A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0A1Bi_entity" AS
SELECT _entity."ID", "__join_gE0A1Bi" AS "gE0A1Bi"
FROM
	"AggregateOneEntityBinary"."GA0A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0A1Bi_entity" "__join_gE0A1Bi" ON "__join_gE0A1Bi"."GA0A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0Bi_entity" AS
SELECT _entity."ID", "__join_gE0Bi" AS "gE0Bi"
FROM
	"AggregateOneEntityBinary"."GA0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0Bi_entity" "__join_gE0Bi" ON "__join_gE0Bi"."GA0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0C0Bi_entity" AS
SELECT _entity."ID", "__join_gE0C0Bi" AS "gE0C0Bi"
FROM
	"AggregateOneEntityBinary"."GA0C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0C0Bi_entity" "__join_gE0C0Bi" ON "__join_gE0C0Bi"."GA0C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0C1Bi_entity" AS
SELECT _entity."ID", "__join_gE0C1Bi" AS "gE0C1Bi"
FROM
	"AggregateOneEntityBinary"."GA0C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0C1Bi_entity" "__join_gE0C1Bi" ON "__join_gE0C1Bi"."GA0C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0K0Bi_entity" AS
SELECT _entity."ID", "__join_gE0K0Bi" AS "gE0K0Bi"
FROM
	"AggregateOneEntityBinary"."GA0K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0K0Bi_entity" "__join_gE0K0Bi" ON "__join_gE0K0Bi"."GA0K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0K1Bi_entity" AS
SELECT _entity."ID", "__join_gE0K1Bi" AS "gE0K1Bi"
FROM
	"AggregateOneEntityBinary"."GA0K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0K1Bi_entity" "__join_gE0K1Bi" ON "__join_gE0K1Bi"."GA0K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0L0Bi_entity" AS
SELECT _entity."ID", "__join_gE0L0Bi" AS "gE0L0Bi"
FROM
	"AggregateOneEntityBinary"."GA0L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0L0Bi_entity" "__join_gE0L0Bi" ON "__join_gE0L0Bi"."GA0L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0L1Bi_entity" AS
SELECT _entity."ID", "__join_gE0L1Bi" AS "gE0L1Bi"
FROM
	"AggregateOneEntityBinary"."GA0L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0L1Bi_entity" "__join_gE0L1Bi" ON "__join_gE0L1Bi"."GA0L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0Q1Bi_entity" AS
SELECT _entity."ID", "__join_gE0Q1Bi" AS "gE0Q1Bi"
FROM
	"AggregateOneEntityBinary"."GA0Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0Q1Bi_entity" "__join_gE0Q1Bi" ON "__join_gE0Q1Bi"."GA0Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0S0Bi_entity" AS
SELECT _entity."ID", "__join_gE0S0Bi" AS "gE0S0Bi"
FROM
	"AggregateOneEntityBinary"."GA0S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0S0Bi_entity" "__join_gE0S0Bi" ON "__join_gE0S0Bi"."GA0S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0S1Bi_entity" AS
SELECT _entity."ID", "__join_gE0S1Bi" AS "gE0S1Bi"
FROM
	"AggregateOneEntityBinary"."GA0S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0S1Bi_entity" "__join_gE0S1Bi" ON "__join_gE0S1Bi"."GA0S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0V0Bi_entity" AS
SELECT _entity."ID", "__join_gE0V0Bi" AS "gE0V0Bi"
FROM
	"AggregateOneEntityBinary"."GA0V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0V0Bi_entity" "__join_gE0V0Bi" ON "__join_gE0V0Bi"."GA0V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0V1Bi_entity" AS
SELECT _entity."ID", "__join_gE0V1Bi" AS "gE0V1Bi"
FROM
	"AggregateOneEntityBinary"."GA0V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE0V1Bi_entity" "__join_gE0V1Bi" ON "__join_gE0V1Bi"."GA0V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1A0Bi_entity" AS
SELECT _entity."ID", "__join_gE1A0Bi" AS "gE1A0Bi"
FROM
	"AggregateOneEntityBinary"."GA1A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1A0Bi_entity" "__join_gE1A0Bi" ON "__join_gE1A0Bi"."GA1A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1A1Bi_entity" AS
SELECT _entity."ID", "__join_gE1A1Bi" AS "gE1A1Bi"
FROM
	"AggregateOneEntityBinary"."GA1A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1A1Bi_entity" "__join_gE1A1Bi" ON "__join_gE1A1Bi"."GA1A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1Bi_entity" AS
SELECT _entity."ID", "__join_gE1Bi" AS "gE1Bi"
FROM
	"AggregateOneEntityBinary"."GA1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1Bi_entity" "__join_gE1Bi" ON "__join_gE1Bi"."GA1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1C0Bi_entity" AS
SELECT _entity."ID", "__join_gE1C0Bi" AS "gE1C0Bi"
FROM
	"AggregateOneEntityBinary"."GA1C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1C0Bi_entity" "__join_gE1C0Bi" ON "__join_gE1C0Bi"."GA1C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1C1Bi_entity" AS
SELECT _entity."ID", "__join_gE1C1Bi" AS "gE1C1Bi"
FROM
	"AggregateOneEntityBinary"."GA1C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1C1Bi_entity" "__join_gE1C1Bi" ON "__join_gE1C1Bi"."GA1C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1K0Bi_entity" AS
SELECT _entity."ID", "__join_gE1K0Bi" AS "gE1K0Bi"
FROM
	"AggregateOneEntityBinary"."GA1K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1K0Bi_entity" "__join_gE1K0Bi" ON "__join_gE1K0Bi"."GA1K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1K1Bi_entity" AS
SELECT _entity."ID", "__join_gE1K1Bi" AS "gE1K1Bi"
FROM
	"AggregateOneEntityBinary"."GA1K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1K1Bi_entity" "__join_gE1K1Bi" ON "__join_gE1K1Bi"."GA1K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1L0Bi_entity" AS
SELECT _entity."ID", "__join_gE1L0Bi" AS "gE1L0Bi"
FROM
	"AggregateOneEntityBinary"."GA1L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1L0Bi_entity" "__join_gE1L0Bi" ON "__join_gE1L0Bi"."GA1L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1L1Bi_entity" AS
SELECT _entity."ID", "__join_gE1L1Bi" AS "gE1L1Bi"
FROM
	"AggregateOneEntityBinary"."GA1L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1L1Bi_entity" "__join_gE1L1Bi" ON "__join_gE1L1Bi"."GA1L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1Q1Bi_entity" AS
SELECT _entity."ID", "__join_gE1Q1Bi" AS "gE1Q1Bi"
FROM
	"AggregateOneEntityBinary"."GA1Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1Q1Bi_entity" "__join_gE1Q1Bi" ON "__join_gE1Q1Bi"."GA1Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1S0Bi_entity" AS
SELECT _entity."ID", "__join_gE1S0Bi" AS "gE1S0Bi"
FROM
	"AggregateOneEntityBinary"."GA1S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1S0Bi_entity" "__join_gE1S0Bi" ON "__join_gE1S0Bi"."GA1S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1S1Bi_entity" AS
SELECT _entity."ID", "__join_gE1S1Bi" AS "gE1S1Bi"
FROM
	"AggregateOneEntityBinary"."GA1S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1S1Bi_entity" "__join_gE1S1Bi" ON "__join_gE1S1Bi"."GA1S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1V0Bi_entity" AS
SELECT _entity."ID", "__join_gE1V0Bi" AS "gE1V0Bi"
FROM
	"AggregateOneEntityBinary"."GA1V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1V0Bi_entity" "__join_gE1V0Bi" ON "__join_gE1V0Bi"."GA1V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1V1Bi_entity" AS
SELECT _entity."ID", "__join_gE1V1Bi" AS "gE1V1Bi"
FROM
	"AggregateOneEntityBinary"."GA1V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."GE1V1Bi_entity" "__join_gE1V1Bi" ON "__join_gE1V1Bi"."GA1V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."GA1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0A0Bi_entity" AS
SELECT _entity."ID", "__join_sE0A0Bi" AS "sE0A0Bi"
FROM
	"AggregateOneEntityBinary"."SA0A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0A0Bi_entity" "__join_sE0A0Bi" ON "__join_sE0A0Bi"."SA0A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0A1Bi_entity" AS
SELECT _entity."ID", "__join_sE0A1Bi" AS "sE0A1Bi"
FROM
	"AggregateOneEntityBinary"."SA0A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0A1Bi_entity" "__join_sE0A1Bi" ON "__join_sE0A1Bi"."SA0A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0Bi_entity" AS
SELECT _entity."ID", "__join_sE0Bi" AS "sE0Bi"
FROM
	"AggregateOneEntityBinary"."SA0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0Bi_entity" "__join_sE0Bi" ON "__join_sE0Bi"."SA0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0C0Bi_entity" AS
SELECT _entity."ID", "__join_sE0C0Bi" AS "sE0C0Bi"
FROM
	"AggregateOneEntityBinary"."SA0C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0C0Bi_entity" "__join_sE0C0Bi" ON "__join_sE0C0Bi"."SA0C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0C1Bi_entity" AS
SELECT _entity."ID", "__join_sE0C1Bi" AS "sE0C1Bi"
FROM
	"AggregateOneEntityBinary"."SA0C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0C1Bi_entity" "__join_sE0C1Bi" ON "__join_sE0C1Bi"."SA0C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0K0Bi_entity" AS
SELECT _entity."ID", "__join_sE0K0Bi" AS "sE0K0Bi"
FROM
	"AggregateOneEntityBinary"."SA0K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0K0Bi_entity" "__join_sE0K0Bi" ON "__join_sE0K0Bi"."SA0K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0K1Bi_entity" AS
SELECT _entity."ID", "__join_sE0K1Bi" AS "sE0K1Bi"
FROM
	"AggregateOneEntityBinary"."SA0K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0K1Bi_entity" "__join_sE0K1Bi" ON "__join_sE0K1Bi"."SA0K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0L0Bi_entity" AS
SELECT _entity."ID", "__join_sE0L0Bi" AS "sE0L0Bi"
FROM
	"AggregateOneEntityBinary"."SA0L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0L0Bi_entity" "__join_sE0L0Bi" ON "__join_sE0L0Bi"."SA0L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0L1Bi_entity" AS
SELECT _entity."ID", "__join_sE0L1Bi" AS "sE0L1Bi"
FROM
	"AggregateOneEntityBinary"."SA0L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0L1Bi_entity" "__join_sE0L1Bi" ON "__join_sE0L1Bi"."SA0L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0Q1Bi_entity" AS
SELECT _entity."ID", "__join_sE0Q1Bi" AS "sE0Q1Bi"
FROM
	"AggregateOneEntityBinary"."SA0Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0Q1Bi_entity" "__join_sE0Q1Bi" ON "__join_sE0Q1Bi"."SA0Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0S0Bi_entity" AS
SELECT _entity."ID", "__join_sE0S0Bi" AS "sE0S0Bi"
FROM
	"AggregateOneEntityBinary"."SA0S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0S0Bi_entity" "__join_sE0S0Bi" ON "__join_sE0S0Bi"."SA0S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0S1Bi_entity" AS
SELECT _entity."ID", "__join_sE0S1Bi" AS "sE0S1Bi"
FROM
	"AggregateOneEntityBinary"."SA0S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0S1Bi_entity" "__join_sE0S1Bi" ON "__join_sE0S1Bi"."SA0S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0V0Bi_entity" AS
SELECT _entity."ID", "__join_sE0V0Bi" AS "sE0V0Bi"
FROM
	"AggregateOneEntityBinary"."SA0V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0V0Bi_entity" "__join_sE0V0Bi" ON "__join_sE0V0Bi"."SA0V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0V1Bi_entity" AS
SELECT _entity."ID", "__join_sE0V1Bi" AS "sE0V1Bi"
FROM
	"AggregateOneEntityBinary"."SA0V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE0V1Bi_entity" "__join_sE0V1Bi" ON "__join_sE0V1Bi"."SA0V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA0V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1A0Bi_entity" AS
SELECT _entity."ID", "__join_sE1A0Bi" AS "sE1A0Bi"
FROM
	"AggregateOneEntityBinary"."SA1A0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1A0Bi_entity" "__join_sE1A0Bi" ON "__join_sE1A0Bi"."SA1A0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1A0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1A0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1A1Bi_entity" AS
SELECT _entity."ID", "__join_sE1A1Bi" AS "sE1A1Bi"
FROM
	"AggregateOneEntityBinary"."SA1A1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1A1Bi_entity" "__join_sE1A1Bi" ON "__join_sE1A1Bi"."SA1A1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1A1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1A1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1Bi_entity" AS
SELECT _entity."ID", "__join_sE1Bi" AS "sE1Bi"
FROM
	"AggregateOneEntityBinary"."SA1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1Bi_entity" "__join_sE1Bi" ON "__join_sE1Bi"."SA1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1C0Bi_entity" AS
SELECT _entity."ID", "__join_sE1C0Bi" AS "sE1C0Bi"
FROM
	"AggregateOneEntityBinary"."SA1C0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1C0Bi_entity" "__join_sE1C0Bi" ON "__join_sE1C0Bi"."SA1C0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1C0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1C0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1C1Bi_entity" AS
SELECT _entity."ID", "__join_sE1C1Bi" AS "sE1C1Bi"
FROM
	"AggregateOneEntityBinary"."SA1C1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1C1Bi_entity" "__join_sE1C1Bi" ON "__join_sE1C1Bi"."SA1C1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1C1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1C1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1K0Bi_entity" AS
SELECT _entity."ID", "__join_sE1K0Bi" AS "sE1K0Bi"
FROM
	"AggregateOneEntityBinary"."SA1K0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1K0Bi_entity" "__join_sE1K0Bi" ON "__join_sE1K0Bi"."SA1K0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1K0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1K0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1K1Bi_entity" AS
SELECT _entity."ID", "__join_sE1K1Bi" AS "sE1K1Bi"
FROM
	"AggregateOneEntityBinary"."SA1K1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1K1Bi_entity" "__join_sE1K1Bi" ON "__join_sE1K1Bi"."SA1K1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1K1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1K1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1L0Bi_entity" AS
SELECT _entity."ID", "__join_sE1L0Bi" AS "sE1L0Bi"
FROM
	"AggregateOneEntityBinary"."SA1L0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1L0Bi_entity" "__join_sE1L0Bi" ON "__join_sE1L0Bi"."SA1L0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1L0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1L0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1L1Bi_entity" AS
SELECT _entity."ID", "__join_sE1L1Bi" AS "sE1L1Bi"
FROM
	"AggregateOneEntityBinary"."SA1L1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1L1Bi_entity" "__join_sE1L1Bi" ON "__join_sE1L1Bi"."SA1L1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1L1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1L1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1Q1Bi_entity" AS
SELECT _entity."ID", "__join_sE1Q1Bi" AS "sE1Q1Bi"
FROM
	"AggregateOneEntityBinary"."SA1Q1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1Q1Bi_entity" "__join_sE1Q1Bi" ON "__join_sE1Q1Bi"."SA1Q1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1Q1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1Q1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1S0Bi_entity" AS
SELECT _entity."ID", "__join_sE1S0Bi" AS "sE1S0Bi"
FROM
	"AggregateOneEntityBinary"."SA1S0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1S0Bi_entity" "__join_sE1S0Bi" ON "__join_sE1S0Bi"."SA1S0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1S0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1S0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1S1Bi_entity" AS
SELECT _entity."ID", "__join_sE1S1Bi" AS "sE1S1Bi"
FROM
	"AggregateOneEntityBinary"."SA1S1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1S1Bi_entity" "__join_sE1S1Bi" ON "__join_sE1S1Bi"."SA1S1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1S1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1S1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1V0Bi_entity" AS
SELECT _entity."ID", "__join_sE1V0Bi" AS "sE1V0Bi"
FROM
	"AggregateOneEntityBinary"."SA1V0Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1V0Bi_entity" "__join_sE1V0Bi" ON "__join_sE1V0Bi"."SA1V0BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1V0Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1V0Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1V1Bi_entity" AS
SELECT _entity."ID", "__join_sE1V1Bi" AS "sE1V1Bi"
FROM
	"AggregateOneEntityBinary"."SA1V1Bi" _entity
	
	INNER JOIN "AggregateOneEntityBinary"."SE1V1Bi_entity" "__join_sE1V1Bi" ON "__join_sE1V1Bi"."SA1V1BiID" = _entity."ID"
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1V1Bi_entity" IS 'NGS volatile';

CREATE OR REPLACE FUNCTION "URI"("AggregateOneEntityBinary"."SA1V1Bi_entity") RETURNS TEXT AS $$
SELECT CAST($1."ID" as TEXT)
$$ LANGUAGE SQL IMMUTABLE SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."BE0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0A0Bi_entity' AND t.typname = '-ngs_BE0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-" AS "AggregateOneEntityBinary"."BE0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."BE0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."BE0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0A1Bi_entity' AND t.typname = '-ngs_BE0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-" AS "AggregateOneEntityBinary"."BE0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."BE0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."BE0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0Bi_entity' AND t.typname = '-ngs_BE0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0Bi_type-" AS "AggregateOneEntityBinary"."BE0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."BE0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."BE0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0C0Bi_entity' AND t.typname = '-ngs_BE0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-" AS "AggregateOneEntityBinary"."BE0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."BE0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."BE0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0C1Bi_entity' AND t.typname = '-ngs_BE0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-" AS "AggregateOneEntityBinary"."BE0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."BE0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."BE0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0K0Bi_entity' AND t.typname = '-ngs_BE0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-" AS "AggregateOneEntityBinary"."BE0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."BE0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."BE0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0K1Bi_entity' AND t.typname = '-ngs_BE0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-" AS "AggregateOneEntityBinary"."BE0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."BE0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."BE0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0L0Bi_entity' AND t.typname = '-ngs_BE0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-" AS "AggregateOneEntityBinary"."BE0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."BE0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."BE0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0L1Bi_entity' AND t.typname = '-ngs_BE0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-" AS "AggregateOneEntityBinary"."BE0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."BE0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."BE0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0Q1Bi_entity' AND t.typname = '-ngs_BE0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-" AS "AggregateOneEntityBinary"."BE0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."BE0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."BE0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0S0Bi_entity' AND t.typname = '-ngs_BE0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-" AS "AggregateOneEntityBinary"."BE0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."BE0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."BE0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0S1Bi_entity' AND t.typname = '-ngs_BE0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-" AS "AggregateOneEntityBinary"."BE0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."BE0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."BE0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0V0Bi_entity' AND t.typname = '-ngs_BE0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-" AS "AggregateOneEntityBinary"."BE0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."BE0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."BE0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE0V1Bi_entity' AND t.typname = '-ngs_BE0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-" AS "AggregateOneEntityBinary"."BE0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."BE0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."BE1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1A0Bi_entity' AND t.typname = '-ngs_BE1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-" AS "AggregateOneEntityBinary"."BE1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."BE1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."BE1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1A1Bi_entity' AND t.typname = '-ngs_BE1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-" AS "AggregateOneEntityBinary"."BE1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."BE1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."BE1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1Bi_entity' AND t.typname = '-ngs_BE1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1Bi_type-" AS "AggregateOneEntityBinary"."BE1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."BE1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."BE1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1C0Bi_entity' AND t.typname = '-ngs_BE1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-" AS "AggregateOneEntityBinary"."BE1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."BE1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."BE1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1C1Bi_entity' AND t.typname = '-ngs_BE1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-" AS "AggregateOneEntityBinary"."BE1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."BE1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."BE1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1K0Bi_entity' AND t.typname = '-ngs_BE1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-" AS "AggregateOneEntityBinary"."BE1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."BE1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."BE1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1K1Bi_entity' AND t.typname = '-ngs_BE1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-" AS "AggregateOneEntityBinary"."BE1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."BE1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."BE1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1L0Bi_entity' AND t.typname = '-ngs_BE1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-" AS "AggregateOneEntityBinary"."BE1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."BE1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."BE1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1L1Bi_entity' AND t.typname = '-ngs_BE1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-" AS "AggregateOneEntityBinary"."BE1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."BE1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."BE1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1Q1Bi_entity' AND t.typname = '-ngs_BE1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-" AS "AggregateOneEntityBinary"."BE1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."BE1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."BE1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1S0Bi_entity' AND t.typname = '-ngs_BE1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-" AS "AggregateOneEntityBinary"."BE1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."BE1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."BE1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1S1Bi_entity' AND t.typname = '-ngs_BE1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-" AS "AggregateOneEntityBinary"."BE1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."BE1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."BE1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1V0Bi_entity' AND t.typname = '-ngs_BE1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-" AS "AggregateOneEntityBinary"."BE1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."BE1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."BE1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BE1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."BE1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BE1V1Bi_entity' AND t.typname = '-ngs_BE1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-" AS "AggregateOneEntityBinary"."BE1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BE1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."BE1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."GE0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0A0Bi_entity' AND t.typname = '-ngs_GE0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-" AS "AggregateOneEntityBinary"."GE0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."GE0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."GE0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0A1Bi_entity' AND t.typname = '-ngs_GE0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-" AS "AggregateOneEntityBinary"."GE0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."GE0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."GE0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0Bi_entity' AND t.typname = '-ngs_GE0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0Bi_type-" AS "AggregateOneEntityBinary"."GE0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."GE0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."GE0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0C0Bi_entity' AND t.typname = '-ngs_GE0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-" AS "AggregateOneEntityBinary"."GE0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."GE0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."GE0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0C1Bi_entity' AND t.typname = '-ngs_GE0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-" AS "AggregateOneEntityBinary"."GE0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."GE0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."GE0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0K0Bi_entity' AND t.typname = '-ngs_GE0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-" AS "AggregateOneEntityBinary"."GE0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."GE0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."GE0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0K1Bi_entity' AND t.typname = '-ngs_GE0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-" AS "AggregateOneEntityBinary"."GE0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."GE0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."GE0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0L0Bi_entity' AND t.typname = '-ngs_GE0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-" AS "AggregateOneEntityBinary"."GE0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."GE0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."GE0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0L1Bi_entity' AND t.typname = '-ngs_GE0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-" AS "AggregateOneEntityBinary"."GE0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."GE0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."GE0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0Q1Bi_entity' AND t.typname = '-ngs_GE0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-" AS "AggregateOneEntityBinary"."GE0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."GE0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."GE0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0S0Bi_entity' AND t.typname = '-ngs_GE0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-" AS "AggregateOneEntityBinary"."GE0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."GE0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."GE0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0S1Bi_entity' AND t.typname = '-ngs_GE0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-" AS "AggregateOneEntityBinary"."GE0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."GE0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."GE0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0V0Bi_entity' AND t.typname = '-ngs_GE0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-" AS "AggregateOneEntityBinary"."GE0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."GE0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."GE0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE0V1Bi_entity' AND t.typname = '-ngs_GE0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-" AS "AggregateOneEntityBinary"."GE0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."GE0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."GE1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1A0Bi_entity' AND t.typname = '-ngs_GE1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-" AS "AggregateOneEntityBinary"."GE1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."GE1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."GE1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1A1Bi_entity' AND t.typname = '-ngs_GE1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-" AS "AggregateOneEntityBinary"."GE1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."GE1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."GE1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1Bi_entity' AND t.typname = '-ngs_GE1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1Bi_type-" AS "AggregateOneEntityBinary"."GE1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."GE1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."GE1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1C0Bi_entity' AND t.typname = '-ngs_GE1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-" AS "AggregateOneEntityBinary"."GE1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."GE1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."GE1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1C1Bi_entity' AND t.typname = '-ngs_GE1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-" AS "AggregateOneEntityBinary"."GE1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."GE1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."GE1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1K0Bi_entity' AND t.typname = '-ngs_GE1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-" AS "AggregateOneEntityBinary"."GE1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."GE1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."GE1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1K1Bi_entity' AND t.typname = '-ngs_GE1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-" AS "AggregateOneEntityBinary"."GE1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."GE1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."GE1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1L0Bi_entity' AND t.typname = '-ngs_GE1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-" AS "AggregateOneEntityBinary"."GE1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."GE1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."GE1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1L1Bi_entity' AND t.typname = '-ngs_GE1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-" AS "AggregateOneEntityBinary"."GE1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."GE1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."GE1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1Q1Bi_entity' AND t.typname = '-ngs_GE1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-" AS "AggregateOneEntityBinary"."GE1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."GE1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."GE1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1S0Bi_entity' AND t.typname = '-ngs_GE1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-" AS "AggregateOneEntityBinary"."GE1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."GE1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."GE1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1S1Bi_entity' AND t.typname = '-ngs_GE1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-" AS "AggregateOneEntityBinary"."GE1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."GE1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."GE1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1V0Bi_entity' AND t.typname = '-ngs_GE1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-" AS "AggregateOneEntityBinary"."GE1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."GE1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."GE1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GE1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."GE1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GE1V1Bi_entity' AND t.typname = '-ngs_GE1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-" AS "AggregateOneEntityBinary"."GE1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GE1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."GE1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."SE0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0A0Bi_entity' AND t.typname = '-ngs_SE0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-" AS "AggregateOneEntityBinary"."SE0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."SE0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."SE0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0A1Bi_entity' AND t.typname = '-ngs_SE0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-" AS "AggregateOneEntityBinary"."SE0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."SE0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."SE0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0Bi_entity' AND t.typname = '-ngs_SE0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0Bi_type-" AS "AggregateOneEntityBinary"."SE0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."SE0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."SE0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0C0Bi_entity' AND t.typname = '-ngs_SE0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-" AS "AggregateOneEntityBinary"."SE0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."SE0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."SE0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0C1Bi_entity' AND t.typname = '-ngs_SE0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-" AS "AggregateOneEntityBinary"."SE0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."SE0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."SE0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0K0Bi_entity' AND t.typname = '-ngs_SE0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-" AS "AggregateOneEntityBinary"."SE0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."SE0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."SE0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0K1Bi_entity' AND t.typname = '-ngs_SE0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-" AS "AggregateOneEntityBinary"."SE0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."SE0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."SE0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0L0Bi_entity' AND t.typname = '-ngs_SE0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-" AS "AggregateOneEntityBinary"."SE0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."SE0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."SE0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0L1Bi_entity' AND t.typname = '-ngs_SE0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-" AS "AggregateOneEntityBinary"."SE0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."SE0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."SE0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0Q1Bi_entity' AND t.typname = '-ngs_SE0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-" AS "AggregateOneEntityBinary"."SE0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."SE0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."SE0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0S0Bi_entity' AND t.typname = '-ngs_SE0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-" AS "AggregateOneEntityBinary"."SE0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."SE0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."SE0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0S1Bi_entity' AND t.typname = '-ngs_SE0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-" AS "AggregateOneEntityBinary"."SE0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."SE0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."SE0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0V0Bi_entity' AND t.typname = '-ngs_SE0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-" AS "AggregateOneEntityBinary"."SE0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."SE0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."SE0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE0V1Bi_entity' AND t.typname = '-ngs_SE0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-" AS "AggregateOneEntityBinary"."SE0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."SE0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."SE1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1A0Bi_entity' AND t.typname = '-ngs_SE1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-" AS "AggregateOneEntityBinary"."SE1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."SE1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."SE1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1A1Bi_entity' AND t.typname = '-ngs_SE1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-" AS "AggregateOneEntityBinary"."SE1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."SE1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."SE1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1Bi_entity' AND t.typname = '-ngs_SE1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1Bi_type-" AS "AggregateOneEntityBinary"."SE1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."SE1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."SE1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1C0Bi_entity' AND t.typname = '-ngs_SE1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-" AS "AggregateOneEntityBinary"."SE1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."SE1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."SE1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1C1Bi_entity' AND t.typname = '-ngs_SE1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-" AS "AggregateOneEntityBinary"."SE1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."SE1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."SE1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1K0Bi_entity' AND t.typname = '-ngs_SE1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-" AS "AggregateOneEntityBinary"."SE1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."SE1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."SE1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1K1Bi_entity' AND t.typname = '-ngs_SE1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-" AS "AggregateOneEntityBinary"."SE1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."SE1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."SE1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1L0Bi_entity' AND t.typname = '-ngs_SE1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-" AS "AggregateOneEntityBinary"."SE1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."SE1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."SE1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1L1Bi_entity' AND t.typname = '-ngs_SE1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-" AS "AggregateOneEntityBinary"."SE1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."SE1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."SE1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1Q1Bi_entity' AND t.typname = '-ngs_SE1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-" AS "AggregateOneEntityBinary"."SE1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."SE1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."SE1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1S0Bi_entity' AND t.typname = '-ngs_SE1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-" AS "AggregateOneEntityBinary"."SE1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."SE1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."SE1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1S1Bi_entity' AND t.typname = '-ngs_SE1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-" AS "AggregateOneEntityBinary"."SE1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."SE1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."SE1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1V0Bi_entity' AND t.typname = '-ngs_SE1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-" AS "AggregateOneEntityBinary"."SE1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."SE1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."SE1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SE1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."SE1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SE1V1Bi_entity' AND t.typname = '-ngs_SE1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-" AS "AggregateOneEntityBinary"."SE1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SE1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."SE1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."BA0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0A0Bi_entity' AND t.typname = '-ngs_BA0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-" AS "AggregateOneEntityBinary"."BA0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."BA0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-insert232704684<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert232704684<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-update232704684<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A0Bi-delete232704684<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete232704684<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-insert232704684<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert232704684<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-update232704684<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A0Bi-delete232704684<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete232704684<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0A0Bi" "AggregateOneEntityBinary"."BE0A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0A0Bi" ("BA0A0BiID", "p0A0Bi")
	SELECT (tuple)."BA0A0BiID", (tuple)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert232704684<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0A0Bi" AS tbl
	WHERE 
		("BA0A0BiID") IN (SELECT (u.old)."BA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0A0Bi" AS tbl SET
		"BA0A0BiID" = (u.new)."BA0A0BiID", "p0A0Bi" = (u.new)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0A0BiID" = (u.old)."BA0A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0A0Bi" ("BA0A0BiID", "p0A0Bi")
	SELECT (new)."BA0A0BiID", (new)."p0A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0A0Bi"
	WHERE ("BA0A0BiID") IN (SELECT (tuple)."BA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete232704684<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert232704684<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete232704684<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0A0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0A0Bi" "AggregateOneEntityBinary"."BE0A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert232704684<" 
	SELECT t.i, (t.tuple)."bE0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-update232704684<" 
	SELECT t.i, (t.old)."bE0A0Bi" as old, (t.new)."bE0A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-update<" t
	WHERE NOT (t.old)."bE0A0Bi" IS NULL AND (t.new)."bE0A0Bi" IS NULL
	OR (t.old)."bE0A0Bi" IS NULL AND NOT (t.new)."bE0A0Bi" IS NULL
	OR NOT (t.old)."bE0A0Bi" IS NULL AND NOT (t.new)."bE0A0Bi" IS NULL AND (t.old)."bE0A0Bi" != (t.new)."bE0A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete232704684<" 
	SELECT t.i, (t.tuple)."bE0A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0A0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."BA0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0A1Bi_entity' AND t.typname = '-ngs_BA0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-" AS "AggregateOneEntityBinary"."BA0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."BA0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-insert232705645<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert232705645<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-update232705645<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0A1Bi-delete232705645<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete232705645<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-insert232705645<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert232705645<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-update232705645<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0A1Bi-delete232705645<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete232705645<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0A1Bi" "AggregateOneEntityBinary"."BE0A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0A1Bi" ("BA0A1BiID", "p0A1Bi")
	SELECT (tuple)."BA0A1BiID", (tuple)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert232705645<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0A1Bi" AS tbl
	WHERE 
		("BA0A1BiID") IN (SELECT (u.old)."BA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0A1Bi" AS tbl SET
		"BA0A1BiID" = (u.new)."BA0A1BiID", "p0A1Bi" = (u.new)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0A1BiID" = (u.old)."BA0A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0A1Bi" ("BA0A1BiID", "p0A1Bi")
	SELECT (new)."BA0A1BiID", (new)."p0A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0A1Bi"
	WHERE ("BA0A1BiID") IN (SELECT (tuple)."BA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete232705645<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert232705645<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete232705645<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0A1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0A1Bi" "AggregateOneEntityBinary"."BE0A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert232705645<" 
	SELECT t.i, (t.tuple)."bE0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-update232705645<" 
	SELECT t.i, (t.old)."bE0A1Bi" as old, (t.new)."bE0A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-update<" t
	WHERE NOT (t.old)."bE0A1Bi" IS NULL AND (t.new)."bE0A1Bi" IS NULL
	OR (t.old)."bE0A1Bi" IS NULL AND NOT (t.new)."bE0A1Bi" IS NULL
	OR NOT (t.old)."bE0A1Bi" IS NULL AND NOT (t.new)."bE0A1Bi" IS NULL AND (t.old)."bE0A1Bi" != (t.new)."bE0A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete232705645<" 
	SELECT t.i, (t.tuple)."bE0A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0A1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."BA0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0Bi_entity' AND t.typname = '-ngs_BA0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0Bi_type-" AS "AggregateOneEntityBinary"."BA0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."BA0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-insert751079389<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-insert751079389<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-update751079389<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Bi-delete751079389<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Bi-delete751079389<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-insert751079389<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-insert751079389<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-update751079389<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Bi-delete751079389<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Bi-delete751079389<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0Bi" "AggregateOneEntityBinary"."BE0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0Bi" ("BA0BiID", "p0Bi")
	SELECT (tuple)."BA0BiID", (tuple)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert751079389<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0Bi" AS tbl
	WHERE 
		("BA0BiID") IN (SELECT (u.old)."BA0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0Bi" AS tbl SET
		"BA0BiID" = (u.new)."BA0BiID", "p0Bi" = (u.new)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0BiID" = (u.old)."BA0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0Bi" ("BA0BiID", "p0Bi")
	SELECT (new)."BA0BiID", (new)."p0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0Bi"
	WHERE ("BA0BiID") IN (SELECT (tuple)."BA0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete751079389<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert751079389<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete751079389<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0Bi" "AggregateOneEntityBinary"."BE0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-insert751079389<" 
	SELECT t.i, (t.tuple)."bE0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-update751079389<" 
	SELECT t.i, (t.old)."bE0Bi" as old, (t.new)."bE0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-update<" t
	WHERE NOT (t.old)."bE0Bi" IS NULL AND (t.new)."bE0Bi" IS NULL
	OR (t.old)."bE0Bi" IS NULL AND NOT (t.new)."bE0Bi" IS NULL
	OR NOT (t.old)."bE0Bi" IS NULL AND NOT (t.new)."bE0Bi" IS NULL AND (t.old)."bE0Bi" != (t.new)."bE0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Bi-delete751079389<" 
	SELECT t.i, (t.tuple)."bE0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."BA0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0C0Bi_entity' AND t.typname = '-ngs_BA0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-" AS "AggregateOneEntityBinary"."BA0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."BA0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-insert232764266<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert232764266<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-update232764266<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C0Bi-delete232764266<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete232764266<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-insert232764266<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert232764266<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-update232764266<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C0Bi-delete232764266<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete232764266<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0C0Bi" "AggregateOneEntityBinary"."BE0C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0C0Bi" ("BA0C0BiID", "p0C0Bi")
	SELECT (tuple)."BA0C0BiID", (tuple)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert232764266<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0C0Bi" AS tbl
	WHERE 
		("BA0C0BiID") IN (SELECT (u.old)."BA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0C0Bi" AS tbl SET
		"BA0C0BiID" = (u.new)."BA0C0BiID", "p0C0Bi" = (u.new)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0C0BiID" = (u.old)."BA0C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0C0Bi" ("BA0C0BiID", "p0C0Bi")
	SELECT (new)."BA0C0BiID", (new)."p0C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0C0Bi"
	WHERE ("BA0C0BiID") IN (SELECT (tuple)."BA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete232764266<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert232764266<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete232764266<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0C0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0C0Bi" "AggregateOneEntityBinary"."BE0C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert232764266<" 
	SELECT t.i, (t.tuple)."bE0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-update232764266<" 
	SELECT t.i, (t.old)."bE0C0Bi" as old, (t.new)."bE0C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-update<" t
	WHERE NOT (t.old)."bE0C0Bi" IS NULL AND (t.new)."bE0C0Bi" IS NULL
	OR (t.old)."bE0C0Bi" IS NULL AND NOT (t.new)."bE0C0Bi" IS NULL
	OR NOT (t.old)."bE0C0Bi" IS NULL AND NOT (t.new)."bE0C0Bi" IS NULL AND (t.old)."bE0C0Bi" != (t.new)."bE0C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete232764266<" 
	SELECT t.i, (t.tuple)."bE0C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0C0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."BA0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0C1Bi_entity' AND t.typname = '-ngs_BA0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-" AS "AggregateOneEntityBinary"."BA0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."BA0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-insert232765227<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert232765227<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-update232765227<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0C1Bi-delete232765227<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete232765227<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-insert232765227<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert232765227<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-update232765227<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0C1Bi-delete232765227<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete232765227<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0C1Bi" "AggregateOneEntityBinary"."BE0C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0C1Bi" ("BA0C1BiID", "p0C1Bi")
	SELECT (tuple)."BA0C1BiID", (tuple)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert232765227<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0C1Bi" AS tbl
	WHERE 
		("BA0C1BiID") IN (SELECT (u.old)."BA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0C1Bi" AS tbl SET
		"BA0C1BiID" = (u.new)."BA0C1BiID", "p0C1Bi" = (u.new)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0C1BiID" = (u.old)."BA0C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0C1Bi" ("BA0C1BiID", "p0C1Bi")
	SELECT (new)."BA0C1BiID", (new)."p0C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0C1Bi"
	WHERE ("BA0C1BiID") IN (SELECT (tuple)."BA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete232765227<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert232765227<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete232765227<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0C1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0C1Bi" "AggregateOneEntityBinary"."BE0C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert232765227<" 
	SELECT t.i, (t.tuple)."bE0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-update232765227<" 
	SELECT t.i, (t.old)."bE0C1Bi" as old, (t.new)."bE0C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-update<" t
	WHERE NOT (t.old)."bE0C1Bi" IS NULL AND (t.new)."bE0C1Bi" IS NULL
	OR (t.old)."bE0C1Bi" IS NULL AND NOT (t.new)."bE0C1Bi" IS NULL
	OR NOT (t.old)."bE0C1Bi" IS NULL AND NOT (t.new)."bE0C1Bi" IS NULL AND (t.old)."bE0C1Bi" != (t.new)."bE0C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete232765227<" 
	SELECT t.i, (t.tuple)."bE0C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0C1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."BA0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0K0Bi_entity' AND t.typname = '-ngs_BA0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-" AS "AggregateOneEntityBinary"."BA0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."BA0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-insert233002594<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert233002594<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-update233002594<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K0Bi-delete233002594<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete233002594<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-insert233002594<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert233002594<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-update233002594<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K0Bi-delete233002594<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete233002594<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0K0Bi" "AggregateOneEntityBinary"."BE0K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0K0Bi" ("BA0K0BiID", "p0K0Bi")
	SELECT (tuple)."BA0K0BiID", (tuple)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert233002594<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0K0Bi" AS tbl
	WHERE 
		("BA0K0BiID") IN (SELECT (u.old)."BA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0K0Bi" AS tbl SET
		"BA0K0BiID" = (u.new)."BA0K0BiID", "p0K0Bi" = (u.new)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0K0BiID" = (u.old)."BA0K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0K0Bi" ("BA0K0BiID", "p0K0Bi")
	SELECT (new)."BA0K0BiID", (new)."p0K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0K0Bi"
	WHERE ("BA0K0BiID") IN (SELECT (tuple)."BA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete233002594<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert233002594<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete233002594<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0K0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0K0Bi" "AggregateOneEntityBinary"."BE0K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert233002594<" 
	SELECT t.i, (t.tuple)."bE0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-update233002594<" 
	SELECT t.i, (t.old)."bE0K0Bi" as old, (t.new)."bE0K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-update<" t
	WHERE NOT (t.old)."bE0K0Bi" IS NULL AND (t.new)."bE0K0Bi" IS NULL
	OR (t.old)."bE0K0Bi" IS NULL AND NOT (t.new)."bE0K0Bi" IS NULL
	OR NOT (t.old)."bE0K0Bi" IS NULL AND NOT (t.new)."bE0K0Bi" IS NULL AND (t.old)."bE0K0Bi" != (t.new)."bE0K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete233002594<" 
	SELECT t.i, (t.tuple)."bE0K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0K0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."BA0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0K1Bi_entity' AND t.typname = '-ngs_BA0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-" AS "AggregateOneEntityBinary"."BA0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."BA0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-insert233003555<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert233003555<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-update233003555<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0K1Bi-delete233003555<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete233003555<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-insert233003555<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert233003555<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-update233003555<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0K1Bi-delete233003555<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete233003555<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0K1Bi" "AggregateOneEntityBinary"."BE0K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0K1Bi" ("BA0K1BiID", "p0K1Bi")
	SELECT (tuple)."BA0K1BiID", (tuple)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert233003555<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0K1Bi" AS tbl
	WHERE 
		("BA0K1BiID") IN (SELECT (u.old)."BA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0K1Bi" AS tbl SET
		"BA0K1BiID" = (u.new)."BA0K1BiID", "p0K1Bi" = (u.new)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0K1BiID" = (u.old)."BA0K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0K1Bi" ("BA0K1BiID", "p0K1Bi")
	SELECT (new)."BA0K1BiID", (new)."p0K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0K1Bi"
	WHERE ("BA0K1BiID") IN (SELECT (tuple)."BA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete233003555<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert233003555<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete233003555<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0K1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0K1Bi" "AggregateOneEntityBinary"."BE0K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert233003555<" 
	SELECT t.i, (t.tuple)."bE0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-update233003555<" 
	SELECT t.i, (t.old)."bE0K1Bi" as old, (t.new)."bE0K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-update<" t
	WHERE NOT (t.old)."bE0K1Bi" IS NULL AND (t.new)."bE0K1Bi" IS NULL
	OR (t.old)."bE0K1Bi" IS NULL AND NOT (t.new)."bE0K1Bi" IS NULL
	OR NOT (t.old)."bE0K1Bi" IS NULL AND NOT (t.new)."bE0K1Bi" IS NULL AND (t.old)."bE0K1Bi" != (t.new)."bE0K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete233003555<" 
	SELECT t.i, (t.tuple)."bE0K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0K1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."BA0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0L0Bi_entity' AND t.typname = '-ngs_BA0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-" AS "AggregateOneEntityBinary"."BA0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."BA0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-insert233032385<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert233032385<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-update233032385<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L0Bi-delete233032385<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete233032385<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-insert233032385<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert233032385<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-update233032385<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L0Bi-delete233032385<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete233032385<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0L0Bi" "AggregateOneEntityBinary"."BE0L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0L0Bi" ("BA0L0BiID", "p0L0Bi")
	SELECT (tuple)."BA0L0BiID", (tuple)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert233032385<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0L0Bi" AS tbl
	WHERE 
		("BA0L0BiID") IN (SELECT (u.old)."BA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0L0Bi" AS tbl SET
		"BA0L0BiID" = (u.new)."BA0L0BiID", "p0L0Bi" = (u.new)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0L0BiID" = (u.old)."BA0L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0L0Bi" ("BA0L0BiID", "p0L0Bi")
	SELECT (new)."BA0L0BiID", (new)."p0L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0L0Bi"
	WHERE ("BA0L0BiID") IN (SELECT (tuple)."BA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete233032385<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert233032385<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete233032385<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0L0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0L0Bi" "AggregateOneEntityBinary"."BE0L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert233032385<" 
	SELECT t.i, (t.tuple)."bE0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-update233032385<" 
	SELECT t.i, (t.old)."bE0L0Bi" as old, (t.new)."bE0L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-update<" t
	WHERE NOT (t.old)."bE0L0Bi" IS NULL AND (t.new)."bE0L0Bi" IS NULL
	OR (t.old)."bE0L0Bi" IS NULL AND NOT (t.new)."bE0L0Bi" IS NULL
	OR NOT (t.old)."bE0L0Bi" IS NULL AND NOT (t.new)."bE0L0Bi" IS NULL AND (t.old)."bE0L0Bi" != (t.new)."bE0L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete233032385<" 
	SELECT t.i, (t.tuple)."bE0L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0L0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."BA0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0L1Bi_entity' AND t.typname = '-ngs_BA0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-" AS "AggregateOneEntityBinary"."BA0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."BA0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-insert233033346<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert233033346<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-update233033346<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0L1Bi-delete233033346<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete233033346<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-insert233033346<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert233033346<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-update233033346<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0L1Bi-delete233033346<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete233033346<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0L1Bi" "AggregateOneEntityBinary"."BE0L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0L1Bi" ("BA0L1BiID", "p0L1Bi")
	SELECT (tuple)."BA0L1BiID", (tuple)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert233033346<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0L1Bi" AS tbl
	WHERE 
		("BA0L1BiID") IN (SELECT (u.old)."BA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0L1Bi" AS tbl SET
		"BA0L1BiID" = (u.new)."BA0L1BiID", "p0L1Bi" = (u.new)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0L1BiID" = (u.old)."BA0L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0L1Bi" ("BA0L1BiID", "p0L1Bi")
	SELECT (new)."BA0L1BiID", (new)."p0L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0L1Bi"
	WHERE ("BA0L1BiID") IN (SELECT (tuple)."BA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete233033346<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert233033346<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete233033346<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0L1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0L1Bi" "AggregateOneEntityBinary"."BE0L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert233033346<" 
	SELECT t.i, (t.tuple)."bE0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-update233033346<" 
	SELECT t.i, (t.old)."bE0L1Bi" as old, (t.new)."bE0L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-update<" t
	WHERE NOT (t.old)."bE0L1Bi" IS NULL AND (t.new)."bE0L1Bi" IS NULL
	OR (t.old)."bE0L1Bi" IS NULL AND NOT (t.new)."bE0L1Bi" IS NULL
	OR NOT (t.old)."bE0L1Bi" IS NULL AND NOT (t.new)."bE0L1Bi" IS NULL AND (t.old)."bE0L1Bi" != (t.new)."bE0L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete233033346<" 
	SELECT t.i, (t.tuple)."bE0L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0L1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."BA0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0Q1Bi_entity' AND t.typname = '-ngs_BA0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-" AS "AggregateOneEntityBinary"."BA0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."BA0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-insert233182301<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert233182301<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-update233182301<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0Q1Bi-delete233182301<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete233182301<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-insert233182301<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert233182301<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-update233182301<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0Q1Bi-delete233182301<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete233182301<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0Q1Bi" "AggregateOneEntityBinary"."BE0Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0Q1Bi" ("BA0Q1BiID", "p0Q1Bi")
	SELECT (tuple)."BA0Q1BiID", (tuple)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert233182301<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0Q1Bi" AS tbl
	WHERE 
		("BA0Q1BiID") IN (SELECT (u.old)."BA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0Q1Bi" AS tbl SET
		"BA0Q1BiID" = (u.new)."BA0Q1BiID", "p0Q1Bi" = (u.new)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0Q1BiID" = (u.old)."BA0Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0Q1Bi" ("BA0Q1BiID", "p0Q1Bi")
	SELECT (new)."BA0Q1BiID", (new)."p0Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0Q1Bi"
	WHERE ("BA0Q1BiID") IN (SELECT (tuple)."BA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete233182301<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert233182301<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete233182301<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0Q1Bi" "AggregateOneEntityBinary"."BE0Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert233182301<" 
	SELECT t.i, (t.tuple)."bE0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update233182301<" 
	SELECT t.i, (t.old)."bE0Q1Bi" as old, (t.new)."bE0Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-update<" t
	WHERE NOT (t.old)."bE0Q1Bi" IS NULL AND (t.new)."bE0Q1Bi" IS NULL
	OR (t.old)."bE0Q1Bi" IS NULL AND NOT (t.new)."bE0Q1Bi" IS NULL
	OR NOT (t.old)."bE0Q1Bi" IS NULL AND NOT (t.new)."bE0Q1Bi" IS NULL AND (t.old)."bE0Q1Bi" != (t.new)."bE0Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete233182301<" 
	SELECT t.i, (t.tuple)."bE0Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0Q1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."BA0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0S0Bi_entity' AND t.typname = '-ngs_BA0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-" AS "AggregateOneEntityBinary"."BA0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."BA0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-insert233240922<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert233240922<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-update233240922<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S0Bi-delete233240922<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete233240922<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-insert233240922<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert233240922<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-update233240922<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S0Bi-delete233240922<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete233240922<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0S0Bi" "AggregateOneEntityBinary"."BE0S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0S0Bi" ("BA0S0BiID", "p0S0Bi")
	SELECT (tuple)."BA0S0BiID", (tuple)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert233240922<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0S0Bi" AS tbl
	WHERE 
		("BA0S0BiID") IN (SELECT (u.old)."BA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0S0Bi" AS tbl SET
		"BA0S0BiID" = (u.new)."BA0S0BiID", "p0S0Bi" = (u.new)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0S0BiID" = (u.old)."BA0S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0S0Bi" ("BA0S0BiID", "p0S0Bi")
	SELECT (new)."BA0S0BiID", (new)."p0S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0S0Bi"
	WHERE ("BA0S0BiID") IN (SELECT (tuple)."BA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete233240922<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert233240922<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete233240922<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0S0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0S0Bi" "AggregateOneEntityBinary"."BE0S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert233240922<" 
	SELECT t.i, (t.tuple)."bE0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-update233240922<" 
	SELECT t.i, (t.old)."bE0S0Bi" as old, (t.new)."bE0S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-update<" t
	WHERE NOT (t.old)."bE0S0Bi" IS NULL AND (t.new)."bE0S0Bi" IS NULL
	OR (t.old)."bE0S0Bi" IS NULL AND NOT (t.new)."bE0S0Bi" IS NULL
	OR NOT (t.old)."bE0S0Bi" IS NULL AND NOT (t.new)."bE0S0Bi" IS NULL AND (t.old)."bE0S0Bi" != (t.new)."bE0S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete233240922<" 
	SELECT t.i, (t.tuple)."bE0S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0S0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."BA0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0S1Bi_entity' AND t.typname = '-ngs_BA0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-" AS "AggregateOneEntityBinary"."BA0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."BA0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-insert233241883<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert233241883<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-update233241883<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0S1Bi-delete233241883<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete233241883<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-insert233241883<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert233241883<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-update233241883<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0S1Bi-delete233241883<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete233241883<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0S1Bi" "AggregateOneEntityBinary"."BE0S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0S1Bi" ("BA0S1BiID", "p0S1Bi")
	SELECT (tuple)."BA0S1BiID", (tuple)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert233241883<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0S1Bi" AS tbl
	WHERE 
		("BA0S1BiID") IN (SELECT (u.old)."BA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0S1Bi" AS tbl SET
		"BA0S1BiID" = (u.new)."BA0S1BiID", "p0S1Bi" = (u.new)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0S1BiID" = (u.old)."BA0S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0S1Bi" ("BA0S1BiID", "p0S1Bi")
	SELECT (new)."BA0S1BiID", (new)."p0S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0S1Bi"
	WHERE ("BA0S1BiID") IN (SELECT (tuple)."BA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete233241883<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert233241883<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete233241883<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0S1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0S1Bi" "AggregateOneEntityBinary"."BE0S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert233241883<" 
	SELECT t.i, (t.tuple)."bE0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-update233241883<" 
	SELECT t.i, (t.old)."bE0S1Bi" as old, (t.new)."bE0S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-update<" t
	WHERE NOT (t.old)."bE0S1Bi" IS NULL AND (t.new)."bE0S1Bi" IS NULL
	OR (t.old)."bE0S1Bi" IS NULL AND NOT (t.new)."bE0S1Bi" IS NULL
	OR NOT (t.old)."bE0S1Bi" IS NULL AND NOT (t.new)."bE0S1Bi" IS NULL AND (t.old)."bE0S1Bi" != (t.new)."bE0S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete233241883<" 
	SELECT t.i, (t.tuple)."bE0S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0S1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."BA0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0V0Bi_entity' AND t.typname = '-ngs_BA0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-" AS "AggregateOneEntityBinary"."BA0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."BA0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-insert233330295<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert233330295<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-update233330295<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V0Bi-delete233330295<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete233330295<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-insert233330295<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert233330295<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-update233330295<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V0Bi-delete233330295<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete233330295<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0V0Bi" "AggregateOneEntityBinary"."BE0V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0V0Bi" ("BA0V0BiID", "p0V0Bi")
	SELECT (tuple)."BA0V0BiID", (tuple)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert233330295<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0V0Bi" AS tbl
	WHERE 
		("BA0V0BiID") IN (SELECT (u.old)."BA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0V0Bi" AS tbl SET
		"BA0V0BiID" = (u.new)."BA0V0BiID", "p0V0Bi" = (u.new)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0V0BiID" = (u.old)."BA0V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0V0Bi" ("BA0V0BiID", "p0V0Bi")
	SELECT (new)."BA0V0BiID", (new)."p0V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0V0Bi"
	WHERE ("BA0V0BiID") IN (SELECT (tuple)."BA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete233330295<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert233330295<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete233330295<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0V0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0V0Bi" "AggregateOneEntityBinary"."BE0V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert233330295<" 
	SELECT t.i, (t.tuple)."bE0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-insert<" t
	WHERE NOT (t.tuple)."bE0V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-update233330295<" 
	SELECT t.i, (t.old)."bE0V0Bi" as old, (t.new)."bE0V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-update<" t
	WHERE NOT (t.old)."bE0V0Bi" IS NULL AND (t.new)."bE0V0Bi" IS NULL
	OR (t.old)."bE0V0Bi" IS NULL AND NOT (t.new)."bE0V0Bi" IS NULL
	OR NOT (t.old)."bE0V0Bi" IS NULL AND NOT (t.new)."bE0V0Bi" IS NULL AND (t.old)."bE0V0Bi" != (t.new)."bE0V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete233330295<" 
	SELECT t.i, (t.tuple)."bE0V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0V0Bi-delete<" t
	WHERE NOT (t.tuple)."bE0V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."BA0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA0V1Bi_entity' AND t.typname = '-ngs_BA0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-" AS "AggregateOneEntityBinary"."BA0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."BA0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA0V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA0V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA0V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA0V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-insert233331256<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert233331256<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-update233331256<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA0V1Bi-delete233331256<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete233331256<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-insert233331256<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert233331256<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-update233331256<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA0V1Bi-delete233331256<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete233331256<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE0V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA0V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0V1Bi" "AggregateOneEntityBinary"."BE0V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA0V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE0V1Bi" ("BA0V1BiID", "p0V1Bi")
	SELECT (tuple)."BA0V1BiID", (tuple)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert233331256<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA0V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE0V1Bi" AS tbl
	WHERE 
		("BA0V1BiID") IN (SELECT (u.old)."BA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE0V1Bi" AS tbl SET
		"BA0V1BiID" = (u.new)."BA0V1BiID", "p0V1Bi" = (u.new)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA0V1BiID" = (u.old)."BA0V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE0V1Bi" ("BA0V1BiID", "p0V1Bi")
	SELECT (new)."BA0V1BiID", (new)."p0V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE0V1Bi"
	WHERE ("BA0V1BiID") IN (SELECT (tuple)."BA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete233331256<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA0V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA0V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert233331256<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete233331256<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA0V1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA0V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA0V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA0V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA0V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE0V1Bi" "AggregateOneEntityBinary"."BE0V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert233331256<" 
	SELECT t.i, (t.tuple)."bE0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-insert<" t
	WHERE NOT (t.tuple)."bE0V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-update233331256<" 
	SELECT t.i, (t.old)."bE0V1Bi" as old, (t.new)."bE0V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-update<" t
	WHERE NOT (t.old)."bE0V1Bi" IS NULL AND (t.new)."bE0V1Bi" IS NULL
	OR (t.old)."bE0V1Bi" IS NULL AND NOT (t.new)."bE0V1Bi" IS NULL
	OR NOT (t.old)."bE0V1Bi" IS NULL AND NOT (t.new)."bE0V1Bi" IS NULL AND (t.old)."bE0V1Bi" != (t.new)."bE0V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete233331256<" 
	SELECT t.i, (t.tuple)."bE0V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA0V1Bi-delete<" t
	WHERE NOT (t.tuple)."bE0V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA0V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."BA1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1A0Bi_entity' AND t.typname = '-ngs_BA1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-" AS "AggregateOneEntityBinary"."BA1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."BA1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-insert233628205<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert233628205<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-update233628205<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A0Bi-delete233628205<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete233628205<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-insert233628205<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert233628205<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-update233628205<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A0Bi-delete233628205<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete233628205<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1A0Bi" "AggregateOneEntityBinary"."BE1A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1A0Bi" ("BA1A0BiID", "p1A0Bi")
	SELECT (tuple)."BA1A0BiID", (tuple)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert233628205<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1A0Bi" AS tbl
	WHERE 
		("BA1A0BiID") IN (SELECT (u.old)."BA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1A0Bi" AS tbl SET
		"BA1A0BiID" = (u.new)."BA1A0BiID", "p1A0Bi" = (u.new)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1A0BiID" = (u.old)."BA1A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1A0Bi" ("BA1A0BiID", "p1A0Bi")
	SELECT (new)."BA1A0BiID", (new)."p1A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1A0Bi"
	WHERE ("BA1A0BiID") IN (SELECT (tuple)."BA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete233628205<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert233628205<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete233628205<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1A0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1A0Bi" "AggregateOneEntityBinary"."BE1A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert233628205<" 
	SELECT t.i, (t.tuple)."bE1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-update233628205<" 
	SELECT t.i, (t.old)."bE1A0Bi" as old, (t.new)."bE1A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-update<" t
	WHERE NOT (t.old)."bE1A0Bi" IS NULL AND (t.new)."bE1A0Bi" IS NULL
	OR (t.old)."bE1A0Bi" IS NULL AND NOT (t.new)."bE1A0Bi" IS NULL
	OR NOT (t.old)."bE1A0Bi" IS NULL AND NOT (t.new)."bE1A0Bi" IS NULL AND (t.old)."bE1A0Bi" != (t.new)."bE1A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete233628205<" 
	SELECT t.i, (t.tuple)."bE1A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1A0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."BA1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1A1Bi_entity' AND t.typname = '-ngs_BA1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-" AS "AggregateOneEntityBinary"."BA1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."BA1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-insert233629166<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert233629166<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-update233629166<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1A1Bi-delete233629166<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete233629166<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-insert233629166<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert233629166<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-update233629166<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1A1Bi-delete233629166<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete233629166<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1A1Bi" "AggregateOneEntityBinary"."BE1A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1A1Bi" ("BA1A1BiID", "p1A1Bi")
	SELECT (tuple)."BA1A1BiID", (tuple)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert233629166<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1A1Bi" AS tbl
	WHERE 
		("BA1A1BiID") IN (SELECT (u.old)."BA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1A1Bi" AS tbl SET
		"BA1A1BiID" = (u.new)."BA1A1BiID", "p1A1Bi" = (u.new)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1A1BiID" = (u.old)."BA1A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1A1Bi" ("BA1A1BiID", "p1A1Bi")
	SELECT (new)."BA1A1BiID", (new)."p1A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1A1Bi"
	WHERE ("BA1A1BiID") IN (SELECT (tuple)."BA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete233629166<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert233629166<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete233629166<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1A1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1A1Bi" "AggregateOneEntityBinary"."BE1A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert233629166<" 
	SELECT t.i, (t.tuple)."bE1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-update233629166<" 
	SELECT t.i, (t.old)."bE1A1Bi" as old, (t.new)."bE1A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-update<" t
	WHERE NOT (t.old)."bE1A1Bi" IS NULL AND (t.new)."bE1A1Bi" IS NULL
	OR (t.old)."bE1A1Bi" IS NULL AND NOT (t.new)."bE1A1Bi" IS NULL
	OR NOT (t.old)."bE1A1Bi" IS NULL AND NOT (t.new)."bE1A1Bi" IS NULL AND (t.old)."bE1A1Bi" != (t.new)."bE1A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete233629166<" 
	SELECT t.i, (t.tuple)."bE1A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1A1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."BA1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1Bi_entity' AND t.typname = '-ngs_BA1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1Bi_type-" AS "AggregateOneEntityBinary"."BA1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."BA1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-insert751080350<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-insert751080350<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-update751080350<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Bi-delete751080350<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Bi-delete751080350<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-insert751080350<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-insert751080350<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-update751080350<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Bi-delete751080350<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Bi-delete751080350<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1Bi" "AggregateOneEntityBinary"."BE1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1Bi" ("BA1BiID", "p1Bi")
	SELECT (tuple)."BA1BiID", (tuple)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert751080350<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1Bi" AS tbl
	WHERE 
		("BA1BiID") IN (SELECT (u.old)."BA1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1Bi" AS tbl SET
		"BA1BiID" = (u.new)."BA1BiID", "p1Bi" = (u.new)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1BiID" = (u.old)."BA1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1Bi" ("BA1BiID", "p1Bi")
	SELECT (new)."BA1BiID", (new)."p1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1Bi"
	WHERE ("BA1BiID") IN (SELECT (tuple)."BA1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete751080350<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert751080350<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete751080350<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1Bi" "AggregateOneEntityBinary"."BE1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-insert751080350<" 
	SELECT t.i, (t.tuple)."bE1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-update751080350<" 
	SELECT t.i, (t.old)."bE1Bi" as old, (t.new)."bE1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-update<" t
	WHERE NOT (t.old)."bE1Bi" IS NULL AND (t.new)."bE1Bi" IS NULL
	OR (t.old)."bE1Bi" IS NULL AND NOT (t.new)."bE1Bi" IS NULL
	OR NOT (t.old)."bE1Bi" IS NULL AND NOT (t.new)."bE1Bi" IS NULL AND (t.old)."bE1Bi" != (t.new)."bE1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Bi-delete751080350<" 
	SELECT t.i, (t.tuple)."bE1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."BA1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1C0Bi_entity' AND t.typname = '-ngs_BA1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-" AS "AggregateOneEntityBinary"."BA1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."BA1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-insert233687787<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert233687787<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-update233687787<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C0Bi-delete233687787<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete233687787<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-insert233687787<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert233687787<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-update233687787<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C0Bi-delete233687787<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete233687787<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1C0Bi" "AggregateOneEntityBinary"."BE1C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1C0Bi" ("BA1C0BiID", "p1C0Bi")
	SELECT (tuple)."BA1C0BiID", (tuple)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert233687787<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1C0Bi" AS tbl
	WHERE 
		("BA1C0BiID") IN (SELECT (u.old)."BA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1C0Bi" AS tbl SET
		"BA1C0BiID" = (u.new)."BA1C0BiID", "p1C0Bi" = (u.new)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1C0BiID" = (u.old)."BA1C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1C0Bi" ("BA1C0BiID", "p1C0Bi")
	SELECT (new)."BA1C0BiID", (new)."p1C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1C0Bi"
	WHERE ("BA1C0BiID") IN (SELECT (tuple)."BA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete233687787<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert233687787<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete233687787<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1C0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1C0Bi" "AggregateOneEntityBinary"."BE1C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert233687787<" 
	SELECT t.i, (t.tuple)."bE1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-update233687787<" 
	SELECT t.i, (t.old)."bE1C0Bi" as old, (t.new)."bE1C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-update<" t
	WHERE NOT (t.old)."bE1C0Bi" IS NULL AND (t.new)."bE1C0Bi" IS NULL
	OR (t.old)."bE1C0Bi" IS NULL AND NOT (t.new)."bE1C0Bi" IS NULL
	OR NOT (t.old)."bE1C0Bi" IS NULL AND NOT (t.new)."bE1C0Bi" IS NULL AND (t.old)."bE1C0Bi" != (t.new)."bE1C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete233687787<" 
	SELECT t.i, (t.tuple)."bE1C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1C0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."BA1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1C1Bi_entity' AND t.typname = '-ngs_BA1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-" AS "AggregateOneEntityBinary"."BA1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."BA1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-insert233688748<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert233688748<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-update233688748<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1C1Bi-delete233688748<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete233688748<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-insert233688748<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert233688748<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-update233688748<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1C1Bi-delete233688748<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete233688748<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1C1Bi" "AggregateOneEntityBinary"."BE1C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1C1Bi" ("BA1C1BiID", "p1C1Bi")
	SELECT (tuple)."BA1C1BiID", (tuple)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert233688748<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1C1Bi" AS tbl
	WHERE 
		("BA1C1BiID") IN (SELECT (u.old)."BA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1C1Bi" AS tbl SET
		"BA1C1BiID" = (u.new)."BA1C1BiID", "p1C1Bi" = (u.new)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1C1BiID" = (u.old)."BA1C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1C1Bi" ("BA1C1BiID", "p1C1Bi")
	SELECT (new)."BA1C1BiID", (new)."p1C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1C1Bi"
	WHERE ("BA1C1BiID") IN (SELECT (tuple)."BA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete233688748<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert233688748<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete233688748<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1C1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1C1Bi" "AggregateOneEntityBinary"."BE1C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert233688748<" 
	SELECT t.i, (t.tuple)."bE1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-update233688748<" 
	SELECT t.i, (t.old)."bE1C1Bi" as old, (t.new)."bE1C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-update<" t
	WHERE NOT (t.old)."bE1C1Bi" IS NULL AND (t.new)."bE1C1Bi" IS NULL
	OR (t.old)."bE1C1Bi" IS NULL AND NOT (t.new)."bE1C1Bi" IS NULL
	OR NOT (t.old)."bE1C1Bi" IS NULL AND NOT (t.new)."bE1C1Bi" IS NULL AND (t.old)."bE1C1Bi" != (t.new)."bE1C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete233688748<" 
	SELECT t.i, (t.tuple)."bE1C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1C1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."BA1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1K0Bi_entity' AND t.typname = '-ngs_BA1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-" AS "AggregateOneEntityBinary"."BA1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."BA1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-insert233926115<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert233926115<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-update233926115<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K0Bi-delete233926115<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete233926115<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-insert233926115<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert233926115<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-update233926115<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K0Bi-delete233926115<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete233926115<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1K0Bi" "AggregateOneEntityBinary"."BE1K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1K0Bi" ("BA1K0BiID", "p1K0Bi")
	SELECT (tuple)."BA1K0BiID", (tuple)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert233926115<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1K0Bi" AS tbl
	WHERE 
		("BA1K0BiID") IN (SELECT (u.old)."BA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1K0Bi" AS tbl SET
		"BA1K0BiID" = (u.new)."BA1K0BiID", "p1K0Bi" = (u.new)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1K0BiID" = (u.old)."BA1K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1K0Bi" ("BA1K0BiID", "p1K0Bi")
	SELECT (new)."BA1K0BiID", (new)."p1K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1K0Bi"
	WHERE ("BA1K0BiID") IN (SELECT (tuple)."BA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete233926115<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert233926115<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete233926115<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1K0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1K0Bi" "AggregateOneEntityBinary"."BE1K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert233926115<" 
	SELECT t.i, (t.tuple)."bE1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-update233926115<" 
	SELECT t.i, (t.old)."bE1K0Bi" as old, (t.new)."bE1K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-update<" t
	WHERE NOT (t.old)."bE1K0Bi" IS NULL AND (t.new)."bE1K0Bi" IS NULL
	OR (t.old)."bE1K0Bi" IS NULL AND NOT (t.new)."bE1K0Bi" IS NULL
	OR NOT (t.old)."bE1K0Bi" IS NULL AND NOT (t.new)."bE1K0Bi" IS NULL AND (t.old)."bE1K0Bi" != (t.new)."bE1K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete233926115<" 
	SELECT t.i, (t.tuple)."bE1K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1K0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."BA1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1K1Bi_entity' AND t.typname = '-ngs_BA1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-" AS "AggregateOneEntityBinary"."BA1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."BA1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-insert233927076<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert233927076<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-update233927076<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1K1Bi-delete233927076<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete233927076<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-insert233927076<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert233927076<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-update233927076<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1K1Bi-delete233927076<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete233927076<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1K1Bi" "AggregateOneEntityBinary"."BE1K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1K1Bi" ("BA1K1BiID", "p1K1Bi")
	SELECT (tuple)."BA1K1BiID", (tuple)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert233927076<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1K1Bi" AS tbl
	WHERE 
		("BA1K1BiID") IN (SELECT (u.old)."BA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1K1Bi" AS tbl SET
		"BA1K1BiID" = (u.new)."BA1K1BiID", "p1K1Bi" = (u.new)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1K1BiID" = (u.old)."BA1K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1K1Bi" ("BA1K1BiID", "p1K1Bi")
	SELECT (new)."BA1K1BiID", (new)."p1K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1K1Bi"
	WHERE ("BA1K1BiID") IN (SELECT (tuple)."BA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete233927076<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert233927076<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete233927076<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1K1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1K1Bi" "AggregateOneEntityBinary"."BE1K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert233927076<" 
	SELECT t.i, (t.tuple)."bE1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-update233927076<" 
	SELECT t.i, (t.old)."bE1K1Bi" as old, (t.new)."bE1K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-update<" t
	WHERE NOT (t.old)."bE1K1Bi" IS NULL AND (t.new)."bE1K1Bi" IS NULL
	OR (t.old)."bE1K1Bi" IS NULL AND NOT (t.new)."bE1K1Bi" IS NULL
	OR NOT (t.old)."bE1K1Bi" IS NULL AND NOT (t.new)."bE1K1Bi" IS NULL AND (t.old)."bE1K1Bi" != (t.new)."bE1K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete233927076<" 
	SELECT t.i, (t.tuple)."bE1K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1K1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."BA1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1L0Bi_entity' AND t.typname = '-ngs_BA1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-" AS "AggregateOneEntityBinary"."BA1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."BA1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-insert233955906<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert233955906<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-update233955906<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L0Bi-delete233955906<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete233955906<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-insert233955906<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert233955906<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-update233955906<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L0Bi-delete233955906<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete233955906<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1L0Bi" "AggregateOneEntityBinary"."BE1L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1L0Bi" ("BA1L0BiID", "p1L0Bi")
	SELECT (tuple)."BA1L0BiID", (tuple)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert233955906<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1L0Bi" AS tbl
	WHERE 
		("BA1L0BiID") IN (SELECT (u.old)."BA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1L0Bi" AS tbl SET
		"BA1L0BiID" = (u.new)."BA1L0BiID", "p1L0Bi" = (u.new)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1L0BiID" = (u.old)."BA1L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1L0Bi" ("BA1L0BiID", "p1L0Bi")
	SELECT (new)."BA1L0BiID", (new)."p1L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1L0Bi"
	WHERE ("BA1L0BiID") IN (SELECT (tuple)."BA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete233955906<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert233955906<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete233955906<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1L0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1L0Bi" "AggregateOneEntityBinary"."BE1L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert233955906<" 
	SELECT t.i, (t.tuple)."bE1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-update233955906<" 
	SELECT t.i, (t.old)."bE1L0Bi" as old, (t.new)."bE1L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-update<" t
	WHERE NOT (t.old)."bE1L0Bi" IS NULL AND (t.new)."bE1L0Bi" IS NULL
	OR (t.old)."bE1L0Bi" IS NULL AND NOT (t.new)."bE1L0Bi" IS NULL
	OR NOT (t.old)."bE1L0Bi" IS NULL AND NOT (t.new)."bE1L0Bi" IS NULL AND (t.old)."bE1L0Bi" != (t.new)."bE1L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete233955906<" 
	SELECT t.i, (t.tuple)."bE1L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1L0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."BA1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1L1Bi_entity' AND t.typname = '-ngs_BA1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-" AS "AggregateOneEntityBinary"."BA1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."BA1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-insert233956867<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert233956867<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-update233956867<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1L1Bi-delete233956867<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete233956867<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-insert233956867<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert233956867<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-update233956867<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1L1Bi-delete233956867<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete233956867<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1L1Bi" "AggregateOneEntityBinary"."BE1L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1L1Bi" ("BA1L1BiID", "p1L1Bi")
	SELECT (tuple)."BA1L1BiID", (tuple)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert233956867<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1L1Bi" AS tbl
	WHERE 
		("BA1L1BiID") IN (SELECT (u.old)."BA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1L1Bi" AS tbl SET
		"BA1L1BiID" = (u.new)."BA1L1BiID", "p1L1Bi" = (u.new)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1L1BiID" = (u.old)."BA1L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1L1Bi" ("BA1L1BiID", "p1L1Bi")
	SELECT (new)."BA1L1BiID", (new)."p1L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1L1Bi"
	WHERE ("BA1L1BiID") IN (SELECT (tuple)."BA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete233956867<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert233956867<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete233956867<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1L1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1L1Bi" "AggregateOneEntityBinary"."BE1L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert233956867<" 
	SELECT t.i, (t.tuple)."bE1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-update233956867<" 
	SELECT t.i, (t.old)."bE1L1Bi" as old, (t.new)."bE1L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-update<" t
	WHERE NOT (t.old)."bE1L1Bi" IS NULL AND (t.new)."bE1L1Bi" IS NULL
	OR (t.old)."bE1L1Bi" IS NULL AND NOT (t.new)."bE1L1Bi" IS NULL
	OR NOT (t.old)."bE1L1Bi" IS NULL AND NOT (t.new)."bE1L1Bi" IS NULL AND (t.old)."bE1L1Bi" != (t.new)."bE1L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete233956867<" 
	SELECT t.i, (t.tuple)."bE1L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1L1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."BA1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1Q1Bi_entity' AND t.typname = '-ngs_BA1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-" AS "AggregateOneEntityBinary"."BA1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."BA1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-insert234105822<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert234105822<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-update234105822<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1Q1Bi-delete234105822<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete234105822<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-insert234105822<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert234105822<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-update234105822<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1Q1Bi-delete234105822<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete234105822<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1Q1Bi" "AggregateOneEntityBinary"."BE1Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1Q1Bi" ("BA1Q1BiID", "p1Q1Bi")
	SELECT (tuple)."BA1Q1BiID", (tuple)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert234105822<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1Q1Bi" AS tbl
	WHERE 
		("BA1Q1BiID") IN (SELECT (u.old)."BA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1Q1Bi" AS tbl SET
		"BA1Q1BiID" = (u.new)."BA1Q1BiID", "p1Q1Bi" = (u.new)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1Q1BiID" = (u.old)."BA1Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1Q1Bi" ("BA1Q1BiID", "p1Q1Bi")
	SELECT (new)."BA1Q1BiID", (new)."p1Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1Q1Bi"
	WHERE ("BA1Q1BiID") IN (SELECT (tuple)."BA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete234105822<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert234105822<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete234105822<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1Q1Bi" "AggregateOneEntityBinary"."BE1Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert234105822<" 
	SELECT t.i, (t.tuple)."bE1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update234105822<" 
	SELECT t.i, (t.old)."bE1Q1Bi" as old, (t.new)."bE1Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-update<" t
	WHERE NOT (t.old)."bE1Q1Bi" IS NULL AND (t.new)."bE1Q1Bi" IS NULL
	OR (t.old)."bE1Q1Bi" IS NULL AND NOT (t.new)."bE1Q1Bi" IS NULL
	OR NOT (t.old)."bE1Q1Bi" IS NULL AND NOT (t.new)."bE1Q1Bi" IS NULL AND (t.old)."bE1Q1Bi" != (t.new)."bE1Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete234105822<" 
	SELECT t.i, (t.tuple)."bE1Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1Q1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."BA1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1S0Bi_entity' AND t.typname = '-ngs_BA1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-" AS "AggregateOneEntityBinary"."BA1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."BA1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-insert234164443<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert234164443<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-update234164443<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S0Bi-delete234164443<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete234164443<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-insert234164443<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert234164443<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-update234164443<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S0Bi-delete234164443<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete234164443<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1S0Bi" "AggregateOneEntityBinary"."BE1S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1S0Bi" ("BA1S0BiID", "p1S0Bi")
	SELECT (tuple)."BA1S0BiID", (tuple)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert234164443<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1S0Bi" AS tbl
	WHERE 
		("BA1S0BiID") IN (SELECT (u.old)."BA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1S0Bi" AS tbl SET
		"BA1S0BiID" = (u.new)."BA1S0BiID", "p1S0Bi" = (u.new)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1S0BiID" = (u.old)."BA1S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1S0Bi" ("BA1S0BiID", "p1S0Bi")
	SELECT (new)."BA1S0BiID", (new)."p1S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1S0Bi"
	WHERE ("BA1S0BiID") IN (SELECT (tuple)."BA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete234164443<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert234164443<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete234164443<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1S0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1S0Bi" "AggregateOneEntityBinary"."BE1S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert234164443<" 
	SELECT t.i, (t.tuple)."bE1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-update234164443<" 
	SELECT t.i, (t.old)."bE1S0Bi" as old, (t.new)."bE1S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-update<" t
	WHERE NOT (t.old)."bE1S0Bi" IS NULL AND (t.new)."bE1S0Bi" IS NULL
	OR (t.old)."bE1S0Bi" IS NULL AND NOT (t.new)."bE1S0Bi" IS NULL
	OR NOT (t.old)."bE1S0Bi" IS NULL AND NOT (t.new)."bE1S0Bi" IS NULL AND (t.old)."bE1S0Bi" != (t.new)."bE1S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete234164443<" 
	SELECT t.i, (t.tuple)."bE1S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1S0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."BA1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1S1Bi_entity' AND t.typname = '-ngs_BA1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-" AS "AggregateOneEntityBinary"."BA1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."BA1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-insert234165404<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert234165404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-update234165404<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1S1Bi-delete234165404<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete234165404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-insert234165404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert234165404<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-update234165404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1S1Bi-delete234165404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete234165404<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1S1Bi" "AggregateOneEntityBinary"."BE1S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1S1Bi" ("BA1S1BiID", "p1S1Bi")
	SELECT (tuple)."BA1S1BiID", (tuple)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert234165404<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1S1Bi" AS tbl
	WHERE 
		("BA1S1BiID") IN (SELECT (u.old)."BA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1S1Bi" AS tbl SET
		"BA1S1BiID" = (u.new)."BA1S1BiID", "p1S1Bi" = (u.new)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1S1BiID" = (u.old)."BA1S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1S1Bi" ("BA1S1BiID", "p1S1Bi")
	SELECT (new)."BA1S1BiID", (new)."p1S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1S1Bi"
	WHERE ("BA1S1BiID") IN (SELECT (tuple)."BA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete234165404<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert234165404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete234165404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1S1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1S1Bi" "AggregateOneEntityBinary"."BE1S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert234165404<" 
	SELECT t.i, (t.tuple)."bE1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-update234165404<" 
	SELECT t.i, (t.old)."bE1S1Bi" as old, (t.new)."bE1S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-update<" t
	WHERE NOT (t.old)."bE1S1Bi" IS NULL AND (t.new)."bE1S1Bi" IS NULL
	OR (t.old)."bE1S1Bi" IS NULL AND NOT (t.new)."bE1S1Bi" IS NULL
	OR NOT (t.old)."bE1S1Bi" IS NULL AND NOT (t.new)."bE1S1Bi" IS NULL AND (t.old)."bE1S1Bi" != (t.new)."bE1S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete234165404<" 
	SELECT t.i, (t.tuple)."bE1S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1S1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."BA1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1V0Bi_entity' AND t.typname = '-ngs_BA1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-" AS "AggregateOneEntityBinary"."BA1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."BA1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-insert234253816<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert234253816<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-update234253816<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V0Bi-delete234253816<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete234253816<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-insert234253816<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert234253816<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-update234253816<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V0Bi-delete234253816<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete234253816<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1V0Bi" "AggregateOneEntityBinary"."BE1V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1V0Bi" ("BA1V0BiID", "p1V0Bi")
	SELECT (tuple)."BA1V0BiID", (tuple)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert234253816<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1V0Bi" AS tbl
	WHERE 
		("BA1V0BiID") IN (SELECT (u.old)."BA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1V0Bi" AS tbl SET
		"BA1V0BiID" = (u.new)."BA1V0BiID", "p1V0Bi" = (u.new)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1V0BiID" = (u.old)."BA1V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1V0Bi" ("BA1V0BiID", "p1V0Bi")
	SELECT (new)."BA1V0BiID", (new)."p1V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1V0Bi"
	WHERE ("BA1V0BiID") IN (SELECT (tuple)."BA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete234253816<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert234253816<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete234253816<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1V0Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1V0Bi" "AggregateOneEntityBinary"."BE1V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert234253816<" 
	SELECT t.i, (t.tuple)."bE1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-insert<" t
	WHERE NOT (t.tuple)."bE1V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-update234253816<" 
	SELECT t.i, (t.old)."bE1V0Bi" as old, (t.new)."bE1V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-update<" t
	WHERE NOT (t.old)."bE1V0Bi" IS NULL AND (t.new)."bE1V0Bi" IS NULL
	OR (t.old)."bE1V0Bi" IS NULL AND NOT (t.new)."bE1V0Bi" IS NULL
	OR NOT (t.old)."bE1V0Bi" IS NULL AND NOT (t.new)."bE1V0Bi" IS NULL AND (t.old)."bE1V0Bi" != (t.new)."bE1V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete234253816<" 
	SELECT t.i, (t.tuple)."bE1V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1V0Bi-delete<" t
	WHERE NOT (t.tuple)."bE1V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."BA1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."BA1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."BA1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'BA1V1Bi_entity' AND t.typname = '-ngs_BA1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-" AS "AggregateOneEntityBinary"."BA1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."BA1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."BA1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."BA1V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."BA1V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."BA1V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BA1V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-insert234254777<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert234254777<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-update234254777<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-BA1V1Bi-delete234254777<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete234254777<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-insert234254777<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert234254777<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-update234254777<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."BE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-BA1V1Bi-delete234254777<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete234254777<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."BE1V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_BA1V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1V1Bi" "AggregateOneEntityBinary"."BE1V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."BA1V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."BE1V1Bi" ("BA1V1BiID", "p1V1Bi")
	SELECT (tuple)."BA1V1BiID", (tuple)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert234254777<" i;

		
	UPDATE "AggregateOneEntityBinary"."BA1V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."BE1V1Bi" AS tbl
	WHERE 
		("BA1V1BiID") IN (SELECT (u.old)."BA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."BE1V1Bi" AS tbl SET
		"BA1V1BiID" = (u.new)."BA1V1BiID", "p1V1Bi" = (u.new)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."BA1V1BiID" = (u.old)."BA1V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."BE1V1Bi" ("BA1V1BiID", "p1V1Bi")
	SELECT (new)."BA1V1BiID", (new)."p1V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."BE1V1Bi"
	WHERE ("BA1V1BiID") IN (SELECT (tuple)."BA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete234254777<" d);

	DELETE FROM "AggregateOneEntityBinary"."BA1V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.BA1V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert234254777<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete234254777<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_BA1V1Bi"(
IN _inserted "AggregateOneEntityBinary"."BA1V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."BA1V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."BA1V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."BA1V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.BE1V1Bi" "AggregateOneEntityBinary"."BE1V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert234254777<" 
	SELECT t.i, (t.tuple)."bE1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-insert<" t
	WHERE NOT (t.tuple)."bE1V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-update234254777<" 
	SELECT t.i, (t.old)."bE1V1Bi" as old, (t.new)."bE1V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-update<" t
	WHERE NOT (t.old)."bE1V1Bi" IS NULL AND (t.new)."bE1V1Bi" IS NULL
	OR (t.old)."bE1V1Bi" IS NULL AND NOT (t.new)."bE1V1Bi" IS NULL
	OR NOT (t.old)."bE1V1Bi" IS NULL AND NOT (t.new)."bE1V1Bi" IS NULL AND (t.old)."bE1V1Bi" != (t.new)."bE1V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete234254777<" 
	SELECT t.i, (t.tuple)."bE1V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-BA1V1Bi-delete<" t
	WHERE NOT (t.tuple)."bE1V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_BA1V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."GA0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0A0Bi_entity' AND t.typname = '-ngs_GA0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-" AS "AggregateOneEntityBinary"."GA0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."GA0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-insert375255793<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert375255793<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-update375255793<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A0Bi-delete375255793<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete375255793<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-insert375255793<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert375255793<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-update375255793<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A0Bi-delete375255793<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete375255793<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0A0Bi" "AggregateOneEntityBinary"."GE0A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0A0Bi" ("GA0A0BiID", "p0A0Bi")
	SELECT (tuple)."GA0A0BiID", (tuple)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert375255793<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0A0Bi" AS tbl
	WHERE 
		("GA0A0BiID") IN (SELECT (u.old)."GA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0A0Bi" AS tbl SET
		"GA0A0BiID" = (u.new)."GA0A0BiID", "p0A0Bi" = (u.new)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0A0BiID" = (u.old)."GA0A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0A0Bi" ("GA0A0BiID", "p0A0Bi")
	SELECT (new)."GA0A0BiID", (new)."p0A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0A0Bi"
	WHERE ("GA0A0BiID") IN (SELECT (tuple)."GA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete375255793<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert375255793<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete375255793<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0A0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0A0Bi" "AggregateOneEntityBinary"."GE0A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert375255793<" 
	SELECT t.i, (t.tuple)."gE0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-update375255793<" 
	SELECT t.i, (t.old)."gE0A0Bi" as old, (t.new)."gE0A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-update<" t
	WHERE NOT (t.old)."gE0A0Bi" IS NULL AND (t.new)."gE0A0Bi" IS NULL
	OR (t.old)."gE0A0Bi" IS NULL AND NOT (t.new)."gE0A0Bi" IS NULL
	OR NOT (t.old)."gE0A0Bi" IS NULL AND NOT (t.new)."gE0A0Bi" IS NULL AND (t.old)."gE0A0Bi" != (t.new)."gE0A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete375255793<" 
	SELECT t.i, (t.tuple)."gE0A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0A0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."GA0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0A1Bi_entity' AND t.typname = '-ngs_GA0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-" AS "AggregateOneEntityBinary"."GA0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."GA0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-insert375256754<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert375256754<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-update375256754<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0A1Bi-delete375256754<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete375256754<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-insert375256754<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert375256754<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-update375256754<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0A1Bi-delete375256754<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete375256754<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0A1Bi" "AggregateOneEntityBinary"."GE0A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0A1Bi" ("GA0A1BiID", "p0A1Bi")
	SELECT (tuple)."GA0A1BiID", (tuple)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert375256754<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0A1Bi" AS tbl
	WHERE 
		("GA0A1BiID") IN (SELECT (u.old)."GA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0A1Bi" AS tbl SET
		"GA0A1BiID" = (u.new)."GA0A1BiID", "p0A1Bi" = (u.new)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0A1BiID" = (u.old)."GA0A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0A1Bi" ("GA0A1BiID", "p0A1Bi")
	SELECT (new)."GA0A1BiID", (new)."p0A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0A1Bi"
	WHERE ("GA0A1BiID") IN (SELECT (tuple)."GA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete375256754<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert375256754<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete375256754<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0A1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0A1Bi" "AggregateOneEntityBinary"."GE0A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert375256754<" 
	SELECT t.i, (t.tuple)."gE0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-update375256754<" 
	SELECT t.i, (t.old)."gE0A1Bi" as old, (t.new)."gE0A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-update<" t
	WHERE NOT (t.old)."gE0A1Bi" IS NULL AND (t.new)."gE0A1Bi" IS NULL
	OR (t.old)."gE0A1Bi" IS NULL AND NOT (t.new)."gE0A1Bi" IS NULL
	OR NOT (t.old)."gE0A1Bi" IS NULL AND NOT (t.new)."gE0A1Bi" IS NULL AND (t.old)."gE0A1Bi" != (t.new)."gE0A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete375256754<" 
	SELECT t.i, (t.tuple)."gE0A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0A1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."GA0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0Bi_entity' AND t.typname = '-ngs_GA0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0Bi_type-" AS "AggregateOneEntityBinary"."GA0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."GA0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-insert755696994<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-insert755696994<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-update755696994<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Bi-delete755696994<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Bi-delete755696994<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-insert755696994<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-insert755696994<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-update755696994<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Bi-delete755696994<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Bi-delete755696994<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0Bi" "AggregateOneEntityBinary"."GE0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0Bi" ("GA0BiID", "p0Bi")
	SELECT (tuple)."GA0BiID", (tuple)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert755696994<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0Bi" AS tbl
	WHERE 
		("GA0BiID") IN (SELECT (u.old)."GA0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0Bi" AS tbl SET
		"GA0BiID" = (u.new)."GA0BiID", "p0Bi" = (u.new)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0BiID" = (u.old)."GA0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0Bi" ("GA0BiID", "p0Bi")
	SELECT (new)."GA0BiID", (new)."p0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0Bi"
	WHERE ("GA0BiID") IN (SELECT (tuple)."GA0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete755696994<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert755696994<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete755696994<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0Bi" "AggregateOneEntityBinary"."GE0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-insert755696994<" 
	SELECT t.i, (t.tuple)."gE0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-update755696994<" 
	SELECT t.i, (t.old)."gE0Bi" as old, (t.new)."gE0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-update<" t
	WHERE NOT (t.old)."gE0Bi" IS NULL AND (t.new)."gE0Bi" IS NULL
	OR (t.old)."gE0Bi" IS NULL AND NOT (t.new)."gE0Bi" IS NULL
	OR NOT (t.old)."gE0Bi" IS NULL AND NOT (t.new)."gE0Bi" IS NULL AND (t.old)."gE0Bi" != (t.new)."gE0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Bi-delete755696994<" 
	SELECT t.i, (t.tuple)."gE0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."GA0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0C0Bi_entity' AND t.typname = '-ngs_GA0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-" AS "AggregateOneEntityBinary"."GA0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."GA0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-insert375315375<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert375315375<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-update375315375<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C0Bi-delete375315375<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete375315375<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-insert375315375<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert375315375<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-update375315375<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C0Bi-delete375315375<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete375315375<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0C0Bi" "AggregateOneEntityBinary"."GE0C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0C0Bi" ("GA0C0BiID", "p0C0Bi")
	SELECT (tuple)."GA0C0BiID", (tuple)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert375315375<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0C0Bi" AS tbl
	WHERE 
		("GA0C0BiID") IN (SELECT (u.old)."GA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0C0Bi" AS tbl SET
		"GA0C0BiID" = (u.new)."GA0C0BiID", "p0C0Bi" = (u.new)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0C0BiID" = (u.old)."GA0C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0C0Bi" ("GA0C0BiID", "p0C0Bi")
	SELECT (new)."GA0C0BiID", (new)."p0C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0C0Bi"
	WHERE ("GA0C0BiID") IN (SELECT (tuple)."GA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete375315375<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert375315375<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete375315375<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0C0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0C0Bi" "AggregateOneEntityBinary"."GE0C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert375315375<" 
	SELECT t.i, (t.tuple)."gE0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-update375315375<" 
	SELECT t.i, (t.old)."gE0C0Bi" as old, (t.new)."gE0C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-update<" t
	WHERE NOT (t.old)."gE0C0Bi" IS NULL AND (t.new)."gE0C0Bi" IS NULL
	OR (t.old)."gE0C0Bi" IS NULL AND NOT (t.new)."gE0C0Bi" IS NULL
	OR NOT (t.old)."gE0C0Bi" IS NULL AND NOT (t.new)."gE0C0Bi" IS NULL AND (t.old)."gE0C0Bi" != (t.new)."gE0C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete375315375<" 
	SELECT t.i, (t.tuple)."gE0C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0C0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."GA0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0C1Bi_entity' AND t.typname = '-ngs_GA0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-" AS "AggregateOneEntityBinary"."GA0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."GA0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-insert375316336<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert375316336<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-update375316336<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0C1Bi-delete375316336<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete375316336<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-insert375316336<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert375316336<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-update375316336<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0C1Bi-delete375316336<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete375316336<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0C1Bi" "AggregateOneEntityBinary"."GE0C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0C1Bi" ("GA0C1BiID", "p0C1Bi")
	SELECT (tuple)."GA0C1BiID", (tuple)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert375316336<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0C1Bi" AS tbl
	WHERE 
		("GA0C1BiID") IN (SELECT (u.old)."GA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0C1Bi" AS tbl SET
		"GA0C1BiID" = (u.new)."GA0C1BiID", "p0C1Bi" = (u.new)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0C1BiID" = (u.old)."GA0C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0C1Bi" ("GA0C1BiID", "p0C1Bi")
	SELECT (new)."GA0C1BiID", (new)."p0C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0C1Bi"
	WHERE ("GA0C1BiID") IN (SELECT (tuple)."GA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete375316336<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert375316336<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete375316336<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0C1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0C1Bi" "AggregateOneEntityBinary"."GE0C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert375316336<" 
	SELECT t.i, (t.tuple)."gE0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-update375316336<" 
	SELECT t.i, (t.old)."gE0C1Bi" as old, (t.new)."gE0C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-update<" t
	WHERE NOT (t.old)."gE0C1Bi" IS NULL AND (t.new)."gE0C1Bi" IS NULL
	OR (t.old)."gE0C1Bi" IS NULL AND NOT (t.new)."gE0C1Bi" IS NULL
	OR NOT (t.old)."gE0C1Bi" IS NULL AND NOT (t.new)."gE0C1Bi" IS NULL AND (t.old)."gE0C1Bi" != (t.new)."gE0C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete375316336<" 
	SELECT t.i, (t.tuple)."gE0C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0C1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."GA0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0K0Bi_entity' AND t.typname = '-ngs_GA0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-" AS "AggregateOneEntityBinary"."GA0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."GA0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-insert375553703<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert375553703<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-update375553703<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K0Bi-delete375553703<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete375553703<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-insert375553703<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert375553703<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-update375553703<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K0Bi-delete375553703<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete375553703<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0K0Bi" "AggregateOneEntityBinary"."GE0K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0K0Bi" ("GA0K0BiID", "p0K0Bi")
	SELECT (tuple)."GA0K0BiID", (tuple)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert375553703<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0K0Bi" AS tbl
	WHERE 
		("GA0K0BiID") IN (SELECT (u.old)."GA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0K0Bi" AS tbl SET
		"GA0K0BiID" = (u.new)."GA0K0BiID", "p0K0Bi" = (u.new)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0K0BiID" = (u.old)."GA0K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0K0Bi" ("GA0K0BiID", "p0K0Bi")
	SELECT (new)."GA0K0BiID", (new)."p0K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0K0Bi"
	WHERE ("GA0K0BiID") IN (SELECT (tuple)."GA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete375553703<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert375553703<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete375553703<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0K0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0K0Bi" "AggregateOneEntityBinary"."GE0K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert375553703<" 
	SELECT t.i, (t.tuple)."gE0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-update375553703<" 
	SELECT t.i, (t.old)."gE0K0Bi" as old, (t.new)."gE0K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-update<" t
	WHERE NOT (t.old)."gE0K0Bi" IS NULL AND (t.new)."gE0K0Bi" IS NULL
	OR (t.old)."gE0K0Bi" IS NULL AND NOT (t.new)."gE0K0Bi" IS NULL
	OR NOT (t.old)."gE0K0Bi" IS NULL AND NOT (t.new)."gE0K0Bi" IS NULL AND (t.old)."gE0K0Bi" != (t.new)."gE0K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete375553703<" 
	SELECT t.i, (t.tuple)."gE0K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0K0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."GA0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0K1Bi_entity' AND t.typname = '-ngs_GA0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-" AS "AggregateOneEntityBinary"."GA0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."GA0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-insert375554664<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert375554664<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-update375554664<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0K1Bi-delete375554664<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete375554664<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-insert375554664<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert375554664<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-update375554664<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0K1Bi-delete375554664<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete375554664<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0K1Bi" "AggregateOneEntityBinary"."GE0K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0K1Bi" ("GA0K1BiID", "p0K1Bi")
	SELECT (tuple)."GA0K1BiID", (tuple)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert375554664<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0K1Bi" AS tbl
	WHERE 
		("GA0K1BiID") IN (SELECT (u.old)."GA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0K1Bi" AS tbl SET
		"GA0K1BiID" = (u.new)."GA0K1BiID", "p0K1Bi" = (u.new)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0K1BiID" = (u.old)."GA0K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0K1Bi" ("GA0K1BiID", "p0K1Bi")
	SELECT (new)."GA0K1BiID", (new)."p0K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0K1Bi"
	WHERE ("GA0K1BiID") IN (SELECT (tuple)."GA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete375554664<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert375554664<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete375554664<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0K1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0K1Bi" "AggregateOneEntityBinary"."GE0K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert375554664<" 
	SELECT t.i, (t.tuple)."gE0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-update375554664<" 
	SELECT t.i, (t.old)."gE0K1Bi" as old, (t.new)."gE0K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-update<" t
	WHERE NOT (t.old)."gE0K1Bi" IS NULL AND (t.new)."gE0K1Bi" IS NULL
	OR (t.old)."gE0K1Bi" IS NULL AND NOT (t.new)."gE0K1Bi" IS NULL
	OR NOT (t.old)."gE0K1Bi" IS NULL AND NOT (t.new)."gE0K1Bi" IS NULL AND (t.old)."gE0K1Bi" != (t.new)."gE0K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete375554664<" 
	SELECT t.i, (t.tuple)."gE0K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0K1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."GA0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0L0Bi_entity' AND t.typname = '-ngs_GA0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-" AS "AggregateOneEntityBinary"."GA0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."GA0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-insert375583494<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert375583494<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-update375583494<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L0Bi-delete375583494<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete375583494<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-insert375583494<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert375583494<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-update375583494<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L0Bi-delete375583494<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete375583494<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0L0Bi" "AggregateOneEntityBinary"."GE0L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0L0Bi" ("GA0L0BiID", "p0L0Bi")
	SELECT (tuple)."GA0L0BiID", (tuple)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert375583494<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0L0Bi" AS tbl
	WHERE 
		("GA0L0BiID") IN (SELECT (u.old)."GA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0L0Bi" AS tbl SET
		"GA0L0BiID" = (u.new)."GA0L0BiID", "p0L0Bi" = (u.new)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0L0BiID" = (u.old)."GA0L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0L0Bi" ("GA0L0BiID", "p0L0Bi")
	SELECT (new)."GA0L0BiID", (new)."p0L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0L0Bi"
	WHERE ("GA0L0BiID") IN (SELECT (tuple)."GA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete375583494<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert375583494<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete375583494<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0L0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0L0Bi" "AggregateOneEntityBinary"."GE0L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert375583494<" 
	SELECT t.i, (t.tuple)."gE0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-update375583494<" 
	SELECT t.i, (t.old)."gE0L0Bi" as old, (t.new)."gE0L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-update<" t
	WHERE NOT (t.old)."gE0L0Bi" IS NULL AND (t.new)."gE0L0Bi" IS NULL
	OR (t.old)."gE0L0Bi" IS NULL AND NOT (t.new)."gE0L0Bi" IS NULL
	OR NOT (t.old)."gE0L0Bi" IS NULL AND NOT (t.new)."gE0L0Bi" IS NULL AND (t.old)."gE0L0Bi" != (t.new)."gE0L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete375583494<" 
	SELECT t.i, (t.tuple)."gE0L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0L0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."GA0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0L1Bi_entity' AND t.typname = '-ngs_GA0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-" AS "AggregateOneEntityBinary"."GA0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."GA0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-insert375584455<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert375584455<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-update375584455<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0L1Bi-delete375584455<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete375584455<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-insert375584455<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert375584455<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-update375584455<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0L1Bi-delete375584455<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete375584455<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0L1Bi" "AggregateOneEntityBinary"."GE0L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0L1Bi" ("GA0L1BiID", "p0L1Bi")
	SELECT (tuple)."GA0L1BiID", (tuple)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert375584455<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0L1Bi" AS tbl
	WHERE 
		("GA0L1BiID") IN (SELECT (u.old)."GA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0L1Bi" AS tbl SET
		"GA0L1BiID" = (u.new)."GA0L1BiID", "p0L1Bi" = (u.new)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0L1BiID" = (u.old)."GA0L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0L1Bi" ("GA0L1BiID", "p0L1Bi")
	SELECT (new)."GA0L1BiID", (new)."p0L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0L1Bi"
	WHERE ("GA0L1BiID") IN (SELECT (tuple)."GA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete375584455<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert375584455<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete375584455<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0L1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0L1Bi" "AggregateOneEntityBinary"."GE0L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert375584455<" 
	SELECT t.i, (t.tuple)."gE0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-update375584455<" 
	SELECT t.i, (t.old)."gE0L1Bi" as old, (t.new)."gE0L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-update<" t
	WHERE NOT (t.old)."gE0L1Bi" IS NULL AND (t.new)."gE0L1Bi" IS NULL
	OR (t.old)."gE0L1Bi" IS NULL AND NOT (t.new)."gE0L1Bi" IS NULL
	OR NOT (t.old)."gE0L1Bi" IS NULL AND NOT (t.new)."gE0L1Bi" IS NULL AND (t.old)."gE0L1Bi" != (t.new)."gE0L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete375584455<" 
	SELECT t.i, (t.tuple)."gE0L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0L1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."GA0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0Q1Bi_entity' AND t.typname = '-ngs_GA0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-" AS "AggregateOneEntityBinary"."GA0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."GA0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-insert375733410<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert375733410<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-update375733410<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0Q1Bi-delete375733410<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete375733410<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-insert375733410<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert375733410<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-update375733410<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0Q1Bi-delete375733410<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete375733410<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0Q1Bi" "AggregateOneEntityBinary"."GE0Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0Q1Bi" ("GA0Q1BiID", "p0Q1Bi")
	SELECT (tuple)."GA0Q1BiID", (tuple)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert375733410<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0Q1Bi" AS tbl
	WHERE 
		("GA0Q1BiID") IN (SELECT (u.old)."GA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0Q1Bi" AS tbl SET
		"GA0Q1BiID" = (u.new)."GA0Q1BiID", "p0Q1Bi" = (u.new)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0Q1BiID" = (u.old)."GA0Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0Q1Bi" ("GA0Q1BiID", "p0Q1Bi")
	SELECT (new)."GA0Q1BiID", (new)."p0Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0Q1Bi"
	WHERE ("GA0Q1BiID") IN (SELECT (tuple)."GA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete375733410<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert375733410<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete375733410<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0Q1Bi" "AggregateOneEntityBinary"."GE0Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert375733410<" 
	SELECT t.i, (t.tuple)."gE0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update375733410<" 
	SELECT t.i, (t.old)."gE0Q1Bi" as old, (t.new)."gE0Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-update<" t
	WHERE NOT (t.old)."gE0Q1Bi" IS NULL AND (t.new)."gE0Q1Bi" IS NULL
	OR (t.old)."gE0Q1Bi" IS NULL AND NOT (t.new)."gE0Q1Bi" IS NULL
	OR NOT (t.old)."gE0Q1Bi" IS NULL AND NOT (t.new)."gE0Q1Bi" IS NULL AND (t.old)."gE0Q1Bi" != (t.new)."gE0Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete375733410<" 
	SELECT t.i, (t.tuple)."gE0Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0Q1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."GA0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0S0Bi_entity' AND t.typname = '-ngs_GA0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-" AS "AggregateOneEntityBinary"."GA0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."GA0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-insert375792031<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert375792031<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-update375792031<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S0Bi-delete375792031<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete375792031<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-insert375792031<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert375792031<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-update375792031<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S0Bi-delete375792031<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete375792031<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0S0Bi" "AggregateOneEntityBinary"."GE0S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0S0Bi" ("GA0S0BiID", "p0S0Bi")
	SELECT (tuple)."GA0S0BiID", (tuple)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert375792031<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0S0Bi" AS tbl
	WHERE 
		("GA0S0BiID") IN (SELECT (u.old)."GA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0S0Bi" AS tbl SET
		"GA0S0BiID" = (u.new)."GA0S0BiID", "p0S0Bi" = (u.new)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0S0BiID" = (u.old)."GA0S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0S0Bi" ("GA0S0BiID", "p0S0Bi")
	SELECT (new)."GA0S0BiID", (new)."p0S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0S0Bi"
	WHERE ("GA0S0BiID") IN (SELECT (tuple)."GA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete375792031<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert375792031<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete375792031<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0S0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0S0Bi" "AggregateOneEntityBinary"."GE0S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert375792031<" 
	SELECT t.i, (t.tuple)."gE0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-update375792031<" 
	SELECT t.i, (t.old)."gE0S0Bi" as old, (t.new)."gE0S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-update<" t
	WHERE NOT (t.old)."gE0S0Bi" IS NULL AND (t.new)."gE0S0Bi" IS NULL
	OR (t.old)."gE0S0Bi" IS NULL AND NOT (t.new)."gE0S0Bi" IS NULL
	OR NOT (t.old)."gE0S0Bi" IS NULL AND NOT (t.new)."gE0S0Bi" IS NULL AND (t.old)."gE0S0Bi" != (t.new)."gE0S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete375792031<" 
	SELECT t.i, (t.tuple)."gE0S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0S0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."GA0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0S1Bi_entity' AND t.typname = '-ngs_GA0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-" AS "AggregateOneEntityBinary"."GA0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."GA0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-insert375792992<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert375792992<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-update375792992<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0S1Bi-delete375792992<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete375792992<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-insert375792992<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert375792992<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-update375792992<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0S1Bi-delete375792992<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete375792992<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0S1Bi" "AggregateOneEntityBinary"."GE0S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0S1Bi" ("GA0S1BiID", "p0S1Bi")
	SELECT (tuple)."GA0S1BiID", (tuple)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert375792992<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0S1Bi" AS tbl
	WHERE 
		("GA0S1BiID") IN (SELECT (u.old)."GA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0S1Bi" AS tbl SET
		"GA0S1BiID" = (u.new)."GA0S1BiID", "p0S1Bi" = (u.new)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0S1BiID" = (u.old)."GA0S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0S1Bi" ("GA0S1BiID", "p0S1Bi")
	SELECT (new)."GA0S1BiID", (new)."p0S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0S1Bi"
	WHERE ("GA0S1BiID") IN (SELECT (tuple)."GA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete375792992<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert375792992<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete375792992<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0S1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0S1Bi" "AggregateOneEntityBinary"."GE0S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert375792992<" 
	SELECT t.i, (t.tuple)."gE0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-update375792992<" 
	SELECT t.i, (t.old)."gE0S1Bi" as old, (t.new)."gE0S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-update<" t
	WHERE NOT (t.old)."gE0S1Bi" IS NULL AND (t.new)."gE0S1Bi" IS NULL
	OR (t.old)."gE0S1Bi" IS NULL AND NOT (t.new)."gE0S1Bi" IS NULL
	OR NOT (t.old)."gE0S1Bi" IS NULL AND NOT (t.new)."gE0S1Bi" IS NULL AND (t.old)."gE0S1Bi" != (t.new)."gE0S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete375792992<" 
	SELECT t.i, (t.tuple)."gE0S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0S1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."GA0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0V0Bi_entity' AND t.typname = '-ngs_GA0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-" AS "AggregateOneEntityBinary"."GA0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."GA0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-insert375881404<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert375881404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-update375881404<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V0Bi-delete375881404<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete375881404<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-insert375881404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert375881404<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-update375881404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V0Bi-delete375881404<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete375881404<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0V0Bi" "AggregateOneEntityBinary"."GE0V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0V0Bi" ("GA0V0BiID", "p0V0Bi")
	SELECT (tuple)."GA0V0BiID", (tuple)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert375881404<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0V0Bi" AS tbl
	WHERE 
		("GA0V0BiID") IN (SELECT (u.old)."GA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0V0Bi" AS tbl SET
		"GA0V0BiID" = (u.new)."GA0V0BiID", "p0V0Bi" = (u.new)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0V0BiID" = (u.old)."GA0V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0V0Bi" ("GA0V0BiID", "p0V0Bi")
	SELECT (new)."GA0V0BiID", (new)."p0V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0V0Bi"
	WHERE ("GA0V0BiID") IN (SELECT (tuple)."GA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete375881404<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert375881404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete375881404<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0V0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0V0Bi" "AggregateOneEntityBinary"."GE0V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert375881404<" 
	SELECT t.i, (t.tuple)."gE0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-insert<" t
	WHERE NOT (t.tuple)."gE0V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-update375881404<" 
	SELECT t.i, (t.old)."gE0V0Bi" as old, (t.new)."gE0V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-update<" t
	WHERE NOT (t.old)."gE0V0Bi" IS NULL AND (t.new)."gE0V0Bi" IS NULL
	OR (t.old)."gE0V0Bi" IS NULL AND NOT (t.new)."gE0V0Bi" IS NULL
	OR NOT (t.old)."gE0V0Bi" IS NULL AND NOT (t.new)."gE0V0Bi" IS NULL AND (t.old)."gE0V0Bi" != (t.new)."gE0V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete375881404<" 
	SELECT t.i, (t.tuple)."gE0V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0V0Bi-delete<" t
	WHERE NOT (t.tuple)."gE0V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."GA0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA0V1Bi_entity' AND t.typname = '-ngs_GA0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-" AS "AggregateOneEntityBinary"."GA0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."GA0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA0V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA0V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA0V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA0V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-insert375882365<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert375882365<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-update375882365<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA0V1Bi-delete375882365<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete375882365<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-insert375882365<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert375882365<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-update375882365<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA0V1Bi-delete375882365<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete375882365<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE0V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA0V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0V1Bi" "AggregateOneEntityBinary"."GE0V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA0V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE0V1Bi" ("GA0V1BiID", "p0V1Bi")
	SELECT (tuple)."GA0V1BiID", (tuple)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert375882365<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA0V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE0V1Bi" AS tbl
	WHERE 
		("GA0V1BiID") IN (SELECT (u.old)."GA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE0V1Bi" AS tbl SET
		"GA0V1BiID" = (u.new)."GA0V1BiID", "p0V1Bi" = (u.new)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA0V1BiID" = (u.old)."GA0V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE0V1Bi" ("GA0V1BiID", "p0V1Bi")
	SELECT (new)."GA0V1BiID", (new)."p0V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE0V1Bi"
	WHERE ("GA0V1BiID") IN (SELECT (tuple)."GA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete375882365<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA0V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA0V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert375882365<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete375882365<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA0V1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA0V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA0V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA0V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA0V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE0V1Bi" "AggregateOneEntityBinary"."GE0V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert375882365<" 
	SELECT t.i, (t.tuple)."gE0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-insert<" t
	WHERE NOT (t.tuple)."gE0V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-update375882365<" 
	SELECT t.i, (t.old)."gE0V1Bi" as old, (t.new)."gE0V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-update<" t
	WHERE NOT (t.old)."gE0V1Bi" IS NULL AND (t.new)."gE0V1Bi" IS NULL
	OR (t.old)."gE0V1Bi" IS NULL AND NOT (t.new)."gE0V1Bi" IS NULL
	OR NOT (t.old)."gE0V1Bi" IS NULL AND NOT (t.new)."gE0V1Bi" IS NULL AND (t.old)."gE0V1Bi" != (t.new)."gE0V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete375882365<" 
	SELECT t.i, (t.tuple)."gE0V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA0V1Bi-delete<" t
	WHERE NOT (t.tuple)."gE0V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA0V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."GA1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1A0Bi_entity' AND t.typname = '-ngs_GA1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-" AS "AggregateOneEntityBinary"."GA1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."GA1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-insert376179314<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert376179314<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-update376179314<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A0Bi-delete376179314<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete376179314<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-insert376179314<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert376179314<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-update376179314<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A0Bi-delete376179314<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete376179314<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1A0Bi" "AggregateOneEntityBinary"."GE1A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1A0Bi" ("GA1A0BiID", "p1A0Bi")
	SELECT (tuple)."GA1A0BiID", (tuple)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert376179314<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1A0Bi" AS tbl
	WHERE 
		("GA1A0BiID") IN (SELECT (u.old)."GA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1A0Bi" AS tbl SET
		"GA1A0BiID" = (u.new)."GA1A0BiID", "p1A0Bi" = (u.new)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1A0BiID" = (u.old)."GA1A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1A0Bi" ("GA1A0BiID", "p1A0Bi")
	SELECT (new)."GA1A0BiID", (new)."p1A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1A0Bi"
	WHERE ("GA1A0BiID") IN (SELECT (tuple)."GA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete376179314<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert376179314<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete376179314<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1A0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1A0Bi" "AggregateOneEntityBinary"."GE1A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert376179314<" 
	SELECT t.i, (t.tuple)."gE1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-update376179314<" 
	SELECT t.i, (t.old)."gE1A0Bi" as old, (t.new)."gE1A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-update<" t
	WHERE NOT (t.old)."gE1A0Bi" IS NULL AND (t.new)."gE1A0Bi" IS NULL
	OR (t.old)."gE1A0Bi" IS NULL AND NOT (t.new)."gE1A0Bi" IS NULL
	OR NOT (t.old)."gE1A0Bi" IS NULL AND NOT (t.new)."gE1A0Bi" IS NULL AND (t.old)."gE1A0Bi" != (t.new)."gE1A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete376179314<" 
	SELECT t.i, (t.tuple)."gE1A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1A0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."GA1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1A1Bi_entity' AND t.typname = '-ngs_GA1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-" AS "AggregateOneEntityBinary"."GA1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."GA1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-insert376180275<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert376180275<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-update376180275<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1A1Bi-delete376180275<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete376180275<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-insert376180275<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert376180275<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-update376180275<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1A1Bi-delete376180275<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete376180275<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1A1Bi" "AggregateOneEntityBinary"."GE1A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1A1Bi" ("GA1A1BiID", "p1A1Bi")
	SELECT (tuple)."GA1A1BiID", (tuple)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert376180275<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1A1Bi" AS tbl
	WHERE 
		("GA1A1BiID") IN (SELECT (u.old)."GA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1A1Bi" AS tbl SET
		"GA1A1BiID" = (u.new)."GA1A1BiID", "p1A1Bi" = (u.new)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1A1BiID" = (u.old)."GA1A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1A1Bi" ("GA1A1BiID", "p1A1Bi")
	SELECT (new)."GA1A1BiID", (new)."p1A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1A1Bi"
	WHERE ("GA1A1BiID") IN (SELECT (tuple)."GA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete376180275<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert376180275<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete376180275<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1A1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1A1Bi" "AggregateOneEntityBinary"."GE1A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert376180275<" 
	SELECT t.i, (t.tuple)."gE1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-update376180275<" 
	SELECT t.i, (t.old)."gE1A1Bi" as old, (t.new)."gE1A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-update<" t
	WHERE NOT (t.old)."gE1A1Bi" IS NULL AND (t.new)."gE1A1Bi" IS NULL
	OR (t.old)."gE1A1Bi" IS NULL AND NOT (t.new)."gE1A1Bi" IS NULL
	OR NOT (t.old)."gE1A1Bi" IS NULL AND NOT (t.new)."gE1A1Bi" IS NULL AND (t.old)."gE1A1Bi" != (t.new)."gE1A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete376180275<" 
	SELECT t.i, (t.tuple)."gE1A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1A1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."GA1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1Bi_entity' AND t.typname = '-ngs_GA1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1Bi_type-" AS "AggregateOneEntityBinary"."GA1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."GA1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-insert755697955<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-insert755697955<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-update755697955<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Bi-delete755697955<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Bi-delete755697955<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-insert755697955<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-insert755697955<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-update755697955<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Bi-delete755697955<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Bi-delete755697955<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1Bi" "AggregateOneEntityBinary"."GE1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1Bi" ("GA1BiID", "p1Bi")
	SELECT (tuple)."GA1BiID", (tuple)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert755697955<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1Bi" AS tbl
	WHERE 
		("GA1BiID") IN (SELECT (u.old)."GA1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1Bi" AS tbl SET
		"GA1BiID" = (u.new)."GA1BiID", "p1Bi" = (u.new)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1BiID" = (u.old)."GA1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1Bi" ("GA1BiID", "p1Bi")
	SELECT (new)."GA1BiID", (new)."p1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1Bi"
	WHERE ("GA1BiID") IN (SELECT (tuple)."GA1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete755697955<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert755697955<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete755697955<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1Bi" "AggregateOneEntityBinary"."GE1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-insert755697955<" 
	SELECT t.i, (t.tuple)."gE1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-update755697955<" 
	SELECT t.i, (t.old)."gE1Bi" as old, (t.new)."gE1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-update<" t
	WHERE NOT (t.old)."gE1Bi" IS NULL AND (t.new)."gE1Bi" IS NULL
	OR (t.old)."gE1Bi" IS NULL AND NOT (t.new)."gE1Bi" IS NULL
	OR NOT (t.old)."gE1Bi" IS NULL AND NOT (t.new)."gE1Bi" IS NULL AND (t.old)."gE1Bi" != (t.new)."gE1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Bi-delete755697955<" 
	SELECT t.i, (t.tuple)."gE1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."GA1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1C0Bi_entity' AND t.typname = '-ngs_GA1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-" AS "AggregateOneEntityBinary"."GA1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."GA1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-insert376238896<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert376238896<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-update376238896<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C0Bi-delete376238896<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete376238896<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-insert376238896<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert376238896<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-update376238896<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C0Bi-delete376238896<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete376238896<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1C0Bi" "AggregateOneEntityBinary"."GE1C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1C0Bi" ("GA1C0BiID", "p1C0Bi")
	SELECT (tuple)."GA1C0BiID", (tuple)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert376238896<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1C0Bi" AS tbl
	WHERE 
		("GA1C0BiID") IN (SELECT (u.old)."GA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1C0Bi" AS tbl SET
		"GA1C0BiID" = (u.new)."GA1C0BiID", "p1C0Bi" = (u.new)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1C0BiID" = (u.old)."GA1C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1C0Bi" ("GA1C0BiID", "p1C0Bi")
	SELECT (new)."GA1C0BiID", (new)."p1C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1C0Bi"
	WHERE ("GA1C0BiID") IN (SELECT (tuple)."GA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete376238896<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert376238896<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete376238896<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1C0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1C0Bi" "AggregateOneEntityBinary"."GE1C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert376238896<" 
	SELECT t.i, (t.tuple)."gE1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-update376238896<" 
	SELECT t.i, (t.old)."gE1C0Bi" as old, (t.new)."gE1C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-update<" t
	WHERE NOT (t.old)."gE1C0Bi" IS NULL AND (t.new)."gE1C0Bi" IS NULL
	OR (t.old)."gE1C0Bi" IS NULL AND NOT (t.new)."gE1C0Bi" IS NULL
	OR NOT (t.old)."gE1C0Bi" IS NULL AND NOT (t.new)."gE1C0Bi" IS NULL AND (t.old)."gE1C0Bi" != (t.new)."gE1C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete376238896<" 
	SELECT t.i, (t.tuple)."gE1C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1C0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."GA1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1C1Bi_entity' AND t.typname = '-ngs_GA1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-" AS "AggregateOneEntityBinary"."GA1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."GA1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-insert376239857<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert376239857<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-update376239857<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1C1Bi-delete376239857<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete376239857<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-insert376239857<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert376239857<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-update376239857<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1C1Bi-delete376239857<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete376239857<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1C1Bi" "AggregateOneEntityBinary"."GE1C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1C1Bi" ("GA1C1BiID", "p1C1Bi")
	SELECT (tuple)."GA1C1BiID", (tuple)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert376239857<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1C1Bi" AS tbl
	WHERE 
		("GA1C1BiID") IN (SELECT (u.old)."GA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1C1Bi" AS tbl SET
		"GA1C1BiID" = (u.new)."GA1C1BiID", "p1C1Bi" = (u.new)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1C1BiID" = (u.old)."GA1C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1C1Bi" ("GA1C1BiID", "p1C1Bi")
	SELECT (new)."GA1C1BiID", (new)."p1C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1C1Bi"
	WHERE ("GA1C1BiID") IN (SELECT (tuple)."GA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete376239857<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert376239857<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete376239857<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1C1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1C1Bi" "AggregateOneEntityBinary"."GE1C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert376239857<" 
	SELECT t.i, (t.tuple)."gE1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-update376239857<" 
	SELECT t.i, (t.old)."gE1C1Bi" as old, (t.new)."gE1C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-update<" t
	WHERE NOT (t.old)."gE1C1Bi" IS NULL AND (t.new)."gE1C1Bi" IS NULL
	OR (t.old)."gE1C1Bi" IS NULL AND NOT (t.new)."gE1C1Bi" IS NULL
	OR NOT (t.old)."gE1C1Bi" IS NULL AND NOT (t.new)."gE1C1Bi" IS NULL AND (t.old)."gE1C1Bi" != (t.new)."gE1C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete376239857<" 
	SELECT t.i, (t.tuple)."gE1C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1C1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."GA1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1K0Bi_entity' AND t.typname = '-ngs_GA1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-" AS "AggregateOneEntityBinary"."GA1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."GA1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-insert376477224<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert376477224<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-update376477224<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K0Bi-delete376477224<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete376477224<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-insert376477224<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert376477224<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-update376477224<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K0Bi-delete376477224<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete376477224<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1K0Bi" "AggregateOneEntityBinary"."GE1K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1K0Bi" ("GA1K0BiID", "p1K0Bi")
	SELECT (tuple)."GA1K0BiID", (tuple)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert376477224<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1K0Bi" AS tbl
	WHERE 
		("GA1K0BiID") IN (SELECT (u.old)."GA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1K0Bi" AS tbl SET
		"GA1K0BiID" = (u.new)."GA1K0BiID", "p1K0Bi" = (u.new)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1K0BiID" = (u.old)."GA1K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1K0Bi" ("GA1K0BiID", "p1K0Bi")
	SELECT (new)."GA1K0BiID", (new)."p1K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1K0Bi"
	WHERE ("GA1K0BiID") IN (SELECT (tuple)."GA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete376477224<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert376477224<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete376477224<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1K0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1K0Bi" "AggregateOneEntityBinary"."GE1K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert376477224<" 
	SELECT t.i, (t.tuple)."gE1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-update376477224<" 
	SELECT t.i, (t.old)."gE1K0Bi" as old, (t.new)."gE1K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-update<" t
	WHERE NOT (t.old)."gE1K0Bi" IS NULL AND (t.new)."gE1K0Bi" IS NULL
	OR (t.old)."gE1K0Bi" IS NULL AND NOT (t.new)."gE1K0Bi" IS NULL
	OR NOT (t.old)."gE1K0Bi" IS NULL AND NOT (t.new)."gE1K0Bi" IS NULL AND (t.old)."gE1K0Bi" != (t.new)."gE1K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete376477224<" 
	SELECT t.i, (t.tuple)."gE1K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1K0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."GA1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1K1Bi_entity' AND t.typname = '-ngs_GA1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-" AS "AggregateOneEntityBinary"."GA1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."GA1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-insert376478185<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert376478185<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-update376478185<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1K1Bi-delete376478185<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete376478185<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-insert376478185<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert376478185<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-update376478185<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1K1Bi-delete376478185<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete376478185<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1K1Bi" "AggregateOneEntityBinary"."GE1K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1K1Bi" ("GA1K1BiID", "p1K1Bi")
	SELECT (tuple)."GA1K1BiID", (tuple)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert376478185<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1K1Bi" AS tbl
	WHERE 
		("GA1K1BiID") IN (SELECT (u.old)."GA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1K1Bi" AS tbl SET
		"GA1K1BiID" = (u.new)."GA1K1BiID", "p1K1Bi" = (u.new)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1K1BiID" = (u.old)."GA1K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1K1Bi" ("GA1K1BiID", "p1K1Bi")
	SELECT (new)."GA1K1BiID", (new)."p1K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1K1Bi"
	WHERE ("GA1K1BiID") IN (SELECT (tuple)."GA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete376478185<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert376478185<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete376478185<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1K1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1K1Bi" "AggregateOneEntityBinary"."GE1K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert376478185<" 
	SELECT t.i, (t.tuple)."gE1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-update376478185<" 
	SELECT t.i, (t.old)."gE1K1Bi" as old, (t.new)."gE1K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-update<" t
	WHERE NOT (t.old)."gE1K1Bi" IS NULL AND (t.new)."gE1K1Bi" IS NULL
	OR (t.old)."gE1K1Bi" IS NULL AND NOT (t.new)."gE1K1Bi" IS NULL
	OR NOT (t.old)."gE1K1Bi" IS NULL AND NOT (t.new)."gE1K1Bi" IS NULL AND (t.old)."gE1K1Bi" != (t.new)."gE1K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete376478185<" 
	SELECT t.i, (t.tuple)."gE1K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1K1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."GA1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1L0Bi_entity' AND t.typname = '-ngs_GA1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-" AS "AggregateOneEntityBinary"."GA1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."GA1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-insert376507015<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert376507015<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-update376507015<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L0Bi-delete376507015<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete376507015<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-insert376507015<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert376507015<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-update376507015<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L0Bi-delete376507015<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete376507015<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1L0Bi" "AggregateOneEntityBinary"."GE1L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1L0Bi" ("GA1L0BiID", "p1L0Bi")
	SELECT (tuple)."GA1L0BiID", (tuple)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert376507015<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1L0Bi" AS tbl
	WHERE 
		("GA1L0BiID") IN (SELECT (u.old)."GA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1L0Bi" AS tbl SET
		"GA1L0BiID" = (u.new)."GA1L0BiID", "p1L0Bi" = (u.new)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1L0BiID" = (u.old)."GA1L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1L0Bi" ("GA1L0BiID", "p1L0Bi")
	SELECT (new)."GA1L0BiID", (new)."p1L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1L0Bi"
	WHERE ("GA1L0BiID") IN (SELECT (tuple)."GA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete376507015<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert376507015<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete376507015<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1L0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1L0Bi" "AggregateOneEntityBinary"."GE1L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert376507015<" 
	SELECT t.i, (t.tuple)."gE1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-update376507015<" 
	SELECT t.i, (t.old)."gE1L0Bi" as old, (t.new)."gE1L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-update<" t
	WHERE NOT (t.old)."gE1L0Bi" IS NULL AND (t.new)."gE1L0Bi" IS NULL
	OR (t.old)."gE1L0Bi" IS NULL AND NOT (t.new)."gE1L0Bi" IS NULL
	OR NOT (t.old)."gE1L0Bi" IS NULL AND NOT (t.new)."gE1L0Bi" IS NULL AND (t.old)."gE1L0Bi" != (t.new)."gE1L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete376507015<" 
	SELECT t.i, (t.tuple)."gE1L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1L0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."GA1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1L1Bi_entity' AND t.typname = '-ngs_GA1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-" AS "AggregateOneEntityBinary"."GA1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."GA1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-insert376507976<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert376507976<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-update376507976<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1L1Bi-delete376507976<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete376507976<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-insert376507976<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert376507976<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-update376507976<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1L1Bi-delete376507976<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete376507976<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1L1Bi" "AggregateOneEntityBinary"."GE1L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1L1Bi" ("GA1L1BiID", "p1L1Bi")
	SELECT (tuple)."GA1L1BiID", (tuple)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert376507976<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1L1Bi" AS tbl
	WHERE 
		("GA1L1BiID") IN (SELECT (u.old)."GA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1L1Bi" AS tbl SET
		"GA1L1BiID" = (u.new)."GA1L1BiID", "p1L1Bi" = (u.new)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1L1BiID" = (u.old)."GA1L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1L1Bi" ("GA1L1BiID", "p1L1Bi")
	SELECT (new)."GA1L1BiID", (new)."p1L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1L1Bi"
	WHERE ("GA1L1BiID") IN (SELECT (tuple)."GA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete376507976<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert376507976<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete376507976<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1L1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1L1Bi" "AggregateOneEntityBinary"."GE1L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert376507976<" 
	SELECT t.i, (t.tuple)."gE1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-update376507976<" 
	SELECT t.i, (t.old)."gE1L1Bi" as old, (t.new)."gE1L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-update<" t
	WHERE NOT (t.old)."gE1L1Bi" IS NULL AND (t.new)."gE1L1Bi" IS NULL
	OR (t.old)."gE1L1Bi" IS NULL AND NOT (t.new)."gE1L1Bi" IS NULL
	OR NOT (t.old)."gE1L1Bi" IS NULL AND NOT (t.new)."gE1L1Bi" IS NULL AND (t.old)."gE1L1Bi" != (t.new)."gE1L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete376507976<" 
	SELECT t.i, (t.tuple)."gE1L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1L1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."GA1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1Q1Bi_entity' AND t.typname = '-ngs_GA1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-" AS "AggregateOneEntityBinary"."GA1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."GA1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-insert376656931<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert376656931<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-update376656931<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1Q1Bi-delete376656931<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete376656931<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-insert376656931<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert376656931<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-update376656931<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1Q1Bi-delete376656931<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete376656931<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1Q1Bi" "AggregateOneEntityBinary"."GE1Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1Q1Bi" ("GA1Q1BiID", "p1Q1Bi")
	SELECT (tuple)."GA1Q1BiID", (tuple)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert376656931<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1Q1Bi" AS tbl
	WHERE 
		("GA1Q1BiID") IN (SELECT (u.old)."GA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1Q1Bi" AS tbl SET
		"GA1Q1BiID" = (u.new)."GA1Q1BiID", "p1Q1Bi" = (u.new)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1Q1BiID" = (u.old)."GA1Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1Q1Bi" ("GA1Q1BiID", "p1Q1Bi")
	SELECT (new)."GA1Q1BiID", (new)."p1Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1Q1Bi"
	WHERE ("GA1Q1BiID") IN (SELECT (tuple)."GA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete376656931<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert376656931<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete376656931<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1Q1Bi" "AggregateOneEntityBinary"."GE1Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert376656931<" 
	SELECT t.i, (t.tuple)."gE1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update376656931<" 
	SELECT t.i, (t.old)."gE1Q1Bi" as old, (t.new)."gE1Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-update<" t
	WHERE NOT (t.old)."gE1Q1Bi" IS NULL AND (t.new)."gE1Q1Bi" IS NULL
	OR (t.old)."gE1Q1Bi" IS NULL AND NOT (t.new)."gE1Q1Bi" IS NULL
	OR NOT (t.old)."gE1Q1Bi" IS NULL AND NOT (t.new)."gE1Q1Bi" IS NULL AND (t.old)."gE1Q1Bi" != (t.new)."gE1Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete376656931<" 
	SELECT t.i, (t.tuple)."gE1Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1Q1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."GA1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1S0Bi_entity' AND t.typname = '-ngs_GA1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-" AS "AggregateOneEntityBinary"."GA1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."GA1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-insert376715552<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert376715552<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-update376715552<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S0Bi-delete376715552<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete376715552<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-insert376715552<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert376715552<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-update376715552<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S0Bi-delete376715552<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete376715552<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1S0Bi" "AggregateOneEntityBinary"."GE1S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1S0Bi" ("GA1S0BiID", "p1S0Bi")
	SELECT (tuple)."GA1S0BiID", (tuple)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert376715552<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1S0Bi" AS tbl
	WHERE 
		("GA1S0BiID") IN (SELECT (u.old)."GA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1S0Bi" AS tbl SET
		"GA1S0BiID" = (u.new)."GA1S0BiID", "p1S0Bi" = (u.new)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1S0BiID" = (u.old)."GA1S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1S0Bi" ("GA1S0BiID", "p1S0Bi")
	SELECT (new)."GA1S0BiID", (new)."p1S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1S0Bi"
	WHERE ("GA1S0BiID") IN (SELECT (tuple)."GA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete376715552<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert376715552<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete376715552<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1S0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1S0Bi" "AggregateOneEntityBinary"."GE1S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert376715552<" 
	SELECT t.i, (t.tuple)."gE1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-update376715552<" 
	SELECT t.i, (t.old)."gE1S0Bi" as old, (t.new)."gE1S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-update<" t
	WHERE NOT (t.old)."gE1S0Bi" IS NULL AND (t.new)."gE1S0Bi" IS NULL
	OR (t.old)."gE1S0Bi" IS NULL AND NOT (t.new)."gE1S0Bi" IS NULL
	OR NOT (t.old)."gE1S0Bi" IS NULL AND NOT (t.new)."gE1S0Bi" IS NULL AND (t.old)."gE1S0Bi" != (t.new)."gE1S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete376715552<" 
	SELECT t.i, (t.tuple)."gE1S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1S0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."GA1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1S1Bi_entity' AND t.typname = '-ngs_GA1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-" AS "AggregateOneEntityBinary"."GA1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."GA1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-insert376716513<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert376716513<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-update376716513<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1S1Bi-delete376716513<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete376716513<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-insert376716513<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert376716513<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-update376716513<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1S1Bi-delete376716513<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete376716513<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1S1Bi" "AggregateOneEntityBinary"."GE1S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1S1Bi" ("GA1S1BiID", "p1S1Bi")
	SELECT (tuple)."GA1S1BiID", (tuple)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert376716513<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1S1Bi" AS tbl
	WHERE 
		("GA1S1BiID") IN (SELECT (u.old)."GA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1S1Bi" AS tbl SET
		"GA1S1BiID" = (u.new)."GA1S1BiID", "p1S1Bi" = (u.new)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1S1BiID" = (u.old)."GA1S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1S1Bi" ("GA1S1BiID", "p1S1Bi")
	SELECT (new)."GA1S1BiID", (new)."p1S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1S1Bi"
	WHERE ("GA1S1BiID") IN (SELECT (tuple)."GA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete376716513<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert376716513<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete376716513<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1S1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1S1Bi" "AggregateOneEntityBinary"."GE1S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert376716513<" 
	SELECT t.i, (t.tuple)."gE1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-update376716513<" 
	SELECT t.i, (t.old)."gE1S1Bi" as old, (t.new)."gE1S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-update<" t
	WHERE NOT (t.old)."gE1S1Bi" IS NULL AND (t.new)."gE1S1Bi" IS NULL
	OR (t.old)."gE1S1Bi" IS NULL AND NOT (t.new)."gE1S1Bi" IS NULL
	OR NOT (t.old)."gE1S1Bi" IS NULL AND NOT (t.new)."gE1S1Bi" IS NULL AND (t.old)."gE1S1Bi" != (t.new)."gE1S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete376716513<" 
	SELECT t.i, (t.tuple)."gE1S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1S1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."GA1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1V0Bi_entity' AND t.typname = '-ngs_GA1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-" AS "AggregateOneEntityBinary"."GA1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."GA1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-insert376804925<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert376804925<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-update376804925<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V0Bi-delete376804925<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete376804925<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-insert376804925<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert376804925<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-update376804925<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V0Bi-delete376804925<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete376804925<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1V0Bi" "AggregateOneEntityBinary"."GE1V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1V0Bi" ("GA1V0BiID", "p1V0Bi")
	SELECT (tuple)."GA1V0BiID", (tuple)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert376804925<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1V0Bi" AS tbl
	WHERE 
		("GA1V0BiID") IN (SELECT (u.old)."GA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1V0Bi" AS tbl SET
		"GA1V0BiID" = (u.new)."GA1V0BiID", "p1V0Bi" = (u.new)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1V0BiID" = (u.old)."GA1V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1V0Bi" ("GA1V0BiID", "p1V0Bi")
	SELECT (new)."GA1V0BiID", (new)."p1V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1V0Bi"
	WHERE ("GA1V0BiID") IN (SELECT (tuple)."GA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete376804925<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert376804925<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete376804925<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1V0Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1V0Bi" "AggregateOneEntityBinary"."GE1V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert376804925<" 
	SELECT t.i, (t.tuple)."gE1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-insert<" t
	WHERE NOT (t.tuple)."gE1V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-update376804925<" 
	SELECT t.i, (t.old)."gE1V0Bi" as old, (t.new)."gE1V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-update<" t
	WHERE NOT (t.old)."gE1V0Bi" IS NULL AND (t.new)."gE1V0Bi" IS NULL
	OR (t.old)."gE1V0Bi" IS NULL AND NOT (t.new)."gE1V0Bi" IS NULL
	OR NOT (t.old)."gE1V0Bi" IS NULL AND NOT (t.new)."gE1V0Bi" IS NULL AND (t.old)."gE1V0Bi" != (t.new)."gE1V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete376804925<" 
	SELECT t.i, (t.tuple)."gE1V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1V0Bi-delete<" t
	WHERE NOT (t.tuple)."gE1V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."GA1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."GA1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."GA1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'GA1V1Bi_entity' AND t.typname = '-ngs_GA1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-" AS "AggregateOneEntityBinary"."GA1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."GA1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."GA1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."GA1V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."GA1V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."GA1V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GA1V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-insert376805886<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert376805886<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-update376805886<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-GA1V1Bi-delete376805886<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete376805886<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-insert376805886<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert376805886<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-update376805886<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."GE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-GA1V1Bi-delete376805886<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete376805886<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."GE1V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_GA1V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1V1Bi" "AggregateOneEntityBinary"."GE1V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."GA1V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."GE1V1Bi" ("GA1V1BiID", "p1V1Bi")
	SELECT (tuple)."GA1V1BiID", (tuple)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert376805886<" i;

		
	UPDATE "AggregateOneEntityBinary"."GA1V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."GE1V1Bi" AS tbl
	WHERE 
		("GA1V1BiID") IN (SELECT (u.old)."GA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."GE1V1Bi" AS tbl SET
		"GA1V1BiID" = (u.new)."GA1V1BiID", "p1V1Bi" = (u.new)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."GA1V1BiID" = (u.old)."GA1V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."GE1V1Bi" ("GA1V1BiID", "p1V1Bi")
	SELECT (new)."GA1V1BiID", (new)."p1V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."GE1V1Bi"
	WHERE ("GA1V1BiID") IN (SELECT (tuple)."GA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete376805886<" d);

	DELETE FROM "AggregateOneEntityBinary"."GA1V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.GA1V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert376805886<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete376805886<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_GA1V1Bi"(
IN _inserted "AggregateOneEntityBinary"."GA1V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."GA1V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."GA1V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."GA1V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.GE1V1Bi" "AggregateOneEntityBinary"."GE1V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert376805886<" 
	SELECT t.i, (t.tuple)."gE1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-insert<" t
	WHERE NOT (t.tuple)."gE1V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-update376805886<" 
	SELECT t.i, (t.old)."gE1V1Bi" as old, (t.new)."gE1V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-update<" t
	WHERE NOT (t.old)."gE1V1Bi" IS NULL AND (t.new)."gE1V1Bi" IS NULL
	OR (t.old)."gE1V1Bi" IS NULL AND NOT (t.new)."gE1V1Bi" IS NULL
	OR NOT (t.old)."gE1V1Bi" IS NULL AND NOT (t.new)."gE1V1Bi" IS NULL AND (t.old)."gE1V1Bi" != (t.new)."gE1V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete376805886<" 
	SELECT t.i, (t.tuple)."gE1V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-GA1V1Bi-delete<" t
	WHERE NOT (t.tuple)."gE1V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_GA1V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."SA0A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0A0Bi_entity' AND t.typname = '-ngs_SA0A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-" AS "AggregateOneEntityBinary"."SA0A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."SA0A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-insert1859601923<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert1859601923<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-update1859601923<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A0Bi-delete1859601923<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete1859601923<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-insert1859601923<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert1859601923<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-update1859601923<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A0Bi-delete1859601923<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete1859601923<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0A0Bi" "AggregateOneEntityBinary"."SE0A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0A0Bi" ("SA0A0BiID", "p0A0Bi")
	SELECT (tuple)."SA0A0BiID", (tuple)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert1859601923<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0A0Bi" AS tbl
	WHERE 
		("SA0A0BiID") IN (SELECT (u.old)."SA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0A0Bi" AS tbl SET
		"SA0A0BiID" = (u.new)."SA0A0BiID", "p0A0Bi" = (u.new)."p0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0A0BiID" = (u.old)."SA0A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0A0Bi" ("SA0A0BiID", "p0A0Bi")
	SELECT (new)."SA0A0BiID", (new)."p0A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0A0Bi"
	WHERE ("SA0A0BiID") IN (SELECT (tuple)."SA0A0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete1859601923<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert1859601923<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete1859601923<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0A0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0A0Bi" "AggregateOneEntityBinary"."SE0A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert1859601923<" 
	SELECT t.i, (t.tuple)."sE0A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-update1859601923<" 
	SELECT t.i, (t.old)."sE0A0Bi" as old, (t.new)."sE0A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-update<" t
	WHERE NOT (t.old)."sE0A0Bi" IS NULL AND (t.new)."sE0A0Bi" IS NULL
	OR (t.old)."sE0A0Bi" IS NULL AND NOT (t.new)."sE0A0Bi" IS NULL
	OR NOT (t.old)."sE0A0Bi" IS NULL AND NOT (t.new)."sE0A0Bi" IS NULL AND (t.old)."sE0A0Bi" != (t.new)."sE0A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete1859601923<" 
	SELECT t.i, (t.tuple)."sE0A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0A0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."SA0A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0A1Bi_entity' AND t.typname = '-ngs_SA0A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-" AS "AggregateOneEntityBinary"."SA0A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."SA0A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-insert1859600962<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert1859600962<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-update1859600962<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0A1Bi-delete1859600962<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete1859600962<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-insert1859600962<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert1859600962<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-update1859600962<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0A1Bi-delete1859600962<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete1859600962<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0A1Bi" "AggregateOneEntityBinary"."SE0A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0A1Bi" ("SA0A1BiID", "p0A1Bi")
	SELECT (tuple)."SA0A1BiID", (tuple)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert1859600962<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0A1Bi" AS tbl
	WHERE 
		("SA0A1BiID") IN (SELECT (u.old)."SA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0A1Bi" AS tbl SET
		"SA0A1BiID" = (u.new)."SA0A1BiID", "p0A1Bi" = (u.new)."p0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0A1BiID" = (u.old)."SA0A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0A1Bi" ("SA0A1BiID", "p0A1Bi")
	SELECT (new)."SA0A1BiID", (new)."p0A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0A1Bi"
	WHERE ("SA0A1BiID") IN (SELECT (tuple)."SA0A1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete1859600962<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert1859600962<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete1859600962<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0A1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0A1Bi" "AggregateOneEntityBinary"."SE0A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert1859600962<" 
	SELECT t.i, (t.tuple)."sE0A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-update1859600962<" 
	SELECT t.i, (t.old)."sE0A1Bi" as old, (t.new)."sE0A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-update<" t
	WHERE NOT (t.old)."sE0A1Bi" IS NULL AND (t.new)."sE0A1Bi" IS NULL
	OR (t.old)."sE0A1Bi" IS NULL AND NOT (t.new)."sE0A1Bi" IS NULL
	OR NOT (t.old)."sE0A1Bi" IS NULL AND NOT (t.new)."sE0A1Bi" IS NULL AND (t.old)."sE0A1Bi" != (t.new)."sE0A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete1859600962<" 
	SELECT t.i, (t.tuple)."sE0A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0A1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."SA0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0Bi_entity' AND t.typname = '-ngs_SA0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0Bi_type-" AS "AggregateOneEntityBinary"."SA0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."SA0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-insert766779246<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-insert766779246<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-update766779246<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Bi-delete766779246<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Bi-delete766779246<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-insert766779246<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-insert766779246<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-update766779246<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Bi-delete766779246<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Bi-delete766779246<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0Bi" "AggregateOneEntityBinary"."SE0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0Bi" ("SA0BiID", "p0Bi")
	SELECT (tuple)."SA0BiID", (tuple)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert766779246<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0Bi" AS tbl
	WHERE 
		("SA0BiID") IN (SELECT (u.old)."SA0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0Bi" AS tbl SET
		"SA0BiID" = (u.new)."SA0BiID", "p0Bi" = (u.new)."p0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0BiID" = (u.old)."SA0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0Bi" ("SA0BiID", "p0Bi")
	SELECT (new)."SA0BiID", (new)."p0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0Bi"
	WHERE ("SA0BiID") IN (SELECT (tuple)."SA0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete766779246<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert766779246<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete766779246<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0Bi" "AggregateOneEntityBinary"."SE0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-insert766779246<" 
	SELECT t.i, (t.tuple)."sE0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-update766779246<" 
	SELECT t.i, (t.old)."sE0Bi" as old, (t.new)."sE0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-update<" t
	WHERE NOT (t.old)."sE0Bi" IS NULL AND (t.new)."sE0Bi" IS NULL
	OR (t.old)."sE0Bi" IS NULL AND NOT (t.new)."sE0Bi" IS NULL
	OR NOT (t.old)."sE0Bi" IS NULL AND NOT (t.new)."sE0Bi" IS NULL AND (t.old)."sE0Bi" != (t.new)."sE0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Bi-delete766779246<" 
	SELECT t.i, (t.tuple)."sE0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."SA0C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0C0Bi_entity' AND t.typname = '-ngs_SA0C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-" AS "AggregateOneEntityBinary"."SA0C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."SA0C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-insert1859542341<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert1859542341<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-update1859542341<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C0Bi-delete1859542341<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete1859542341<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-insert1859542341<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert1859542341<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-update1859542341<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C0Bi-delete1859542341<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete1859542341<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0C0Bi" "AggregateOneEntityBinary"."SE0C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0C0Bi" ("SA0C0BiID", "p0C0Bi")
	SELECT (tuple)."SA0C0BiID", (tuple)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert1859542341<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0C0Bi" AS tbl
	WHERE 
		("SA0C0BiID") IN (SELECT (u.old)."SA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0C0Bi" AS tbl SET
		"SA0C0BiID" = (u.new)."SA0C0BiID", "p0C0Bi" = (u.new)."p0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0C0BiID" = (u.old)."SA0C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0C0Bi" ("SA0C0BiID", "p0C0Bi")
	SELECT (new)."SA0C0BiID", (new)."p0C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0C0Bi"
	WHERE ("SA0C0BiID") IN (SELECT (tuple)."SA0C0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete1859542341<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert1859542341<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete1859542341<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0C0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0C0Bi" "AggregateOneEntityBinary"."SE0C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert1859542341<" 
	SELECT t.i, (t.tuple)."sE0C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-update1859542341<" 
	SELECT t.i, (t.old)."sE0C0Bi" as old, (t.new)."sE0C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-update<" t
	WHERE NOT (t.old)."sE0C0Bi" IS NULL AND (t.new)."sE0C0Bi" IS NULL
	OR (t.old)."sE0C0Bi" IS NULL AND NOT (t.new)."sE0C0Bi" IS NULL
	OR NOT (t.old)."sE0C0Bi" IS NULL AND NOT (t.new)."sE0C0Bi" IS NULL AND (t.old)."sE0C0Bi" != (t.new)."sE0C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete1859542341<" 
	SELECT t.i, (t.tuple)."sE0C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0C0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."SA0C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0C1Bi_entity' AND t.typname = '-ngs_SA0C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-" AS "AggregateOneEntityBinary"."SA0C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."SA0C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-insert1859541380<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert1859541380<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-update1859541380<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0C1Bi-delete1859541380<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete1859541380<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-insert1859541380<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert1859541380<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-update1859541380<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0C1Bi-delete1859541380<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete1859541380<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0C1Bi" "AggregateOneEntityBinary"."SE0C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0C1Bi" ("SA0C1BiID", "p0C1Bi")
	SELECT (tuple)."SA0C1BiID", (tuple)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert1859541380<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0C1Bi" AS tbl
	WHERE 
		("SA0C1BiID") IN (SELECT (u.old)."SA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0C1Bi" AS tbl SET
		"SA0C1BiID" = (u.new)."SA0C1BiID", "p0C1Bi" = (u.new)."p0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0C1BiID" = (u.old)."SA0C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0C1Bi" ("SA0C1BiID", "p0C1Bi")
	SELECT (new)."SA0C1BiID", (new)."p0C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0C1Bi"
	WHERE ("SA0C1BiID") IN (SELECT (tuple)."SA0C1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete1859541380<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert1859541380<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete1859541380<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0C1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0C1Bi" "AggregateOneEntityBinary"."SE0C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert1859541380<" 
	SELECT t.i, (t.tuple)."sE0C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-update1859541380<" 
	SELECT t.i, (t.old)."sE0C1Bi" as old, (t.new)."sE0C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-update<" t
	WHERE NOT (t.old)."sE0C1Bi" IS NULL AND (t.new)."sE0C1Bi" IS NULL
	OR (t.old)."sE0C1Bi" IS NULL AND NOT (t.new)."sE0C1Bi" IS NULL
	OR NOT (t.old)."sE0C1Bi" IS NULL AND NOT (t.new)."sE0C1Bi" IS NULL AND (t.old)."sE0C1Bi" != (t.new)."sE0C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete1859541380<" 
	SELECT t.i, (t.tuple)."sE0C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0C1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."SA0K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0K0Bi_entity' AND t.typname = '-ngs_SA0K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-" AS "AggregateOneEntityBinary"."SA0K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."SA0K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-insert1859304013<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert1859304013<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-update1859304013<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K0Bi-delete1859304013<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete1859304013<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-insert1859304013<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert1859304013<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-update1859304013<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K0Bi-delete1859304013<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete1859304013<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0K0Bi" "AggregateOneEntityBinary"."SE0K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0K0Bi" ("SA0K0BiID", "p0K0Bi")
	SELECT (tuple)."SA0K0BiID", (tuple)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert1859304013<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0K0Bi" AS tbl
	WHERE 
		("SA0K0BiID") IN (SELECT (u.old)."SA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0K0Bi" AS tbl SET
		"SA0K0BiID" = (u.new)."SA0K0BiID", "p0K0Bi" = (u.new)."p0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0K0BiID" = (u.old)."SA0K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0K0Bi" ("SA0K0BiID", "p0K0Bi")
	SELECT (new)."SA0K0BiID", (new)."p0K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0K0Bi"
	WHERE ("SA0K0BiID") IN (SELECT (tuple)."SA0K0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete1859304013<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert1859304013<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete1859304013<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0K0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0K0Bi" "AggregateOneEntityBinary"."SE0K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert1859304013<" 
	SELECT t.i, (t.tuple)."sE0K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-update1859304013<" 
	SELECT t.i, (t.old)."sE0K0Bi" as old, (t.new)."sE0K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-update<" t
	WHERE NOT (t.old)."sE0K0Bi" IS NULL AND (t.new)."sE0K0Bi" IS NULL
	OR (t.old)."sE0K0Bi" IS NULL AND NOT (t.new)."sE0K0Bi" IS NULL
	OR NOT (t.old)."sE0K0Bi" IS NULL AND NOT (t.new)."sE0K0Bi" IS NULL AND (t.old)."sE0K0Bi" != (t.new)."sE0K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete1859304013<" 
	SELECT t.i, (t.tuple)."sE0K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0K0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."SA0K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0K1Bi_entity' AND t.typname = '-ngs_SA0K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-" AS "AggregateOneEntityBinary"."SA0K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."SA0K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-insert1859303052<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert1859303052<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-update1859303052<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0K1Bi-delete1859303052<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete1859303052<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-insert1859303052<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert1859303052<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-update1859303052<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0K1Bi-delete1859303052<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete1859303052<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0K1Bi" "AggregateOneEntityBinary"."SE0K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0K1Bi" ("SA0K1BiID", "p0K1Bi")
	SELECT (tuple)."SA0K1BiID", (tuple)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert1859303052<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0K1Bi" AS tbl
	WHERE 
		("SA0K1BiID") IN (SELECT (u.old)."SA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0K1Bi" AS tbl SET
		"SA0K1BiID" = (u.new)."SA0K1BiID", "p0K1Bi" = (u.new)."p0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0K1BiID" = (u.old)."SA0K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0K1Bi" ("SA0K1BiID", "p0K1Bi")
	SELECT (new)."SA0K1BiID", (new)."p0K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0K1Bi"
	WHERE ("SA0K1BiID") IN (SELECT (tuple)."SA0K1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete1859303052<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert1859303052<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete1859303052<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0K1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0K1Bi" "AggregateOneEntityBinary"."SE0K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert1859303052<" 
	SELECT t.i, (t.tuple)."sE0K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-update1859303052<" 
	SELECT t.i, (t.old)."sE0K1Bi" as old, (t.new)."sE0K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-update<" t
	WHERE NOT (t.old)."sE0K1Bi" IS NULL AND (t.new)."sE0K1Bi" IS NULL
	OR (t.old)."sE0K1Bi" IS NULL AND NOT (t.new)."sE0K1Bi" IS NULL
	OR NOT (t.old)."sE0K1Bi" IS NULL AND NOT (t.new)."sE0K1Bi" IS NULL AND (t.old)."sE0K1Bi" != (t.new)."sE0K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete1859303052<" 
	SELECT t.i, (t.tuple)."sE0K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0K1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."SA0L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0L0Bi_entity' AND t.typname = '-ngs_SA0L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-" AS "AggregateOneEntityBinary"."SA0L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."SA0L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-insert1859274222<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert1859274222<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-update1859274222<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L0Bi-delete1859274222<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete1859274222<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-insert1859274222<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert1859274222<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-update1859274222<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L0Bi-delete1859274222<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete1859274222<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0L0Bi" "AggregateOneEntityBinary"."SE0L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0L0Bi" ("SA0L0BiID", "p0L0Bi")
	SELECT (tuple)."SA0L0BiID", (tuple)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert1859274222<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0L0Bi" AS tbl
	WHERE 
		("SA0L0BiID") IN (SELECT (u.old)."SA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0L0Bi" AS tbl SET
		"SA0L0BiID" = (u.new)."SA0L0BiID", "p0L0Bi" = (u.new)."p0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0L0BiID" = (u.old)."SA0L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0L0Bi" ("SA0L0BiID", "p0L0Bi")
	SELECT (new)."SA0L0BiID", (new)."p0L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0L0Bi"
	WHERE ("SA0L0BiID") IN (SELECT (tuple)."SA0L0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete1859274222<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert1859274222<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete1859274222<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0L0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0L0Bi" "AggregateOneEntityBinary"."SE0L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert1859274222<" 
	SELECT t.i, (t.tuple)."sE0L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-update1859274222<" 
	SELECT t.i, (t.old)."sE0L0Bi" as old, (t.new)."sE0L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-update<" t
	WHERE NOT (t.old)."sE0L0Bi" IS NULL AND (t.new)."sE0L0Bi" IS NULL
	OR (t.old)."sE0L0Bi" IS NULL AND NOT (t.new)."sE0L0Bi" IS NULL
	OR NOT (t.old)."sE0L0Bi" IS NULL AND NOT (t.new)."sE0L0Bi" IS NULL AND (t.old)."sE0L0Bi" != (t.new)."sE0L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete1859274222<" 
	SELECT t.i, (t.tuple)."sE0L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0L0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."SA0L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0L1Bi_entity' AND t.typname = '-ngs_SA0L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-" AS "AggregateOneEntityBinary"."SA0L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."SA0L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-insert1859273261<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert1859273261<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-update1859273261<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0L1Bi-delete1859273261<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete1859273261<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-insert1859273261<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert1859273261<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-update1859273261<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0L1Bi-delete1859273261<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete1859273261<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0L1Bi" "AggregateOneEntityBinary"."SE0L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0L1Bi" ("SA0L1BiID", "p0L1Bi")
	SELECT (tuple)."SA0L1BiID", (tuple)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert1859273261<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0L1Bi" AS tbl
	WHERE 
		("SA0L1BiID") IN (SELECT (u.old)."SA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0L1Bi" AS tbl SET
		"SA0L1BiID" = (u.new)."SA0L1BiID", "p0L1Bi" = (u.new)."p0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0L1BiID" = (u.old)."SA0L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0L1Bi" ("SA0L1BiID", "p0L1Bi")
	SELECT (new)."SA0L1BiID", (new)."p0L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0L1Bi"
	WHERE ("SA0L1BiID") IN (SELECT (tuple)."SA0L1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete1859273261<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert1859273261<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete1859273261<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0L1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0L1Bi" "AggregateOneEntityBinary"."SE0L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert1859273261<" 
	SELECT t.i, (t.tuple)."sE0L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-update1859273261<" 
	SELECT t.i, (t.old)."sE0L1Bi" as old, (t.new)."sE0L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-update<" t
	WHERE NOT (t.old)."sE0L1Bi" IS NULL AND (t.new)."sE0L1Bi" IS NULL
	OR (t.old)."sE0L1Bi" IS NULL AND NOT (t.new)."sE0L1Bi" IS NULL
	OR NOT (t.old)."sE0L1Bi" IS NULL AND NOT (t.new)."sE0L1Bi" IS NULL AND (t.old)."sE0L1Bi" != (t.new)."sE0L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete1859273261<" 
	SELECT t.i, (t.tuple)."sE0L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0L1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."SA0Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0Q1Bi_entity' AND t.typname = '-ngs_SA0Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-" AS "AggregateOneEntityBinary"."SA0Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."SA0Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-insert1859124306<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert1859124306<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-update1859124306<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0Q1Bi-delete1859124306<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete1859124306<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-insert1859124306<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert1859124306<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-update1859124306<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0Q1Bi-delete1859124306<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete1859124306<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0Q1Bi" "AggregateOneEntityBinary"."SE0Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0Q1Bi" ("SA0Q1BiID", "p0Q1Bi")
	SELECT (tuple)."SA0Q1BiID", (tuple)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert1859124306<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0Q1Bi" AS tbl
	WHERE 
		("SA0Q1BiID") IN (SELECT (u.old)."SA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0Q1Bi" AS tbl SET
		"SA0Q1BiID" = (u.new)."SA0Q1BiID", "p0Q1Bi" = (u.new)."p0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0Q1BiID" = (u.old)."SA0Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0Q1Bi" ("SA0Q1BiID", "p0Q1Bi")
	SELECT (new)."SA0Q1BiID", (new)."p0Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0Q1Bi"
	WHERE ("SA0Q1BiID") IN (SELECT (tuple)."SA0Q1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete1859124306<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert1859124306<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete1859124306<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0Q1Bi" "AggregateOneEntityBinary"."SE0Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert1859124306<" 
	SELECT t.i, (t.tuple)."sE0Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update1859124306<" 
	SELECT t.i, (t.old)."sE0Q1Bi" as old, (t.new)."sE0Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-update<" t
	WHERE NOT (t.old)."sE0Q1Bi" IS NULL AND (t.new)."sE0Q1Bi" IS NULL
	OR (t.old)."sE0Q1Bi" IS NULL AND NOT (t.new)."sE0Q1Bi" IS NULL
	OR NOT (t.old)."sE0Q1Bi" IS NULL AND NOT (t.new)."sE0Q1Bi" IS NULL AND (t.old)."sE0Q1Bi" != (t.new)."sE0Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete1859124306<" 
	SELECT t.i, (t.tuple)."sE0Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0Q1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."SA0S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0S0Bi_entity' AND t.typname = '-ngs_SA0S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-" AS "AggregateOneEntityBinary"."SA0S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."SA0S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-insert1859065685<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert1859065685<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-update1859065685<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S0Bi-delete1859065685<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete1859065685<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-insert1859065685<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert1859065685<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-update1859065685<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S0Bi-delete1859065685<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete1859065685<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0S0Bi" "AggregateOneEntityBinary"."SE0S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0S0Bi" ("SA0S0BiID", "p0S0Bi")
	SELECT (tuple)."SA0S0BiID", (tuple)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert1859065685<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0S0Bi" AS tbl
	WHERE 
		("SA0S0BiID") IN (SELECT (u.old)."SA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0S0Bi" AS tbl SET
		"SA0S0BiID" = (u.new)."SA0S0BiID", "p0S0Bi" = (u.new)."p0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0S0BiID" = (u.old)."SA0S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0S0Bi" ("SA0S0BiID", "p0S0Bi")
	SELECT (new)."SA0S0BiID", (new)."p0S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0S0Bi"
	WHERE ("SA0S0BiID") IN (SELECT (tuple)."SA0S0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete1859065685<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert1859065685<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete1859065685<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0S0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0S0Bi" "AggregateOneEntityBinary"."SE0S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert1859065685<" 
	SELECT t.i, (t.tuple)."sE0S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-update1859065685<" 
	SELECT t.i, (t.old)."sE0S0Bi" as old, (t.new)."sE0S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-update<" t
	WHERE NOT (t.old)."sE0S0Bi" IS NULL AND (t.new)."sE0S0Bi" IS NULL
	OR (t.old)."sE0S0Bi" IS NULL AND NOT (t.new)."sE0S0Bi" IS NULL
	OR NOT (t.old)."sE0S0Bi" IS NULL AND NOT (t.new)."sE0S0Bi" IS NULL AND (t.old)."sE0S0Bi" != (t.new)."sE0S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete1859065685<" 
	SELECT t.i, (t.tuple)."sE0S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0S0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."SA0S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0S1Bi_entity' AND t.typname = '-ngs_SA0S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-" AS "AggregateOneEntityBinary"."SA0S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."SA0S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-insert1859064724<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert1859064724<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-update1859064724<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0S1Bi-delete1859064724<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete1859064724<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-insert1859064724<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert1859064724<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-update1859064724<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0S1Bi-delete1859064724<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete1859064724<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0S1Bi" "AggregateOneEntityBinary"."SE0S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0S1Bi" ("SA0S1BiID", "p0S1Bi")
	SELECT (tuple)."SA0S1BiID", (tuple)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert1859064724<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0S1Bi" AS tbl
	WHERE 
		("SA0S1BiID") IN (SELECT (u.old)."SA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0S1Bi" AS tbl SET
		"SA0S1BiID" = (u.new)."SA0S1BiID", "p0S1Bi" = (u.new)."p0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0S1BiID" = (u.old)."SA0S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0S1Bi" ("SA0S1BiID", "p0S1Bi")
	SELECT (new)."SA0S1BiID", (new)."p0S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0S1Bi"
	WHERE ("SA0S1BiID") IN (SELECT (tuple)."SA0S1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete1859064724<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert1859064724<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete1859064724<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0S1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0S1Bi" "AggregateOneEntityBinary"."SE0S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert1859064724<" 
	SELECT t.i, (t.tuple)."sE0S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-update1859064724<" 
	SELECT t.i, (t.old)."sE0S1Bi" as old, (t.new)."sE0S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-update<" t
	WHERE NOT (t.old)."sE0S1Bi" IS NULL AND (t.new)."sE0S1Bi" IS NULL
	OR (t.old)."sE0S1Bi" IS NULL AND NOT (t.new)."sE0S1Bi" IS NULL
	OR NOT (t.old)."sE0S1Bi" IS NULL AND NOT (t.new)."sE0S1Bi" IS NULL AND (t.old)."sE0S1Bi" != (t.new)."sE0S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete1859064724<" 
	SELECT t.i, (t.tuple)."sE0S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0S1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."SA0V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0V0Bi_entity' AND t.typname = '-ngs_SA0V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-" AS "AggregateOneEntityBinary"."SA0V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."SA0V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-insert1858976312<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert1858976312<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-update1858976312<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V0Bi-delete1858976312<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete1858976312<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-insert1858976312<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert1858976312<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-update1858976312<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V0Bi-delete1858976312<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete1858976312<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0V0Bi" "AggregateOneEntityBinary"."SE0V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0V0Bi" ("SA0V0BiID", "p0V0Bi")
	SELECT (tuple)."SA0V0BiID", (tuple)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert1858976312<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0V0Bi" AS tbl
	WHERE 
		("SA0V0BiID") IN (SELECT (u.old)."SA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0V0Bi" AS tbl SET
		"SA0V0BiID" = (u.new)."SA0V0BiID", "p0V0Bi" = (u.new)."p0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0V0BiID" = (u.old)."SA0V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0V0Bi" ("SA0V0BiID", "p0V0Bi")
	SELECT (new)."SA0V0BiID", (new)."p0V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0V0Bi"
	WHERE ("SA0V0BiID") IN (SELECT (tuple)."SA0V0BiID" FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete1858976312<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert1858976312<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete1858976312<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0V0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0V0Bi" "AggregateOneEntityBinary"."SE0V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert1858976312<" 
	SELECT t.i, (t.tuple)."sE0V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-insert<" t
	WHERE NOT (t.tuple)."sE0V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-update1858976312<" 
	SELECT t.i, (t.old)."sE0V0Bi" as old, (t.new)."sE0V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-update<" t
	WHERE NOT (t.old)."sE0V0Bi" IS NULL AND (t.new)."sE0V0Bi" IS NULL
	OR (t.old)."sE0V0Bi" IS NULL AND NOT (t.new)."sE0V0Bi" IS NULL
	OR NOT (t.old)."sE0V0Bi" IS NULL AND NOT (t.new)."sE0V0Bi" IS NULL AND (t.old)."sE0V0Bi" != (t.new)."sE0V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete1858976312<" 
	SELECT t.i, (t.tuple)."sE0V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0V0Bi-delete<" t
	WHERE NOT (t.tuple)."sE0V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA0V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA0V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."SA0V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA0V1Bi_entity' AND t.typname = '-ngs_SA0V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-" AS "AggregateOneEntityBinary"."SA0V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA0V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."SA0V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA0V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA0V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA0V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA0V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-insert1858975351<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert1858975351<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-update1858975351<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA0V1Bi-delete1858975351<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete1858975351<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-insert1858975351<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert1858975351<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-update1858975351<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE0V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA0V1Bi-delete1858975351<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete1858975351<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE0V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA0V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0V1Bi" "AggregateOneEntityBinary"."SE0V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA0V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE0V1Bi" ("SA0V1BiID", "p0V1Bi")
	SELECT (tuple)."SA0V1BiID", (tuple)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert1858975351<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA0V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE0V1Bi" AS tbl
	WHERE 
		("SA0V1BiID") IN (SELECT (u.old)."SA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE0V1Bi" AS tbl SET
		"SA0V1BiID" = (u.new)."SA0V1BiID", "p0V1Bi" = (u.new)."p0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA0V1BiID" = (u.old)."SA0V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE0V1Bi" ("SA0V1BiID", "p0V1Bi")
	SELECT (new)."SA0V1BiID", (new)."p0V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE0V1Bi"
	WHERE ("SA0V1BiID") IN (SELECT (tuple)."SA0V1BiID" FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete1858975351<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA0V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA0V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert1858975351<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete1858975351<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA0V1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA0V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA0V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA0V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA0V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE0V1Bi" "AggregateOneEntityBinary"."SE0V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert1858975351<" 
	SELECT t.i, (t.tuple)."sE0V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-insert<" t
	WHERE NOT (t.tuple)."sE0V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-update1858975351<" 
	SELECT t.i, (t.old)."sE0V1Bi" as old, (t.new)."sE0V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-update<" t
	WHERE NOT (t.old)."sE0V1Bi" IS NULL AND (t.new)."sE0V1Bi" IS NULL
	OR (t.old)."sE0V1Bi" IS NULL AND NOT (t.new)."sE0V1Bi" IS NULL
	OR NOT (t.old)."sE0V1Bi" IS NULL AND NOT (t.new)."sE0V1Bi" IS NULL AND (t.old)."sE0V1Bi" != (t.new)."sE0V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete1858975351<" 
	SELECT t.i, (t.tuple)."sE0V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA0V1Bi-delete<" t
	WHERE NOT (t.tuple)."sE0V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA0V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1A0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1A0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."SA1A0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1A0Bi_entity' AND t.typname = '-ngs_SA1A0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-" AS "AggregateOneEntityBinary"."SA1A0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1A0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."SA1A0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1A0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1A0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1A0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1A0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-insert1858678402<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert1858678402<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-update1858678402<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A0Bi-delete1858678402<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete1858678402<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-insert1858678402<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert1858678402<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-update1858678402<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1A0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A0Bi-delete1858678402<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete1858678402<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1A0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1A0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1A0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1A0Bi" "AggregateOneEntityBinary"."SE1A0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1A0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1A0Bi" ("SA1A0BiID", "p1A0Bi")
	SELECT (tuple)."SA1A0BiID", (tuple)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert1858678402<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1A0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1A0Bi" AS tbl
	WHERE 
		("SA1A0BiID") IN (SELECT (u.old)."SA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1A0Bi" AS tbl SET
		"SA1A0BiID" = (u.new)."SA1A0BiID", "p1A0Bi" = (u.new)."p1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1A0BiID" = (u.old)."SA1A0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1A0Bi" ("SA1A0BiID", "p1A0Bi")
	SELECT (new)."SA1A0BiID", (new)."p1A0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1A0Bi"
	WHERE ("SA1A0BiID") IN (SELECT (tuple)."SA1A0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete1858678402<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1A0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert1858678402<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete1858678402<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1A0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1A0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1A0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1A0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1A0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1A0Bi" "AggregateOneEntityBinary"."SE1A0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert1858678402<" 
	SELECT t.i, (t.tuple)."sE1A0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1A0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-update1858678402<" 
	SELECT t.i, (t.old)."sE1A0Bi" as old, (t.new)."sE1A0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-update<" t
	WHERE NOT (t.old)."sE1A0Bi" IS NULL AND (t.new)."sE1A0Bi" IS NULL
	OR (t.old)."sE1A0Bi" IS NULL AND NOT (t.new)."sE1A0Bi" IS NULL
	OR NOT (t.old)."sE1A0Bi" IS NULL AND NOT (t.new)."sE1A0Bi" IS NULL AND (t.old)."sE1A0Bi" != (t.new)."sE1A0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete1858678402<" 
	SELECT t.i, (t.tuple)."sE1A0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1A0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1A0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1A0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1A1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1A1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."SA1A1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1A1Bi_entity' AND t.typname = '-ngs_SA1A1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-" AS "AggregateOneEntityBinary"."SA1A1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1A1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."SA1A1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1A1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1A1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1A1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1A1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-insert1858677441<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert1858677441<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-update1858677441<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1A1Bi-delete1858677441<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete1858677441<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-insert1858677441<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert1858677441<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-update1858677441<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1A1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1A1Bi-delete1858677441<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete1858677441<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1A1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1A1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1A1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1A1Bi" "AggregateOneEntityBinary"."SE1A1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1A1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1A1Bi" ("SA1A1BiID", "p1A1Bi")
	SELECT (tuple)."SA1A1BiID", (tuple)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert1858677441<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1A1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1A1Bi" AS tbl
	WHERE 
		("SA1A1BiID") IN (SELECT (u.old)."SA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1A1Bi" AS tbl SET
		"SA1A1BiID" = (u.new)."SA1A1BiID", "p1A1Bi" = (u.new)."p1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1A1BiID" = (u.old)."SA1A1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1A1Bi" ("SA1A1BiID", "p1A1Bi")
	SELECT (new)."SA1A1BiID", (new)."p1A1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1A1Bi"
	WHERE ("SA1A1BiID") IN (SELECT (tuple)."SA1A1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete1858677441<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1A1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1A1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert1858677441<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete1858677441<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1A1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1A1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1A1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1A1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1A1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1A1Bi" "AggregateOneEntityBinary"."SE1A1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert1858677441<" 
	SELECT t.i, (t.tuple)."sE1A1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1A1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-update1858677441<" 
	SELECT t.i, (t.old)."sE1A1Bi" as old, (t.new)."sE1A1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-update<" t
	WHERE NOT (t.old)."sE1A1Bi" IS NULL AND (t.new)."sE1A1Bi" IS NULL
	OR (t.old)."sE1A1Bi" IS NULL AND NOT (t.new)."sE1A1Bi" IS NULL
	OR NOT (t.old)."sE1A1Bi" IS NULL AND NOT (t.new)."sE1A1Bi" IS NULL AND (t.old)."sE1A1Bi" != (t.new)."sE1A1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete1858677441<" 
	SELECT t.i, (t.tuple)."sE1A1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1A1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1A1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1A1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."SA1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1Bi_entity' AND t.typname = '-ngs_SA1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1Bi_type-" AS "AggregateOneEntityBinary"."SA1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."SA1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-insert766780207<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-insert766780207<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-update766780207<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Bi-delete766780207<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Bi-delete766780207<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-insert766780207<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-insert766780207<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-update766780207<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Bi-delete766780207<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Bi-delete766780207<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1Bi" "AggregateOneEntityBinary"."SE1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1Bi" ("SA1BiID", "p1Bi")
	SELECT (tuple)."SA1BiID", (tuple)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert766780207<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1Bi" AS tbl
	WHERE 
		("SA1BiID") IN (SELECT (u.old)."SA1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1Bi" AS tbl SET
		"SA1BiID" = (u.new)."SA1BiID", "p1Bi" = (u.new)."p1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1BiID" = (u.old)."SA1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1Bi" ("SA1BiID", "p1Bi")
	SELECT (new)."SA1BiID", (new)."p1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1Bi"
	WHERE ("SA1BiID") IN (SELECT (tuple)."SA1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete766780207<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert766780207<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete766780207<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1Bi" "AggregateOneEntityBinary"."SE1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-insert766780207<" 
	SELECT t.i, (t.tuple)."sE1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-update766780207<" 
	SELECT t.i, (t.old)."sE1Bi" as old, (t.new)."sE1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-update<" t
	WHERE NOT (t.old)."sE1Bi" IS NULL AND (t.new)."sE1Bi" IS NULL
	OR (t.old)."sE1Bi" IS NULL AND NOT (t.new)."sE1Bi" IS NULL
	OR NOT (t.old)."sE1Bi" IS NULL AND NOT (t.new)."sE1Bi" IS NULL AND (t.old)."sE1Bi" != (t.new)."sE1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Bi-delete766780207<" 
	SELECT t.i, (t.tuple)."sE1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1C0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1C0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."SA1C0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1C0Bi_entity' AND t.typname = '-ngs_SA1C0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-" AS "AggregateOneEntityBinary"."SA1C0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1C0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."SA1C0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1C0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1C0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1C0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1C0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-insert1858618820<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert1858618820<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-update1858618820<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C0Bi-delete1858618820<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete1858618820<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-insert1858618820<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert1858618820<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-update1858618820<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1C0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C0Bi-delete1858618820<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete1858618820<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1C0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1C0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1C0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1C0Bi" "AggregateOneEntityBinary"."SE1C0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1C0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1C0Bi" ("SA1C0BiID", "p1C0Bi")
	SELECT (tuple)."SA1C0BiID", (tuple)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert1858618820<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1C0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1C0Bi" AS tbl
	WHERE 
		("SA1C0BiID") IN (SELECT (u.old)."SA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1C0Bi" AS tbl SET
		"SA1C0BiID" = (u.new)."SA1C0BiID", "p1C0Bi" = (u.new)."p1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1C0BiID" = (u.old)."SA1C0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1C0Bi" ("SA1C0BiID", "p1C0Bi")
	SELECT (new)."SA1C0BiID", (new)."p1C0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1C0Bi"
	WHERE ("SA1C0BiID") IN (SELECT (tuple)."SA1C0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete1858618820<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1C0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert1858618820<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete1858618820<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1C0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1C0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1C0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1C0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1C0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1C0Bi" "AggregateOneEntityBinary"."SE1C0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert1858618820<" 
	SELECT t.i, (t.tuple)."sE1C0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1C0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-update1858618820<" 
	SELECT t.i, (t.old)."sE1C0Bi" as old, (t.new)."sE1C0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-update<" t
	WHERE NOT (t.old)."sE1C0Bi" IS NULL AND (t.new)."sE1C0Bi" IS NULL
	OR (t.old)."sE1C0Bi" IS NULL AND NOT (t.new)."sE1C0Bi" IS NULL
	OR NOT (t.old)."sE1C0Bi" IS NULL AND NOT (t.new)."sE1C0Bi" IS NULL AND (t.old)."sE1C0Bi" != (t.new)."sE1C0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete1858618820<" 
	SELECT t.i, (t.tuple)."sE1C0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1C0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1C0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1C0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1C1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1C1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."SA1C1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1C1Bi_entity' AND t.typname = '-ngs_SA1C1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-" AS "AggregateOneEntityBinary"."SA1C1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1C1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."SA1C1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1C1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1C1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1C1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1C1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-insert1858617859<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert1858617859<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-update1858617859<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1C1Bi-delete1858617859<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete1858617859<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-insert1858617859<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert1858617859<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-update1858617859<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1C1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1C1Bi-delete1858617859<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete1858617859<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1C1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1C1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1C1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1C1Bi" "AggregateOneEntityBinary"."SE1C1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1C1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1C1Bi" ("SA1C1BiID", "p1C1Bi")
	SELECT (tuple)."SA1C1BiID", (tuple)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert1858617859<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1C1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1C1Bi" AS tbl
	WHERE 
		("SA1C1BiID") IN (SELECT (u.old)."SA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1C1Bi" AS tbl SET
		"SA1C1BiID" = (u.new)."SA1C1BiID", "p1C1Bi" = (u.new)."p1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1C1BiID" = (u.old)."SA1C1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1C1Bi" ("SA1C1BiID", "p1C1Bi")
	SELECT (new)."SA1C1BiID", (new)."p1C1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1C1Bi"
	WHERE ("SA1C1BiID") IN (SELECT (tuple)."SA1C1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete1858617859<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1C1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1C1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert1858617859<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete1858617859<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1C1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1C1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1C1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1C1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1C1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1C1Bi" "AggregateOneEntityBinary"."SE1C1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert1858617859<" 
	SELECT t.i, (t.tuple)."sE1C1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1C1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-update1858617859<" 
	SELECT t.i, (t.old)."sE1C1Bi" as old, (t.new)."sE1C1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-update<" t
	WHERE NOT (t.old)."sE1C1Bi" IS NULL AND (t.new)."sE1C1Bi" IS NULL
	OR (t.old)."sE1C1Bi" IS NULL AND NOT (t.new)."sE1C1Bi" IS NULL
	OR NOT (t.old)."sE1C1Bi" IS NULL AND NOT (t.new)."sE1C1Bi" IS NULL AND (t.old)."sE1C1Bi" != (t.new)."sE1C1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete1858617859<" 
	SELECT t.i, (t.tuple)."sE1C1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1C1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1C1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1C1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1K0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1K0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."SA1K0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1K0Bi_entity' AND t.typname = '-ngs_SA1K0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-" AS "AggregateOneEntityBinary"."SA1K0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1K0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."SA1K0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1K0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1K0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1K0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1K0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-insert1858380492<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert1858380492<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-update1858380492<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K0Bi-delete1858380492<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete1858380492<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-insert1858380492<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert1858380492<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-update1858380492<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1K0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K0Bi-delete1858380492<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete1858380492<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1K0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1K0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1K0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1K0Bi" "AggregateOneEntityBinary"."SE1K0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1K0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1K0Bi" ("SA1K0BiID", "p1K0Bi")
	SELECT (tuple)."SA1K0BiID", (tuple)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert1858380492<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1K0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1K0Bi" AS tbl
	WHERE 
		("SA1K0BiID") IN (SELECT (u.old)."SA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1K0Bi" AS tbl SET
		"SA1K0BiID" = (u.new)."SA1K0BiID", "p1K0Bi" = (u.new)."p1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1K0BiID" = (u.old)."SA1K0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1K0Bi" ("SA1K0BiID", "p1K0Bi")
	SELECT (new)."SA1K0BiID", (new)."p1K0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1K0Bi"
	WHERE ("SA1K0BiID") IN (SELECT (tuple)."SA1K0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete1858380492<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1K0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert1858380492<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete1858380492<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1K0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1K0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1K0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1K0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1K0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1K0Bi" "AggregateOneEntityBinary"."SE1K0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert1858380492<" 
	SELECT t.i, (t.tuple)."sE1K0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1K0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-update1858380492<" 
	SELECT t.i, (t.old)."sE1K0Bi" as old, (t.new)."sE1K0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-update<" t
	WHERE NOT (t.old)."sE1K0Bi" IS NULL AND (t.new)."sE1K0Bi" IS NULL
	OR (t.old)."sE1K0Bi" IS NULL AND NOT (t.new)."sE1K0Bi" IS NULL
	OR NOT (t.old)."sE1K0Bi" IS NULL AND NOT (t.new)."sE1K0Bi" IS NULL AND (t.old)."sE1K0Bi" != (t.new)."sE1K0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete1858380492<" 
	SELECT t.i, (t.tuple)."sE1K0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1K0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1K0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1K0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1K1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1K1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."SA1K1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1K1Bi_entity' AND t.typname = '-ngs_SA1K1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-" AS "AggregateOneEntityBinary"."SA1K1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1K1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."SA1K1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1K1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1K1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1K1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1K1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-insert1858379531<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert1858379531<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-update1858379531<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1K1Bi-delete1858379531<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete1858379531<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-insert1858379531<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert1858379531<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-update1858379531<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1K1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1K1Bi-delete1858379531<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete1858379531<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1K1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1K1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1K1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1K1Bi" "AggregateOneEntityBinary"."SE1K1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1K1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1K1Bi" ("SA1K1BiID", "p1K1Bi")
	SELECT (tuple)."SA1K1BiID", (tuple)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert1858379531<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1K1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1K1Bi" AS tbl
	WHERE 
		("SA1K1BiID") IN (SELECT (u.old)."SA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1K1Bi" AS tbl SET
		"SA1K1BiID" = (u.new)."SA1K1BiID", "p1K1Bi" = (u.new)."p1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1K1BiID" = (u.old)."SA1K1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1K1Bi" ("SA1K1BiID", "p1K1Bi")
	SELECT (new)."SA1K1BiID", (new)."p1K1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1K1Bi"
	WHERE ("SA1K1BiID") IN (SELECT (tuple)."SA1K1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete1858379531<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1K1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1K1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert1858379531<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete1858379531<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1K1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1K1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1K1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1K1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1K1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1K1Bi" "AggregateOneEntityBinary"."SE1K1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert1858379531<" 
	SELECT t.i, (t.tuple)."sE1K1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1K1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-update1858379531<" 
	SELECT t.i, (t.old)."sE1K1Bi" as old, (t.new)."sE1K1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-update<" t
	WHERE NOT (t.old)."sE1K1Bi" IS NULL AND (t.new)."sE1K1Bi" IS NULL
	OR (t.old)."sE1K1Bi" IS NULL AND NOT (t.new)."sE1K1Bi" IS NULL
	OR NOT (t.old)."sE1K1Bi" IS NULL AND NOT (t.new)."sE1K1Bi" IS NULL AND (t.old)."sE1K1Bi" != (t.new)."sE1K1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete1858379531<" 
	SELECT t.i, (t.tuple)."sE1K1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1K1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1K1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1K1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1L0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1L0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."SA1L0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1L0Bi_entity' AND t.typname = '-ngs_SA1L0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-" AS "AggregateOneEntityBinary"."SA1L0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1L0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."SA1L0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1L0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1L0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1L0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1L0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-insert1858350701<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert1858350701<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-update1858350701<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L0Bi-delete1858350701<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete1858350701<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-insert1858350701<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert1858350701<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-update1858350701<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1L0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L0Bi-delete1858350701<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete1858350701<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1L0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1L0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1L0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1L0Bi" "AggregateOneEntityBinary"."SE1L0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1L0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1L0Bi" ("SA1L0BiID", "p1L0Bi")
	SELECT (tuple)."SA1L0BiID", (tuple)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert1858350701<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1L0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1L0Bi" AS tbl
	WHERE 
		("SA1L0BiID") IN (SELECT (u.old)."SA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1L0Bi" AS tbl SET
		"SA1L0BiID" = (u.new)."SA1L0BiID", "p1L0Bi" = (u.new)."p1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1L0BiID" = (u.old)."SA1L0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1L0Bi" ("SA1L0BiID", "p1L0Bi")
	SELECT (new)."SA1L0BiID", (new)."p1L0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1L0Bi"
	WHERE ("SA1L0BiID") IN (SELECT (tuple)."SA1L0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete1858350701<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1L0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert1858350701<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete1858350701<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1L0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1L0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1L0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1L0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1L0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1L0Bi" "AggregateOneEntityBinary"."SE1L0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert1858350701<" 
	SELECT t.i, (t.tuple)."sE1L0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1L0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-update1858350701<" 
	SELECT t.i, (t.old)."sE1L0Bi" as old, (t.new)."sE1L0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-update<" t
	WHERE NOT (t.old)."sE1L0Bi" IS NULL AND (t.new)."sE1L0Bi" IS NULL
	OR (t.old)."sE1L0Bi" IS NULL AND NOT (t.new)."sE1L0Bi" IS NULL
	OR NOT (t.old)."sE1L0Bi" IS NULL AND NOT (t.new)."sE1L0Bi" IS NULL AND (t.old)."sE1L0Bi" != (t.new)."sE1L0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete1858350701<" 
	SELECT t.i, (t.tuple)."sE1L0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1L0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1L0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1L0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1L1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1L1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."SA1L1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1L1Bi_entity' AND t.typname = '-ngs_SA1L1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-" AS "AggregateOneEntityBinary"."SA1L1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1L1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."SA1L1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1L1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1L1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1L1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1L1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-insert1858349740<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert1858349740<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-update1858349740<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1L1Bi-delete1858349740<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete1858349740<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-insert1858349740<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert1858349740<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-update1858349740<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1L1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1L1Bi-delete1858349740<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete1858349740<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1L1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1L1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1L1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1L1Bi" "AggregateOneEntityBinary"."SE1L1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1L1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1L1Bi" ("SA1L1BiID", "p1L1Bi")
	SELECT (tuple)."SA1L1BiID", (tuple)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert1858349740<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1L1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1L1Bi" AS tbl
	WHERE 
		("SA1L1BiID") IN (SELECT (u.old)."SA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1L1Bi" AS tbl SET
		"SA1L1BiID" = (u.new)."SA1L1BiID", "p1L1Bi" = (u.new)."p1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1L1BiID" = (u.old)."SA1L1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1L1Bi" ("SA1L1BiID", "p1L1Bi")
	SELECT (new)."SA1L1BiID", (new)."p1L1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1L1Bi"
	WHERE ("SA1L1BiID") IN (SELECT (tuple)."SA1L1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete1858349740<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1L1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1L1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert1858349740<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete1858349740<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1L1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1L1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1L1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1L1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1L1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1L1Bi" "AggregateOneEntityBinary"."SE1L1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert1858349740<" 
	SELECT t.i, (t.tuple)."sE1L1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1L1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-update1858349740<" 
	SELECT t.i, (t.old)."sE1L1Bi" as old, (t.new)."sE1L1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-update<" t
	WHERE NOT (t.old)."sE1L1Bi" IS NULL AND (t.new)."sE1L1Bi" IS NULL
	OR (t.old)."sE1L1Bi" IS NULL AND NOT (t.new)."sE1L1Bi" IS NULL
	OR NOT (t.old)."sE1L1Bi" IS NULL AND NOT (t.new)."sE1L1Bi" IS NULL AND (t.old)."sE1L1Bi" != (t.new)."sE1L1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete1858349740<" 
	SELECT t.i, (t.tuple)."sE1L1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1L1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1L1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1L1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1Q1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1Q1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."SA1Q1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1Q1Bi_entity' AND t.typname = '-ngs_SA1Q1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-" AS "AggregateOneEntityBinary"."SA1Q1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1Q1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."SA1Q1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1Q1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1Q1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1Q1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1Q1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-insert1858200785<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert1858200785<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-update1858200785<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1Q1Bi-delete1858200785<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete1858200785<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-insert1858200785<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert1858200785<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-update1858200785<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1Q1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1Q1Bi-delete1858200785<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete1858200785<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1Q1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1Q1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1Q1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1Q1Bi" "AggregateOneEntityBinary"."SE1Q1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1Q1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1Q1Bi" ("SA1Q1BiID", "p1Q1Bi")
	SELECT (tuple)."SA1Q1BiID", (tuple)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert1858200785<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1Q1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1Q1Bi" AS tbl
	WHERE 
		("SA1Q1BiID") IN (SELECT (u.old)."SA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1Q1Bi" AS tbl SET
		"SA1Q1BiID" = (u.new)."SA1Q1BiID", "p1Q1Bi" = (u.new)."p1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1Q1BiID" = (u.old)."SA1Q1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1Q1Bi" ("SA1Q1BiID", "p1Q1Bi")
	SELECT (new)."SA1Q1BiID", (new)."p1Q1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1Q1Bi"
	WHERE ("SA1Q1BiID") IN (SELECT (tuple)."SA1Q1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete1858200785<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1Q1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Q1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Q1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Q1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1Q1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert1858200785<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete1858200785<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1Q1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1Q1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1Q1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1Q1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1Q1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1Q1Bi" "AggregateOneEntityBinary"."SE1Q1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert1858200785<" 
	SELECT t.i, (t.tuple)."sE1Q1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1Q1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update1858200785<" 
	SELECT t.i, (t.old)."sE1Q1Bi" as old, (t.new)."sE1Q1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-update<" t
	WHERE NOT (t.old)."sE1Q1Bi" IS NULL AND (t.new)."sE1Q1Bi" IS NULL
	OR (t.old)."sE1Q1Bi" IS NULL AND NOT (t.new)."sE1Q1Bi" IS NULL
	OR NOT (t.old)."sE1Q1Bi" IS NULL AND NOT (t.new)."sE1Q1Bi" IS NULL AND (t.old)."sE1Q1Bi" != (t.new)."sE1Q1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete1858200785<" 
	SELECT t.i, (t.tuple)."sE1Q1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1Q1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1Q1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1Q1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1S0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1S0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."SA1S0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1S0Bi_entity' AND t.typname = '-ngs_SA1S0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-" AS "AggregateOneEntityBinary"."SA1S0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1S0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."SA1S0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1S0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1S0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1S0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1S0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-insert1858142164<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert1858142164<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-update1858142164<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S0Bi-delete1858142164<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete1858142164<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-insert1858142164<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert1858142164<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-update1858142164<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1S0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S0Bi-delete1858142164<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete1858142164<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1S0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1S0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1S0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1S0Bi" "AggregateOneEntityBinary"."SE1S0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1S0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1S0Bi" ("SA1S0BiID", "p1S0Bi")
	SELECT (tuple)."SA1S0BiID", (tuple)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert1858142164<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1S0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1S0Bi" AS tbl
	WHERE 
		("SA1S0BiID") IN (SELECT (u.old)."SA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1S0Bi" AS tbl SET
		"SA1S0BiID" = (u.new)."SA1S0BiID", "p1S0Bi" = (u.new)."p1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1S0BiID" = (u.old)."SA1S0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1S0Bi" ("SA1S0BiID", "p1S0Bi")
	SELECT (new)."SA1S0BiID", (new)."p1S0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1S0Bi"
	WHERE ("SA1S0BiID") IN (SELECT (tuple)."SA1S0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete1858142164<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1S0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert1858142164<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete1858142164<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1S0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1S0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1S0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1S0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1S0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1S0Bi" "AggregateOneEntityBinary"."SE1S0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert1858142164<" 
	SELECT t.i, (t.tuple)."sE1S0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1S0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-update1858142164<" 
	SELECT t.i, (t.old)."sE1S0Bi" as old, (t.new)."sE1S0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-update<" t
	WHERE NOT (t.old)."sE1S0Bi" IS NULL AND (t.new)."sE1S0Bi" IS NULL
	OR (t.old)."sE1S0Bi" IS NULL AND NOT (t.new)."sE1S0Bi" IS NULL
	OR NOT (t.old)."sE1S0Bi" IS NULL AND NOT (t.new)."sE1S0Bi" IS NULL AND (t.old)."sE1S0Bi" != (t.new)."sE1S0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete1858142164<" 
	SELECT t.i, (t.tuple)."sE1S0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1S0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1S0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1S0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1S1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1S1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."SA1S1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1S1Bi_entity' AND t.typname = '-ngs_SA1S1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-" AS "AggregateOneEntityBinary"."SA1S1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1S1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."SA1S1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1S1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1S1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1S1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1S1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-insert1858141203<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert1858141203<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-update1858141203<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1S1Bi-delete1858141203<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete1858141203<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-insert1858141203<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert1858141203<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-update1858141203<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1S1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1S1Bi-delete1858141203<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete1858141203<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1S1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1S1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1S1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1S1Bi" "AggregateOneEntityBinary"."SE1S1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1S1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1S1Bi" ("SA1S1BiID", "p1S1Bi")
	SELECT (tuple)."SA1S1BiID", (tuple)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert1858141203<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1S1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1S1Bi" AS tbl
	WHERE 
		("SA1S1BiID") IN (SELECT (u.old)."SA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1S1Bi" AS tbl SET
		"SA1S1BiID" = (u.new)."SA1S1BiID", "p1S1Bi" = (u.new)."p1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1S1BiID" = (u.old)."SA1S1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1S1Bi" ("SA1S1BiID", "p1S1Bi")
	SELECT (new)."SA1S1BiID", (new)."p1S1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1S1Bi"
	WHERE ("SA1S1BiID") IN (SELECT (tuple)."SA1S1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete1858141203<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1S1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1S1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert1858141203<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete1858141203<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1S1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1S1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1S1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1S1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1S1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1S1Bi" "AggregateOneEntityBinary"."SE1S1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert1858141203<" 
	SELECT t.i, (t.tuple)."sE1S1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1S1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-update1858141203<" 
	SELECT t.i, (t.old)."sE1S1Bi" as old, (t.new)."sE1S1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-update<" t
	WHERE NOT (t.old)."sE1S1Bi" IS NULL AND (t.new)."sE1S1Bi" IS NULL
	OR (t.old)."sE1S1Bi" IS NULL AND NOT (t.new)."sE1S1Bi" IS NULL
	OR NOT (t.old)."sE1S1Bi" IS NULL AND NOT (t.new)."sE1S1Bi" IS NULL AND (t.old)."sE1S1Bi" != (t.new)."sE1S1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete1858141203<" 
	SELECT t.i, (t.tuple)."sE1S1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1S1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1S1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1S1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1V0Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1V0Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."SA1V0Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1V0Bi_entity' AND t.typname = '-ngs_SA1V0Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-" AS "AggregateOneEntityBinary"."SA1V0Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1V0Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."SA1V0Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1V0Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1V0Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1V0Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1V0Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-insert1858052791<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert1858052791<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-update1858052791<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V0Bi-delete1858052791<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete1858052791<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-insert1858052791<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert1858052791<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-update1858052791<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1V0Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V0Bi-delete1858052791<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete1858052791<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1V0Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1V0Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1V0Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1V0Bi" "AggregateOneEntityBinary"."SE1V0Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1V0Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1V0Bi" ("SA1V0BiID", "p1V0Bi")
	SELECT (tuple)."SA1V0BiID", (tuple)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert1858052791<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1V0Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1V0Bi" AS tbl
	WHERE 
		("SA1V0BiID") IN (SELECT (u.old)."SA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1V0Bi" AS tbl SET
		"SA1V0BiID" = (u.new)."SA1V0BiID", "p1V0Bi" = (u.new)."p1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1V0BiID" = (u.old)."SA1V0BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1V0Bi" ("SA1V0BiID", "p1V0Bi")
	SELECT (new)."SA1V0BiID", (new)."p1V0Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1V0Bi"
	WHERE ("SA1V0BiID") IN (SELECT (tuple)."SA1V0BiID" FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete1858052791<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1V0Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V0Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V0Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V0Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V0Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert1858052791<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete1858052791<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1V0Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1V0Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1V0Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1V0Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1V0Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1V0Bi" "AggregateOneEntityBinary"."SE1V0Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert1858052791<" 
	SELECT t.i, (t.tuple)."sE1V0Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-insert<" t
	WHERE NOT (t.tuple)."sE1V0Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-update1858052791<" 
	SELECT t.i, (t.old)."sE1V0Bi" as old, (t.new)."sE1V0Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-update<" t
	WHERE NOT (t.old)."sE1V0Bi" IS NULL AND (t.new)."sE1V0Bi" IS NULL
	OR (t.old)."sE1V0Bi" IS NULL AND NOT (t.new)."sE1V0Bi" IS NULL
	OR NOT (t.old)."sE1V0Bi" IS NULL AND NOT (t.new)."sE1V0Bi" IS NULL AND (t.old)."sE1V0Bi" != (t.new)."sE1V0Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete1858052791<" 
	SELECT t.i, (t.tuple)."sE1V0Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1V0Bi-delete<" t
	WHERE NOT (t.tuple)."sE1V0Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1V0Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-") RETURNS "AggregateOneEntityBinary"."SA1V1Bi_entity" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."SA1V1Bi_entity" $$ IMMUTABLE LANGUAGE sql;
CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."SA1V1Bi_entity") RETURNS "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" AS $$ SELECT $1::text::"AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" $$ IMMUTABLE LANGUAGE sql;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_cast c JOIN pg_type s ON c.castsource = s.oid JOIN pg_type t ON c.casttarget = t.oid JOIN pg_namespace n ON n.oid = s.typnamespace AND n.oid = t.typnamespace
					WHERE n.nspname = 'AggregateOneEntityBinary' AND s.typname = 'SA1V1Bi_entity' AND t.typname = '-ngs_SA1V1Bi_type-') THEN
		CREATE CAST ("AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-" AS "AggregateOneEntityBinary"."SA1V1Bi_entity") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-") AS IMPLICIT;
		CREATE CAST ("AggregateOneEntityBinary"."SA1V1Bi_entity" AS "AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-") WITH FUNCTION "AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."SA1V1Bi_entity") AS IMPLICIT;
	END IF;
END $$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW "AggregateOneEntityBinary"."SA1V1Bi_unprocessed_events" AS
SELECT _aggregate."ID"
FROM
	"AggregateOneEntityBinary"."SA1V1Bi_entity" _aggregate
;
COMMENT ON VIEW "AggregateOneEntityBinary"."SA1V1Bi_unprocessed_events" IS 'NGS volatile';

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-insert<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-update<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-delete<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-insert<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-update<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SA1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-delete<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SA1V1Bi_entity" t LIMIT 0;
	END IF;

	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-insert1858051830<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert1858051830<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-update1858051830<' AND column_name = 'old') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<";
	END IF;
	IF NOT EXISTS(SELECT * FROM "-NGS-".Load_Type_Info() WHERE type_schema = 'AggregateOneEntityBinary' AND type_name = '>tmp-SA1V1Bi-delete1858051830<' AND column_name = 'tuple') THEN
		DROP TABLE IF EXISTS "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete1858051830<";
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-insert1858051830<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert1858051830<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-update1858051830<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<" AS SELECT 0::int as i, t as old, t as new FROM "AggregateOneEntityBinary"."SE1V1Bi_entity" t LIMIT 0;
	END IF;
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = '>tmp-SA1V1Bi-delete1858051830<') THEN
		CREATE UNLOGGED TABLE "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete1858051830<" AS SELECT 0::int as i, t as tuple FROM "AggregateOneEntityBinary"."SE1V1Bi_entity" t LIMIT 0;
	END IF;
END $$ LANGUAGE plpgsql;

--TODO: temp fix for rename
DROP FUNCTION IF EXISTS "AggregateOneEntityBinary"."persist_SA1V1Bi_internal"(int, int);

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1V1Bi_internal"(_update_count int, _delete_count int) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1V1Bi" "AggregateOneEntityBinary"."SE1V1Bi_entity"[];
BEGIN

	SET CONSTRAINTS ALL DEFERRED;

	

	INSERT INTO "AggregateOneEntityBinary"."SA1V1Bi" ("ID")
	SELECT (tuple)."ID" 
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<" i;

	
	INSERT INTO "AggregateOneEntityBinary"."SE1V1Bi" ("SA1V1BiID", "p1V1Bi")
	SELECT (tuple)."SA1V1BiID", (tuple)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert1858051830<" i;

		
	UPDATE "AggregateOneEntityBinary"."SA1V1Bi" as tbl SET 
		"ID" = (new)."ID"
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<" u
	WHERE
		tbl."ID" = (old)."ID";

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _update_count THEN 
		RETURN 'Updated ' || cnt || ' row(s). Expected to update ' || _update_count || ' row(s).';
	END IF;

	
	DELETE FROM "AggregateOneEntityBinary"."SE1V1Bi" AS tbl
	WHERE 
		("SA1V1BiID") IN (SELECT (u.old)."SA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<" u WHERE NOT u.old IS NULL AND u.new IS NULL);

	UPDATE "AggregateOneEntityBinary"."SE1V1Bi" AS tbl SET
		"SA1V1BiID" = (u.new)."SA1V1BiID", "p1V1Bi" = (u.new)."p1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<" u
	WHERE
		NOT u.new IS NULL
		AND tbl."SA1V1BiID" = (u.old)."SA1V1BiID";

	INSERT INTO "AggregateOneEntityBinary"."SE1V1Bi" ("SA1V1BiID", "p1V1Bi")
	SELECT (new)."SA1V1BiID", (new)."p1V1Bi"
	FROM 
		"AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<" u
	WHERE 
		u.old IS NULL
		AND NOT u.new IS NULL;
	DELETE FROM "AggregateOneEntityBinary"."SE1V1Bi"
	WHERE ("SA1V1BiID") IN (SELECT (tuple)."SA1V1BiID" FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete1858051830<" d);

	DELETE FROM "AggregateOneEntityBinary"."SA1V1Bi"
	WHERE ("ID") IN (SELECT (tuple)."ID" FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<" d);

	GET DIAGNOSTICS cnt = ROW_COUNT;
	IF cnt != _delete_count THEN 
		RETURN 'Deleted ' || cnt || ' row(s). Expected to delete ' || _delete_count || ' row(s).';
	END IF;

	
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V1Bi', 'Insert', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V1Bi', 'Update', (SELECT array_agg((old)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V1Bi', 'Change', (SELECT array_agg((new)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<" WHERE (old)."ID" != (new)."ID"));
	PERFORM "-NGS-".Safe_Notify('aggregate_roots', 'AggregateOneEntityBinary.SA1V1Bi', 'Delete', (SELECT array_agg((tuple)."URI") FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<"));

	SET CONSTRAINTS ALL IMMEDIATE;

	
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert1858051830<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete1858051830<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<";
	DELETE FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<";

	RETURN NULL;
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION "AggregateOneEntityBinary"."persist_SA1V1Bi"(
IN _inserted "AggregateOneEntityBinary"."SA1V1Bi_entity"[], IN _updated_original "AggregateOneEntityBinary"."SA1V1Bi_entity"[], IN _updated_new "AggregateOneEntityBinary"."SA1V1Bi_entity"[], IN _deleted "AggregateOneEntityBinary"."SA1V1Bi_entity"[]) 
	RETURNS VARCHAR AS
$$
DECLARE cnt int;
DECLARE uri VARCHAR;
DECLARE tmp record;
DECLARE "_var_AggregateOneEntityBinary.SE1V1Bi" "AggregateOneEntityBinary"."SE1V1Bi_entity"[];
BEGIN

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<"
	SELECT row_number() over (), unnest(_inserted);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<"
	SELECT row_number() over (), unnest(_updated_original), unnest(_updated_new);

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<"
	SELECT row_number() over (), unnest(_deleted);

	
	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert1858051830<" 
	SELECT t.i, (t.tuple)."sE1V1Bi"
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-insert<" t
	WHERE NOT (t.tuple)."sE1V1Bi" IS NULL;

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-update1858051830<" 
	SELECT t.i, (t.old)."sE1V1Bi" as old, (t.new)."sE1V1Bi" as new
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-update<" t
	WHERE NOT (t.old)."sE1V1Bi" IS NULL AND (t.new)."sE1V1Bi" IS NULL
	OR (t.old)."sE1V1Bi" IS NULL AND NOT (t.new)."sE1V1Bi" IS NULL
	OR NOT (t.old)."sE1V1Bi" IS NULL AND NOT (t.new)."sE1V1Bi" IS NULL AND (t.old)."sE1V1Bi" != (t.new)."sE1V1Bi";

	INSERT INTO "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete1858051830<" 
	SELECT t.i, (t.tuple)."sE1V1Bi" as tuple
	FROM "AggregateOneEntityBinary".">tmp-SA1V1Bi-delete<" t
	WHERE NOT (t.tuple)."sE1V1Bi" IS NULL;

	RETURN "AggregateOneEntityBinary"."persist_SA1V1Bi_internal"(array_upper(_updated_original, 1), array_upper(_deleted, 1));
END
$$
LANGUAGE plpgsql SECURITY DEFINER;

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0A0Bi_type-', 'BE0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0A0Bi_to_type"("AggregateOneEntityBinary"."BE0A0Bi_entity")', 'AggregateOneEntityBinary', 'BE0A0Bi_entity', '-ngs_BE0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0A1Bi_type-', 'BE0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0A1Bi_to_type"("AggregateOneEntityBinary"."BE0A1Bi_entity")', 'AggregateOneEntityBinary', 'BE0A1Bi_entity', '-ngs_BE0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0Bi_type-', 'BE0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0Bi_to_type"("AggregateOneEntityBinary"."BE0Bi_entity")', 'AggregateOneEntityBinary', 'BE0Bi_entity', '-ngs_BE0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0C0Bi_type-', 'BE0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0C0Bi_to_type"("AggregateOneEntityBinary"."BE0C0Bi_entity")', 'AggregateOneEntityBinary', 'BE0C0Bi_entity', '-ngs_BE0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0C1Bi_type-', 'BE0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0C1Bi_to_type"("AggregateOneEntityBinary"."BE0C1Bi_entity")', 'AggregateOneEntityBinary', 'BE0C1Bi_entity', '-ngs_BE0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0K0Bi_type-', 'BE0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0K0Bi_to_type"("AggregateOneEntityBinary"."BE0K0Bi_entity")', 'AggregateOneEntityBinary', 'BE0K0Bi_entity', '-ngs_BE0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0K1Bi_type-', 'BE0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0K1Bi_to_type"("AggregateOneEntityBinary"."BE0K1Bi_entity")', 'AggregateOneEntityBinary', 'BE0K1Bi_entity', '-ngs_BE0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0L0Bi_type-', 'BE0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0L0Bi_to_type"("AggregateOneEntityBinary"."BE0L0Bi_entity")', 'AggregateOneEntityBinary', 'BE0L0Bi_entity', '-ngs_BE0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0L1Bi_type-', 'BE0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0L1Bi_to_type"("AggregateOneEntityBinary"."BE0L1Bi_entity")', 'AggregateOneEntityBinary', 'BE0L1Bi_entity', '-ngs_BE0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0Q1Bi_type-', 'BE0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0Q1Bi_to_type"("AggregateOneEntityBinary"."BE0Q1Bi_entity")', 'AggregateOneEntityBinary', 'BE0Q1Bi_entity', '-ngs_BE0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0S0Bi_type-', 'BE0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0S0Bi_to_type"("AggregateOneEntityBinary"."BE0S0Bi_entity")', 'AggregateOneEntityBinary', 'BE0S0Bi_entity', '-ngs_BE0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0S1Bi_type-', 'BE0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0S1Bi_to_type"("AggregateOneEntityBinary"."BE0S1Bi_entity")', 'AggregateOneEntityBinary', 'BE0S1Bi_entity', '-ngs_BE0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0V0Bi_type-', 'BE0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0V0Bi_to_type"("AggregateOneEntityBinary"."BE0V0Bi_entity")', 'AggregateOneEntityBinary', 'BE0V0Bi_entity', '-ngs_BE0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE0V1Bi_type-', 'BE0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE0V1Bi_to_type"("AggregateOneEntityBinary"."BE0V1Bi_entity")', 'AggregateOneEntityBinary', 'BE0V1Bi_entity', '-ngs_BE0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1A0Bi_type-', 'BE1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1A0Bi_to_type"("AggregateOneEntityBinary"."BE1A0Bi_entity")', 'AggregateOneEntityBinary', 'BE1A0Bi_entity', '-ngs_BE1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1A1Bi_type-', 'BE1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1A1Bi_to_type"("AggregateOneEntityBinary"."BE1A1Bi_entity")', 'AggregateOneEntityBinary', 'BE1A1Bi_entity', '-ngs_BE1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1Bi_type-', 'BE1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1Bi_to_type"("AggregateOneEntityBinary"."BE1Bi_entity")', 'AggregateOneEntityBinary', 'BE1Bi_entity', '-ngs_BE1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1C0Bi_type-', 'BE1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1C0Bi_to_type"("AggregateOneEntityBinary"."BE1C0Bi_entity")', 'AggregateOneEntityBinary', 'BE1C0Bi_entity', '-ngs_BE1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1C1Bi_type-', 'BE1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1C1Bi_to_type"("AggregateOneEntityBinary"."BE1C1Bi_entity")', 'AggregateOneEntityBinary', 'BE1C1Bi_entity', '-ngs_BE1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1K0Bi_type-', 'BE1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1K0Bi_to_type"("AggregateOneEntityBinary"."BE1K0Bi_entity")', 'AggregateOneEntityBinary', 'BE1K0Bi_entity', '-ngs_BE1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1K1Bi_type-', 'BE1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1K1Bi_to_type"("AggregateOneEntityBinary"."BE1K1Bi_entity")', 'AggregateOneEntityBinary', 'BE1K1Bi_entity', '-ngs_BE1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1L0Bi_type-', 'BE1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1L0Bi_to_type"("AggregateOneEntityBinary"."BE1L0Bi_entity")', 'AggregateOneEntityBinary', 'BE1L0Bi_entity', '-ngs_BE1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1L1Bi_type-', 'BE1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1L1Bi_to_type"("AggregateOneEntityBinary"."BE1L1Bi_entity")', 'AggregateOneEntityBinary', 'BE1L1Bi_entity', '-ngs_BE1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1Q1Bi_type-', 'BE1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1Q1Bi_to_type"("AggregateOneEntityBinary"."BE1Q1Bi_entity")', 'AggregateOneEntityBinary', 'BE1Q1Bi_entity', '-ngs_BE1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1S0Bi_type-', 'BE1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1S0Bi_to_type"("AggregateOneEntityBinary"."BE1S0Bi_entity")', 'AggregateOneEntityBinary', 'BE1S0Bi_entity', '-ngs_BE1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1S1Bi_type-', 'BE1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1S1Bi_to_type"("AggregateOneEntityBinary"."BE1S1Bi_entity")', 'AggregateOneEntityBinary', 'BE1S1Bi_entity', '-ngs_BE1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1V0Bi_type-', 'BE1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1V0Bi_to_type"("AggregateOneEntityBinary"."BE1V0Bi_entity")', 'AggregateOneEntityBinary', 'BE1V0Bi_entity', '-ngs_BE1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BE1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BE1V1Bi_type-', 'BE1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BE1V1Bi_to_type"("AggregateOneEntityBinary"."BE1V1Bi_entity")', 'AggregateOneEntityBinary', 'BE1V1Bi_entity', '-ngs_BE1V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0A0Bi_type-', 'GE0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0A0Bi_to_type"("AggregateOneEntityBinary"."GE0A0Bi_entity")', 'AggregateOneEntityBinary', 'GE0A0Bi_entity', '-ngs_GE0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0A1Bi_type-', 'GE0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0A1Bi_to_type"("AggregateOneEntityBinary"."GE0A1Bi_entity")', 'AggregateOneEntityBinary', 'GE0A1Bi_entity', '-ngs_GE0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0Bi_type-', 'GE0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0Bi_to_type"("AggregateOneEntityBinary"."GE0Bi_entity")', 'AggregateOneEntityBinary', 'GE0Bi_entity', '-ngs_GE0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0C0Bi_type-', 'GE0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0C0Bi_to_type"("AggregateOneEntityBinary"."GE0C0Bi_entity")', 'AggregateOneEntityBinary', 'GE0C0Bi_entity', '-ngs_GE0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0C1Bi_type-', 'GE0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0C1Bi_to_type"("AggregateOneEntityBinary"."GE0C1Bi_entity")', 'AggregateOneEntityBinary', 'GE0C1Bi_entity', '-ngs_GE0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0K0Bi_type-', 'GE0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0K0Bi_to_type"("AggregateOneEntityBinary"."GE0K0Bi_entity")', 'AggregateOneEntityBinary', 'GE0K0Bi_entity', '-ngs_GE0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0K1Bi_type-', 'GE0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0K1Bi_to_type"("AggregateOneEntityBinary"."GE0K1Bi_entity")', 'AggregateOneEntityBinary', 'GE0K1Bi_entity', '-ngs_GE0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0L0Bi_type-', 'GE0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0L0Bi_to_type"("AggregateOneEntityBinary"."GE0L0Bi_entity")', 'AggregateOneEntityBinary', 'GE0L0Bi_entity', '-ngs_GE0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0L1Bi_type-', 'GE0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0L1Bi_to_type"("AggregateOneEntityBinary"."GE0L1Bi_entity")', 'AggregateOneEntityBinary', 'GE0L1Bi_entity', '-ngs_GE0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0Q1Bi_type-', 'GE0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0Q1Bi_to_type"("AggregateOneEntityBinary"."GE0Q1Bi_entity")', 'AggregateOneEntityBinary', 'GE0Q1Bi_entity', '-ngs_GE0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0S0Bi_type-', 'GE0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0S0Bi_to_type"("AggregateOneEntityBinary"."GE0S0Bi_entity")', 'AggregateOneEntityBinary', 'GE0S0Bi_entity', '-ngs_GE0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0S1Bi_type-', 'GE0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0S1Bi_to_type"("AggregateOneEntityBinary"."GE0S1Bi_entity")', 'AggregateOneEntityBinary', 'GE0S1Bi_entity', '-ngs_GE0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0V0Bi_type-', 'GE0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0V0Bi_to_type"("AggregateOneEntityBinary"."GE0V0Bi_entity")', 'AggregateOneEntityBinary', 'GE0V0Bi_entity', '-ngs_GE0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE0V1Bi_type-', 'GE0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE0V1Bi_to_type"("AggregateOneEntityBinary"."GE0V1Bi_entity")', 'AggregateOneEntityBinary', 'GE0V1Bi_entity', '-ngs_GE0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1A0Bi_type-', 'GE1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1A0Bi_to_type"("AggregateOneEntityBinary"."GE1A0Bi_entity")', 'AggregateOneEntityBinary', 'GE1A0Bi_entity', '-ngs_GE1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1A1Bi_type-', 'GE1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1A1Bi_to_type"("AggregateOneEntityBinary"."GE1A1Bi_entity")', 'AggregateOneEntityBinary', 'GE1A1Bi_entity', '-ngs_GE1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1Bi_type-', 'GE1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1Bi_to_type"("AggregateOneEntityBinary"."GE1Bi_entity")', 'AggregateOneEntityBinary', 'GE1Bi_entity', '-ngs_GE1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1C0Bi_type-', 'GE1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1C0Bi_to_type"("AggregateOneEntityBinary"."GE1C0Bi_entity")', 'AggregateOneEntityBinary', 'GE1C0Bi_entity', '-ngs_GE1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1C1Bi_type-', 'GE1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1C1Bi_to_type"("AggregateOneEntityBinary"."GE1C1Bi_entity")', 'AggregateOneEntityBinary', 'GE1C1Bi_entity', '-ngs_GE1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1K0Bi_type-', 'GE1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1K0Bi_to_type"("AggregateOneEntityBinary"."GE1K0Bi_entity")', 'AggregateOneEntityBinary', 'GE1K0Bi_entity', '-ngs_GE1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1K1Bi_type-', 'GE1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1K1Bi_to_type"("AggregateOneEntityBinary"."GE1K1Bi_entity")', 'AggregateOneEntityBinary', 'GE1K1Bi_entity', '-ngs_GE1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1L0Bi_type-', 'GE1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1L0Bi_to_type"("AggregateOneEntityBinary"."GE1L0Bi_entity")', 'AggregateOneEntityBinary', 'GE1L0Bi_entity', '-ngs_GE1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1L1Bi_type-', 'GE1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1L1Bi_to_type"("AggregateOneEntityBinary"."GE1L1Bi_entity")', 'AggregateOneEntityBinary', 'GE1L1Bi_entity', '-ngs_GE1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1Q1Bi_type-', 'GE1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1Q1Bi_to_type"("AggregateOneEntityBinary"."GE1Q1Bi_entity")', 'AggregateOneEntityBinary', 'GE1Q1Bi_entity', '-ngs_GE1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1S0Bi_type-', 'GE1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1S0Bi_to_type"("AggregateOneEntityBinary"."GE1S0Bi_entity")', 'AggregateOneEntityBinary', 'GE1S0Bi_entity', '-ngs_GE1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1S1Bi_type-', 'GE1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1S1Bi_to_type"("AggregateOneEntityBinary"."GE1S1Bi_entity")', 'AggregateOneEntityBinary', 'GE1S1Bi_entity', '-ngs_GE1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1V0Bi_type-', 'GE1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1V0Bi_to_type"("AggregateOneEntityBinary"."GE1V0Bi_entity")', 'AggregateOneEntityBinary', 'GE1V0Bi_entity', '-ngs_GE1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GE1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GE1V1Bi_type-', 'GE1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GE1V1Bi_to_type"("AggregateOneEntityBinary"."GE1V1Bi_entity")', 'AggregateOneEntityBinary', 'GE1V1Bi_entity', '-ngs_GE1V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0A0Bi_type-', 'SE0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0A0Bi_to_type"("AggregateOneEntityBinary"."SE0A0Bi_entity")', 'AggregateOneEntityBinary', 'SE0A0Bi_entity', '-ngs_SE0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0A1Bi_type-', 'SE0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0A1Bi_to_type"("AggregateOneEntityBinary"."SE0A1Bi_entity")', 'AggregateOneEntityBinary', 'SE0A1Bi_entity', '-ngs_SE0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0Bi_type-', 'SE0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0Bi_to_type"("AggregateOneEntityBinary"."SE0Bi_entity")', 'AggregateOneEntityBinary', 'SE0Bi_entity', '-ngs_SE0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0C0Bi_type-', 'SE0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0C0Bi_to_type"("AggregateOneEntityBinary"."SE0C0Bi_entity")', 'AggregateOneEntityBinary', 'SE0C0Bi_entity', '-ngs_SE0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0C1Bi_type-', 'SE0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0C1Bi_to_type"("AggregateOneEntityBinary"."SE0C1Bi_entity")', 'AggregateOneEntityBinary', 'SE0C1Bi_entity', '-ngs_SE0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0K0Bi_type-', 'SE0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0K0Bi_to_type"("AggregateOneEntityBinary"."SE0K0Bi_entity")', 'AggregateOneEntityBinary', 'SE0K0Bi_entity', '-ngs_SE0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0K1Bi_type-', 'SE0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0K1Bi_to_type"("AggregateOneEntityBinary"."SE0K1Bi_entity")', 'AggregateOneEntityBinary', 'SE0K1Bi_entity', '-ngs_SE0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0L0Bi_type-', 'SE0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0L0Bi_to_type"("AggregateOneEntityBinary"."SE0L0Bi_entity")', 'AggregateOneEntityBinary', 'SE0L0Bi_entity', '-ngs_SE0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0L1Bi_type-', 'SE0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0L1Bi_to_type"("AggregateOneEntityBinary"."SE0L1Bi_entity")', 'AggregateOneEntityBinary', 'SE0L1Bi_entity', '-ngs_SE0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0Q1Bi_type-', 'SE0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0Q1Bi_to_type"("AggregateOneEntityBinary"."SE0Q1Bi_entity")', 'AggregateOneEntityBinary', 'SE0Q1Bi_entity', '-ngs_SE0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0S0Bi_type-', 'SE0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0S0Bi_to_type"("AggregateOneEntityBinary"."SE0S0Bi_entity")', 'AggregateOneEntityBinary', 'SE0S0Bi_entity', '-ngs_SE0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0S1Bi_type-', 'SE0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0S1Bi_to_type"("AggregateOneEntityBinary"."SE0S1Bi_entity")', 'AggregateOneEntityBinary', 'SE0S1Bi_entity', '-ngs_SE0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0V0Bi_type-', 'SE0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0V0Bi_to_type"("AggregateOneEntityBinary"."SE0V0Bi_entity")', 'AggregateOneEntityBinary', 'SE0V0Bi_entity', '-ngs_SE0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE0V1Bi_type-', 'SE0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE0V1Bi_to_type"("AggregateOneEntityBinary"."SE0V1Bi_entity")', 'AggregateOneEntityBinary', 'SE0V1Bi_entity', '-ngs_SE0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1A0Bi_type-', 'SE1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1A0Bi_to_type"("AggregateOneEntityBinary"."SE1A0Bi_entity")', 'AggregateOneEntityBinary', 'SE1A0Bi_entity', '-ngs_SE1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1A1Bi_type-', 'SE1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1A1Bi_to_type"("AggregateOneEntityBinary"."SE1A1Bi_entity")', 'AggregateOneEntityBinary', 'SE1A1Bi_entity', '-ngs_SE1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1Bi_type-', 'SE1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1Bi_to_type"("AggregateOneEntityBinary"."SE1Bi_entity")', 'AggregateOneEntityBinary', 'SE1Bi_entity', '-ngs_SE1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1C0Bi_type-', 'SE1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1C0Bi_to_type"("AggregateOneEntityBinary"."SE1C0Bi_entity")', 'AggregateOneEntityBinary', 'SE1C0Bi_entity', '-ngs_SE1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1C1Bi_type-', 'SE1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1C1Bi_to_type"("AggregateOneEntityBinary"."SE1C1Bi_entity")', 'AggregateOneEntityBinary', 'SE1C1Bi_entity', '-ngs_SE1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1K0Bi_type-', 'SE1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1K0Bi_to_type"("AggregateOneEntityBinary"."SE1K0Bi_entity")', 'AggregateOneEntityBinary', 'SE1K0Bi_entity', '-ngs_SE1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1K1Bi_type-', 'SE1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1K1Bi_to_type"("AggregateOneEntityBinary"."SE1K1Bi_entity")', 'AggregateOneEntityBinary', 'SE1K1Bi_entity', '-ngs_SE1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1L0Bi_type-', 'SE1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1L0Bi_to_type"("AggregateOneEntityBinary"."SE1L0Bi_entity")', 'AggregateOneEntityBinary', 'SE1L0Bi_entity', '-ngs_SE1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1L1Bi_type-', 'SE1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1L1Bi_to_type"("AggregateOneEntityBinary"."SE1L1Bi_entity")', 'AggregateOneEntityBinary', 'SE1L1Bi_entity', '-ngs_SE1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1Q1Bi_type-', 'SE1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1Q1Bi_to_type"("AggregateOneEntityBinary"."SE1Q1Bi_entity")', 'AggregateOneEntityBinary', 'SE1Q1Bi_entity', '-ngs_SE1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1S0Bi_type-', 'SE1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1S0Bi_to_type"("AggregateOneEntityBinary"."SE1S0Bi_entity")', 'AggregateOneEntityBinary', 'SE1S0Bi_entity', '-ngs_SE1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1S1Bi_type-', 'SE1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1S1Bi_to_type"("AggregateOneEntityBinary"."SE1S1Bi_entity")', 'AggregateOneEntityBinary', 'SE1S1Bi_entity', '-ngs_SE1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1V0Bi_type-', 'SE1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1V0Bi_to_type"("AggregateOneEntityBinary"."SE1V0Bi_entity")', 'AggregateOneEntityBinary', 'SE1V0Bi_entity', '-ngs_SE1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SE1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SE1V1Bi_type-', 'SE1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SE1V1Bi_to_type"("AggregateOneEntityBinary"."SE1V1Bi_entity")', 'AggregateOneEntityBinary', 'SE1V1Bi_entity', '-ngs_SE1V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0A0Bi_type-', 'BA0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0A0Bi_to_type"("AggregateOneEntityBinary"."BA0A0Bi_entity")', 'AggregateOneEntityBinary', 'BA0A0Bi_entity', '-ngs_BA0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0A1Bi_type-', 'BA0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0A1Bi_to_type"("AggregateOneEntityBinary"."BA0A1Bi_entity")', 'AggregateOneEntityBinary', 'BA0A1Bi_entity', '-ngs_BA0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0Bi_type-', 'BA0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0Bi_to_type"("AggregateOneEntityBinary"."BA0Bi_entity")', 'AggregateOneEntityBinary', 'BA0Bi_entity', '-ngs_BA0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0C0Bi_type-', 'BA0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0C0Bi_to_type"("AggregateOneEntityBinary"."BA0C0Bi_entity")', 'AggregateOneEntityBinary', 'BA0C0Bi_entity', '-ngs_BA0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0C1Bi_type-', 'BA0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0C1Bi_to_type"("AggregateOneEntityBinary"."BA0C1Bi_entity")', 'AggregateOneEntityBinary', 'BA0C1Bi_entity', '-ngs_BA0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0K0Bi_type-', 'BA0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0K0Bi_to_type"("AggregateOneEntityBinary"."BA0K0Bi_entity")', 'AggregateOneEntityBinary', 'BA0K0Bi_entity', '-ngs_BA0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0K1Bi_type-', 'BA0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0K1Bi_to_type"("AggregateOneEntityBinary"."BA0K1Bi_entity")', 'AggregateOneEntityBinary', 'BA0K1Bi_entity', '-ngs_BA0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0L0Bi_type-', 'BA0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0L0Bi_to_type"("AggregateOneEntityBinary"."BA0L0Bi_entity")', 'AggregateOneEntityBinary', 'BA0L0Bi_entity', '-ngs_BA0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0L1Bi_type-', 'BA0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0L1Bi_to_type"("AggregateOneEntityBinary"."BA0L1Bi_entity")', 'AggregateOneEntityBinary', 'BA0L1Bi_entity', '-ngs_BA0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0Q1Bi_type-', 'BA0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0Q1Bi_to_type"("AggregateOneEntityBinary"."BA0Q1Bi_entity")', 'AggregateOneEntityBinary', 'BA0Q1Bi_entity', '-ngs_BA0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0S0Bi_type-', 'BA0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0S0Bi_to_type"("AggregateOneEntityBinary"."BA0S0Bi_entity")', 'AggregateOneEntityBinary', 'BA0S0Bi_entity', '-ngs_BA0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0S1Bi_type-', 'BA0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0S1Bi_to_type"("AggregateOneEntityBinary"."BA0S1Bi_entity")', 'AggregateOneEntityBinary', 'BA0S1Bi_entity', '-ngs_BA0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0V0Bi_type-', 'BA0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0V0Bi_to_type"("AggregateOneEntityBinary"."BA0V0Bi_entity")', 'AggregateOneEntityBinary', 'BA0V0Bi_entity', '-ngs_BA0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA0V1Bi_type-', 'BA0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA0V1Bi_to_type"("AggregateOneEntityBinary"."BA0V1Bi_entity")', 'AggregateOneEntityBinary', 'BA0V1Bi_entity', '-ngs_BA0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1A0Bi_type-', 'BA1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1A0Bi_to_type"("AggregateOneEntityBinary"."BA1A0Bi_entity")', 'AggregateOneEntityBinary', 'BA1A0Bi_entity', '-ngs_BA1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1A1Bi_type-', 'BA1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1A1Bi_to_type"("AggregateOneEntityBinary"."BA1A1Bi_entity")', 'AggregateOneEntityBinary', 'BA1A1Bi_entity', '-ngs_BA1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1Bi_type-', 'BA1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1Bi_to_type"("AggregateOneEntityBinary"."BA1Bi_entity")', 'AggregateOneEntityBinary', 'BA1Bi_entity', '-ngs_BA1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1C0Bi_type-', 'BA1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1C0Bi_to_type"("AggregateOneEntityBinary"."BA1C0Bi_entity")', 'AggregateOneEntityBinary', 'BA1C0Bi_entity', '-ngs_BA1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1C1Bi_type-', 'BA1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1C1Bi_to_type"("AggregateOneEntityBinary"."BA1C1Bi_entity")', 'AggregateOneEntityBinary', 'BA1C1Bi_entity', '-ngs_BA1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1K0Bi_type-', 'BA1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1K0Bi_to_type"("AggregateOneEntityBinary"."BA1K0Bi_entity")', 'AggregateOneEntityBinary', 'BA1K0Bi_entity', '-ngs_BA1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1K1Bi_type-', 'BA1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1K1Bi_to_type"("AggregateOneEntityBinary"."BA1K1Bi_entity")', 'AggregateOneEntityBinary', 'BA1K1Bi_entity', '-ngs_BA1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1L0Bi_type-', 'BA1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1L0Bi_to_type"("AggregateOneEntityBinary"."BA1L0Bi_entity")', 'AggregateOneEntityBinary', 'BA1L0Bi_entity', '-ngs_BA1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1L1Bi_type-', 'BA1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1L1Bi_to_type"("AggregateOneEntityBinary"."BA1L1Bi_entity")', 'AggregateOneEntityBinary', 'BA1L1Bi_entity', '-ngs_BA1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1Q1Bi_type-', 'BA1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1Q1Bi_to_type"("AggregateOneEntityBinary"."BA1Q1Bi_entity")', 'AggregateOneEntityBinary', 'BA1Q1Bi_entity', '-ngs_BA1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1S0Bi_type-', 'BA1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1S0Bi_to_type"("AggregateOneEntityBinary"."BA1S0Bi_entity")', 'AggregateOneEntityBinary', 'BA1S0Bi_entity', '-ngs_BA1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1S1Bi_type-', 'BA1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1S1Bi_to_type"("AggregateOneEntityBinary"."BA1S1Bi_entity")', 'AggregateOneEntityBinary', 'BA1S1Bi_entity', '-ngs_BA1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1V0Bi_type-', 'BA1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1V0Bi_to_type"("AggregateOneEntityBinary"."BA1V0Bi_entity")', 'AggregateOneEntityBinary', 'BA1V0Bi_entity', '-ngs_BA1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_BA1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_BA1V1Bi_type-', 'BA1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_BA1V1Bi_to_type"("AggregateOneEntityBinary"."BA1V1Bi_entity")', 'AggregateOneEntityBinary', 'BA1V1Bi_entity', '-ngs_BA1V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0A0Bi_type-', 'GA0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0A0Bi_to_type"("AggregateOneEntityBinary"."GA0A0Bi_entity")', 'AggregateOneEntityBinary', 'GA0A0Bi_entity', '-ngs_GA0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0A1Bi_type-', 'GA0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0A1Bi_to_type"("AggregateOneEntityBinary"."GA0A1Bi_entity")', 'AggregateOneEntityBinary', 'GA0A1Bi_entity', '-ngs_GA0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0Bi_type-', 'GA0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0Bi_to_type"("AggregateOneEntityBinary"."GA0Bi_entity")', 'AggregateOneEntityBinary', 'GA0Bi_entity', '-ngs_GA0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0C0Bi_type-', 'GA0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0C0Bi_to_type"("AggregateOneEntityBinary"."GA0C0Bi_entity")', 'AggregateOneEntityBinary', 'GA0C0Bi_entity', '-ngs_GA0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0C1Bi_type-', 'GA0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0C1Bi_to_type"("AggregateOneEntityBinary"."GA0C1Bi_entity")', 'AggregateOneEntityBinary', 'GA0C1Bi_entity', '-ngs_GA0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0K0Bi_type-', 'GA0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0K0Bi_to_type"("AggregateOneEntityBinary"."GA0K0Bi_entity")', 'AggregateOneEntityBinary', 'GA0K0Bi_entity', '-ngs_GA0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0K1Bi_type-', 'GA0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0K1Bi_to_type"("AggregateOneEntityBinary"."GA0K1Bi_entity")', 'AggregateOneEntityBinary', 'GA0K1Bi_entity', '-ngs_GA0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0L0Bi_type-', 'GA0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0L0Bi_to_type"("AggregateOneEntityBinary"."GA0L0Bi_entity")', 'AggregateOneEntityBinary', 'GA0L0Bi_entity', '-ngs_GA0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0L1Bi_type-', 'GA0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0L1Bi_to_type"("AggregateOneEntityBinary"."GA0L1Bi_entity")', 'AggregateOneEntityBinary', 'GA0L1Bi_entity', '-ngs_GA0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0Q1Bi_type-', 'GA0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0Q1Bi_to_type"("AggregateOneEntityBinary"."GA0Q1Bi_entity")', 'AggregateOneEntityBinary', 'GA0Q1Bi_entity', '-ngs_GA0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0S0Bi_type-', 'GA0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0S0Bi_to_type"("AggregateOneEntityBinary"."GA0S0Bi_entity")', 'AggregateOneEntityBinary', 'GA0S0Bi_entity', '-ngs_GA0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0S1Bi_type-', 'GA0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0S1Bi_to_type"("AggregateOneEntityBinary"."GA0S1Bi_entity")', 'AggregateOneEntityBinary', 'GA0S1Bi_entity', '-ngs_GA0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0V0Bi_type-', 'GA0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0V0Bi_to_type"("AggregateOneEntityBinary"."GA0V0Bi_entity")', 'AggregateOneEntityBinary', 'GA0V0Bi_entity', '-ngs_GA0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA0V1Bi_type-', 'GA0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA0V1Bi_to_type"("AggregateOneEntityBinary"."GA0V1Bi_entity")', 'AggregateOneEntityBinary', 'GA0V1Bi_entity', '-ngs_GA0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1A0Bi_type-', 'GA1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1A0Bi_to_type"("AggregateOneEntityBinary"."GA1A0Bi_entity")', 'AggregateOneEntityBinary', 'GA1A0Bi_entity', '-ngs_GA1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1A1Bi_type-', 'GA1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1A1Bi_to_type"("AggregateOneEntityBinary"."GA1A1Bi_entity")', 'AggregateOneEntityBinary', 'GA1A1Bi_entity', '-ngs_GA1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1Bi_type-', 'GA1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1Bi_to_type"("AggregateOneEntityBinary"."GA1Bi_entity")', 'AggregateOneEntityBinary', 'GA1Bi_entity', '-ngs_GA1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1C0Bi_type-', 'GA1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1C0Bi_to_type"("AggregateOneEntityBinary"."GA1C0Bi_entity")', 'AggregateOneEntityBinary', 'GA1C0Bi_entity', '-ngs_GA1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1C1Bi_type-', 'GA1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1C1Bi_to_type"("AggregateOneEntityBinary"."GA1C1Bi_entity")', 'AggregateOneEntityBinary', 'GA1C1Bi_entity', '-ngs_GA1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1K0Bi_type-', 'GA1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1K0Bi_to_type"("AggregateOneEntityBinary"."GA1K0Bi_entity")', 'AggregateOneEntityBinary', 'GA1K0Bi_entity', '-ngs_GA1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1K1Bi_type-', 'GA1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1K1Bi_to_type"("AggregateOneEntityBinary"."GA1K1Bi_entity")', 'AggregateOneEntityBinary', 'GA1K1Bi_entity', '-ngs_GA1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1L0Bi_type-', 'GA1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1L0Bi_to_type"("AggregateOneEntityBinary"."GA1L0Bi_entity")', 'AggregateOneEntityBinary', 'GA1L0Bi_entity', '-ngs_GA1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1L1Bi_type-', 'GA1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1L1Bi_to_type"("AggregateOneEntityBinary"."GA1L1Bi_entity")', 'AggregateOneEntityBinary', 'GA1L1Bi_entity', '-ngs_GA1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1Q1Bi_type-', 'GA1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1Q1Bi_to_type"("AggregateOneEntityBinary"."GA1Q1Bi_entity")', 'AggregateOneEntityBinary', 'GA1Q1Bi_entity', '-ngs_GA1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1S0Bi_type-', 'GA1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1S0Bi_to_type"("AggregateOneEntityBinary"."GA1S0Bi_entity")', 'AggregateOneEntityBinary', 'GA1S0Bi_entity', '-ngs_GA1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1S1Bi_type-', 'GA1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1S1Bi_to_type"("AggregateOneEntityBinary"."GA1S1Bi_entity")', 'AggregateOneEntityBinary', 'GA1S1Bi_entity', '-ngs_GA1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1V0Bi_type-', 'GA1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1V0Bi_to_type"("AggregateOneEntityBinary"."GA1V0Bi_entity")', 'AggregateOneEntityBinary', 'GA1V0Bi_entity', '-ngs_GA1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_GA1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_GA1V1Bi_type-', 'GA1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_GA1V1Bi_to_type"("AggregateOneEntityBinary"."GA1V1Bi_entity")', 'AggregateOneEntityBinary', 'GA1V1Bi_entity', '-ngs_GA1V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0A0Bi_type-', 'SA0A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0A0Bi_to_type"("AggregateOneEntityBinary"."SA0A0Bi_entity")', 'AggregateOneEntityBinary', 'SA0A0Bi_entity', '-ngs_SA0A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0A1Bi_type-', 'SA0A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0A1Bi_to_type"("AggregateOneEntityBinary"."SA0A1Bi_entity")', 'AggregateOneEntityBinary', 'SA0A1Bi_entity', '-ngs_SA0A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0Bi_type-', 'SA0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0Bi_to_type"("AggregateOneEntityBinary"."SA0Bi_entity")', 'AggregateOneEntityBinary', 'SA0Bi_entity', '-ngs_SA0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0C0Bi_type-', 'SA0C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0C0Bi_to_type"("AggregateOneEntityBinary"."SA0C0Bi_entity")', 'AggregateOneEntityBinary', 'SA0C0Bi_entity', '-ngs_SA0C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0C1Bi_type-', 'SA0C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0C1Bi_to_type"("AggregateOneEntityBinary"."SA0C1Bi_entity")', 'AggregateOneEntityBinary', 'SA0C1Bi_entity', '-ngs_SA0C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0K0Bi_type-', 'SA0K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0K0Bi_to_type"("AggregateOneEntityBinary"."SA0K0Bi_entity")', 'AggregateOneEntityBinary', 'SA0K0Bi_entity', '-ngs_SA0K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0K1Bi_type-', 'SA0K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0K1Bi_to_type"("AggregateOneEntityBinary"."SA0K1Bi_entity")', 'AggregateOneEntityBinary', 'SA0K1Bi_entity', '-ngs_SA0K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0L0Bi_type-', 'SA0L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0L0Bi_to_type"("AggregateOneEntityBinary"."SA0L0Bi_entity")', 'AggregateOneEntityBinary', 'SA0L0Bi_entity', '-ngs_SA0L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0L1Bi_type-', 'SA0L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0L1Bi_to_type"("AggregateOneEntityBinary"."SA0L1Bi_entity")', 'AggregateOneEntityBinary', 'SA0L1Bi_entity', '-ngs_SA0L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0Q1Bi_type-', 'SA0Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0Q1Bi_to_type"("AggregateOneEntityBinary"."SA0Q1Bi_entity")', 'AggregateOneEntityBinary', 'SA0Q1Bi_entity', '-ngs_SA0Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0S0Bi_type-', 'SA0S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0S0Bi_to_type"("AggregateOneEntityBinary"."SA0S0Bi_entity")', 'AggregateOneEntityBinary', 'SA0S0Bi_entity', '-ngs_SA0S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0S1Bi_type-', 'SA0S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0S1Bi_to_type"("AggregateOneEntityBinary"."SA0S1Bi_entity")', 'AggregateOneEntityBinary', 'SA0S1Bi_entity', '-ngs_SA0S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0V0Bi_type-', 'SA0V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0V0Bi_to_type"("AggregateOneEntityBinary"."SA0V0Bi_entity")', 'AggregateOneEntityBinary', 'SA0V0Bi_entity', '-ngs_SA0V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA0V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA0V1Bi_type-', 'SA0V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA0V1Bi_to_type"("AggregateOneEntityBinary"."SA0V1Bi_entity")', 'AggregateOneEntityBinary', 'SA0V1Bi_entity', '-ngs_SA0V1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1A0Bi_type-', 'SA1A0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1A0Bi_to_type"("AggregateOneEntityBinary"."SA1A0Bi_entity")', 'AggregateOneEntityBinary', 'SA1A0Bi_entity', '-ngs_SA1A0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1A1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1A1Bi_type-', 'SA1A1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1A1Bi_to_type"("AggregateOneEntityBinary"."SA1A1Bi_entity")', 'AggregateOneEntityBinary', 'SA1A1Bi_entity', '-ngs_SA1A1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1Bi_type-', 'SA1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1Bi_to_type"("AggregateOneEntityBinary"."SA1Bi_entity")', 'AggregateOneEntityBinary', 'SA1Bi_entity', '-ngs_SA1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1C0Bi_type-', 'SA1C0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1C0Bi_to_type"("AggregateOneEntityBinary"."SA1C0Bi_entity")', 'AggregateOneEntityBinary', 'SA1C0Bi_entity', '-ngs_SA1C0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1C1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1C1Bi_type-', 'SA1C1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1C1Bi_to_type"("AggregateOneEntityBinary"."SA1C1Bi_entity")', 'AggregateOneEntityBinary', 'SA1C1Bi_entity', '-ngs_SA1C1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1K0Bi_type-', 'SA1K0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1K0Bi_to_type"("AggregateOneEntityBinary"."SA1K0Bi_entity")', 'AggregateOneEntityBinary', 'SA1K0Bi_entity', '-ngs_SA1K0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1K1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1K1Bi_type-', 'SA1K1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1K1Bi_to_type"("AggregateOneEntityBinary"."SA1K1Bi_entity")', 'AggregateOneEntityBinary', 'SA1K1Bi_entity', '-ngs_SA1K1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1L0Bi_type-', 'SA1L0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1L0Bi_to_type"("AggregateOneEntityBinary"."SA1L0Bi_entity")', 'AggregateOneEntityBinary', 'SA1L0Bi_entity', '-ngs_SA1L0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1L1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1L1Bi_type-', 'SA1L1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1L1Bi_to_type"("AggregateOneEntityBinary"."SA1L1Bi_entity")', 'AggregateOneEntityBinary', 'SA1L1Bi_entity', '-ngs_SA1L1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1Q1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1Q1Bi_type-', 'SA1Q1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1Q1Bi_to_type"("AggregateOneEntityBinary"."SA1Q1Bi_entity")', 'AggregateOneEntityBinary', 'SA1Q1Bi_entity', '-ngs_SA1Q1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1S0Bi_type-', 'SA1S0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1S0Bi_to_type"("AggregateOneEntityBinary"."SA1S0Bi_entity")', 'AggregateOneEntityBinary', 'SA1S0Bi_entity', '-ngs_SA1S0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1S1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1S1Bi_type-', 'SA1S1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1S1Bi_to_type"("AggregateOneEntityBinary"."SA1S1Bi_entity")', 'AggregateOneEntityBinary', 'SA1S1Bi_entity', '-ngs_SA1S1Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V0Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1V0Bi_type-', 'SA1V0Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1V0Bi_to_type"("AggregateOneEntityBinary"."SA1V0Bi_entity")', 'AggregateOneEntityBinary', 'SA1V0Bi_entity', '-ngs_SA1V0Bi_type-');

SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."-ngs_SA1V1Bi_type-")', 'AggregateOneEntityBinary', '-ngs_SA1V1Bi_type-', 'SA1V1Bi_entity');
SELECT "-NGS-".Create_Type_Cast('"AggregateOneEntityBinary"."cast_SA1V1Bi_to_type"("AggregateOneEntityBinary"."SA1V1Bi_entity")', 'AggregateOneEntityBinary', 'SA1V1Bi_entity', '-ngs_SA1V1Bi_type-');
UPDATE "AggregateOneEntityBinary"."BA0A0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0A1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0C0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0C1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0K0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0K1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0L0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0L1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0Q1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0S0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0S1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0V0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA0V1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1A0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1A0Bi" SET "p1A0Bi" = '{}' WHERE "p1A0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1A1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1A1Bi" SET "p1A1Bi" = '{}' WHERE "p1A1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1Bi" SET "p1Bi" = '' WHERE "p1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1C0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1C0Bi" SET "p1C0Bi" = '{}' WHERE "p1C0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1C1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1C1Bi" SET "p1C1Bi" = '{}' WHERE "p1C1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1K0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1K0Bi" SET "p1K0Bi" = '{}' WHERE "p1K0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1K1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1K1Bi" SET "p1K1Bi" = '{}' WHERE "p1K1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1L0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1L0Bi" SET "p1L0Bi" = '{}' WHERE "p1L0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1L1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1L1Bi" SET "p1L1Bi" = '{}' WHERE "p1L1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1Q1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1Q1Bi" SET "p1Q1Bi" = '{}' WHERE "p1Q1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1S0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1S0Bi" SET "p1S0Bi" = '{}' WHERE "p1S0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1S1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1S1Bi" SET "p1S1Bi" = '{}' WHERE "p1S1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1V0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1V0Bi" SET "p1V0Bi" = '{}' WHERE "p1V0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BA1V1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1V1Bi" SET "p1V1Bi" = '{}' WHERE "p1V1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0A0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0A1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0C0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0C1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0K0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0K1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0L0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0L1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0Q1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0S0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0S1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0V0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA0V1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1A0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1A0Bi" SET "p1A0Bi" = '{}' WHERE "p1A0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1A1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1A1Bi" SET "p1A1Bi" = '{}' WHERE "p1A1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1Bi" SET "p1Bi" = '' WHERE "p1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1C0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1C0Bi" SET "p1C0Bi" = '{}' WHERE "p1C0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1C1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1C1Bi" SET "p1C1Bi" = '{}' WHERE "p1C1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1K0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1K0Bi" SET "p1K0Bi" = '{}' WHERE "p1K0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1K1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1K1Bi" SET "p1K1Bi" = '{}' WHERE "p1K1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1L0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1L0Bi" SET "p1L0Bi" = '{}' WHERE "p1L0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1L1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1L1Bi" SET "p1L1Bi" = '{}' WHERE "p1L1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1Q1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1Q1Bi" SET "p1Q1Bi" = '{}' WHERE "p1Q1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1S0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1S0Bi" SET "p1S0Bi" = '{}' WHERE "p1S0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1S1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1S1Bi" SET "p1S1Bi" = '{}' WHERE "p1S1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1V0Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1V0Bi" SET "p1V0Bi" = '{}' WHERE "p1V0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."GA1V1Bi" SET "ID" = '00000000-0000-0000-0000-000000000000' WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1V1Bi" SET "p1V1Bi" = '{}' WHERE "p1V1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0A0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0A1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0C0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0C1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0K0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0K1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0L0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0L1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0Q1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0S0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0S1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0V0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA0V1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1A0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1A0Bi" SET "p1A0Bi" = '{}' WHERE "p1A0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1A1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1A1Bi" SET "p1A1Bi" = '{}' WHERE "p1A1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1Bi" SET "p1Bi" = '' WHERE "p1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1C0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1C0Bi" SET "p1C0Bi" = '{}' WHERE "p1C0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1C1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1C1Bi" SET "p1C1Bi" = '{}' WHERE "p1C1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1K0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1K0Bi" SET "p1K0Bi" = '{}' WHERE "p1K0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1K1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1K1Bi" SET "p1K1Bi" = '{}' WHERE "p1K1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1L0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1L0Bi" SET "p1L0Bi" = '{}' WHERE "p1L0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1L1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1L1Bi" SET "p1L1Bi" = '{}' WHERE "p1L1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1Q1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1Q1Bi" SET "p1Q1Bi" = '{}' WHERE "p1Q1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1S0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1S0Bi" SET "p1S0Bi" = '{}' WHERE "p1S0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1S1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1S1Bi" SET "p1S1Bi" = '{}' WHERE "p1S1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1V0Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1V0Bi" SET "p1V0Bi" = '{}' WHERE "p1V0Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."SA1V1Bi" SET "ID" = 0 WHERE "ID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1V1Bi" SET "p1V1Bi" = '{}' WHERE "p1V1Bi" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0A0Bi" SET "BA0A0BiID" = 0 WHERE "BA0A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0A1Bi" SET "BA0A1BiID" = 0 WHERE "BA0A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0Bi" SET "BA0BiID" = 0 WHERE "BA0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0C0Bi" SET "BA0C0BiID" = 0 WHERE "BA0C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0C1Bi" SET "BA0C1BiID" = 0 WHERE "BA0C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0K0Bi" SET "BA0K0BiID" = 0 WHERE "BA0K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0K1Bi" SET "BA0K1BiID" = 0 WHERE "BA0K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0L0Bi" SET "BA0L0BiID" = 0 WHERE "BA0L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0L1Bi" SET "BA0L1BiID" = 0 WHERE "BA0L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0Q1Bi" SET "BA0Q1BiID" = 0 WHERE "BA0Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0S0Bi" SET "BA0S0BiID" = 0 WHERE "BA0S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0S1Bi" SET "BA0S1BiID" = 0 WHERE "BA0S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0V0Bi" SET "BA0V0BiID" = 0 WHERE "BA0V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE0V1Bi" SET "BA0V1BiID" = 0 WHERE "BA0V1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1A0Bi" SET "BA1A0BiID" = 0 WHERE "BA1A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1A1Bi" SET "BA1A1BiID" = 0 WHERE "BA1A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1Bi" SET "BA1BiID" = 0 WHERE "BA1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1C0Bi" SET "BA1C0BiID" = 0 WHERE "BA1C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1C1Bi" SET "BA1C1BiID" = 0 WHERE "BA1C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1K0Bi" SET "BA1K0BiID" = 0 WHERE "BA1K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1K1Bi" SET "BA1K1BiID" = 0 WHERE "BA1K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1L0Bi" SET "BA1L0BiID" = 0 WHERE "BA1L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1L1Bi" SET "BA1L1BiID" = 0 WHERE "BA1L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1Q1Bi" SET "BA1Q1BiID" = 0 WHERE "BA1Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1S0Bi" SET "BA1S0BiID" = 0 WHERE "BA1S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1S1Bi" SET "BA1S1BiID" = 0 WHERE "BA1S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1V0Bi" SET "BA1V0BiID" = 0 WHERE "BA1V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."BE1V1Bi" SET "BA1V1BiID" = 0 WHERE "BA1V1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0A0Bi" SET "GA0A0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0A1Bi" SET "GA0A1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0Bi" SET "GA0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0C0Bi" SET "GA0C0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0C1Bi" SET "GA0C1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0K0Bi" SET "GA0K0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0K1Bi" SET "GA0K1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0L0Bi" SET "GA0L0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0L1Bi" SET "GA0L1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0Q1Bi" SET "GA0Q1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0S0Bi" SET "GA0S0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0S1Bi" SET "GA0S1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0V0Bi" SET "GA0V0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE0V1Bi" SET "GA0V1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA0V1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1A0Bi" SET "GA1A0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1A1Bi" SET "GA1A1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1Bi" SET "GA1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1C0Bi" SET "GA1C0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1C1Bi" SET "GA1C1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1K0Bi" SET "GA1K0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1K1Bi" SET "GA1K1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1L0Bi" SET "GA1L0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1L1Bi" SET "GA1L1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1Q1Bi" SET "GA1Q1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1S0Bi" SET "GA1S0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1S1Bi" SET "GA1S1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1V0Bi" SET "GA1V0BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."GE1V1Bi" SET "GA1V1BiID" = '00000000-0000-0000-0000-000000000000' WHERE "GA1V1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0A0Bi" SET "SA0A0BiID" = 0 WHERE "SA0A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0A1Bi" SET "SA0A1BiID" = 0 WHERE "SA0A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0Bi" SET "SA0BiID" = 0 WHERE "SA0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0C0Bi" SET "SA0C0BiID" = 0 WHERE "SA0C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0C1Bi" SET "SA0C1BiID" = 0 WHERE "SA0C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0K0Bi" SET "SA0K0BiID" = 0 WHERE "SA0K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0K1Bi" SET "SA0K1BiID" = 0 WHERE "SA0K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0L0Bi" SET "SA0L0BiID" = 0 WHERE "SA0L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0L1Bi" SET "SA0L1BiID" = 0 WHERE "SA0L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0Q1Bi" SET "SA0Q1BiID" = 0 WHERE "SA0Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0S0Bi" SET "SA0S0BiID" = 0 WHERE "SA0S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0S1Bi" SET "SA0S1BiID" = 0 WHERE "SA0S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0V0Bi" SET "SA0V0BiID" = 0 WHERE "SA0V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE0V1Bi" SET "SA0V1BiID" = 0 WHERE "SA0V1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1A0Bi" SET "SA1A0BiID" = 0 WHERE "SA1A0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1A1Bi" SET "SA1A1BiID" = 0 WHERE "SA1A1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1Bi" SET "SA1BiID" = 0 WHERE "SA1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1C0Bi" SET "SA1C0BiID" = 0 WHERE "SA1C0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1C1Bi" SET "SA1C1BiID" = 0 WHERE "SA1C1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1K0Bi" SET "SA1K0BiID" = 0 WHERE "SA1K0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1K1Bi" SET "SA1K1BiID" = 0 WHERE "SA1K1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1L0Bi" SET "SA1L0BiID" = 0 WHERE "SA1L0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1L1Bi" SET "SA1L1BiID" = 0 WHERE "SA1L1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1Q1Bi" SET "SA1Q1BiID" = 0 WHERE "SA1Q1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1S0Bi" SET "SA1S0BiID" = 0 WHERE "SA1S0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1S1Bi" SET "SA1S1BiID" = 0 WHERE "SA1S1BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1V0Bi" SET "SA1V0BiID" = 0 WHERE "SA1V0BiID" IS NULL;
UPDATE "AggregateOneEntityBinary"."SE1V1Bi" SET "SA1V1BiID" = 0 WHERE "SA1V1BiID" IS NULL;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0A0Bi" ADD CONSTRAINT "pk_BA0A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0A0Bi" ON "AggregateOneEntityBinary"."BA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0A1Bi" ADD CONSTRAINT "pk_BA0A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0A1Bi" ON "AggregateOneEntityBinary"."BA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0Bi" ADD CONSTRAINT "pk_BA0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0Bi" ON "AggregateOneEntityBinary"."BA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0C0Bi" ADD CONSTRAINT "pk_BA0C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0C0Bi" ON "AggregateOneEntityBinary"."BA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0C1Bi" ADD CONSTRAINT "pk_BA0C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0C1Bi" ON "AggregateOneEntityBinary"."BA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0K0Bi" ADD CONSTRAINT "pk_BA0K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0K0Bi" ON "AggregateOneEntityBinary"."BA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0K1Bi" ADD CONSTRAINT "pk_BA0K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0K1Bi" ON "AggregateOneEntityBinary"."BA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0L0Bi" ADD CONSTRAINT "pk_BA0L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0L0Bi" ON "AggregateOneEntityBinary"."BA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0L1Bi" ADD CONSTRAINT "pk_BA0L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0L1Bi" ON "AggregateOneEntityBinary"."BA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0Q1Bi" ADD CONSTRAINT "pk_BA0Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0Q1Bi" ON "AggregateOneEntityBinary"."BA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0S0Bi" ADD CONSTRAINT "pk_BA0S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0S0Bi" ON "AggregateOneEntityBinary"."BA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0S1Bi" ADD CONSTRAINT "pk_BA0S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0S1Bi" ON "AggregateOneEntityBinary"."BA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0V0Bi" ADD CONSTRAINT "pk_BA0V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0V0Bi" ON "AggregateOneEntityBinary"."BA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA0V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA0V1Bi" ADD CONSTRAINT "pk_BA0V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA0V1Bi" ON "AggregateOneEntityBinary"."BA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1A0Bi" ADD CONSTRAINT "pk_BA1A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1A0Bi" ON "AggregateOneEntityBinary"."BA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1A1Bi" ADD CONSTRAINT "pk_BA1A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1A1Bi" ON "AggregateOneEntityBinary"."BA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1Bi" ADD CONSTRAINT "pk_BA1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1Bi" ON "AggregateOneEntityBinary"."BA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1C0Bi" ADD CONSTRAINT "pk_BA1C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1C0Bi" ON "AggregateOneEntityBinary"."BA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1C1Bi" ADD CONSTRAINT "pk_BA1C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1C1Bi" ON "AggregateOneEntityBinary"."BA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1K0Bi" ADD CONSTRAINT "pk_BA1K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1K0Bi" ON "AggregateOneEntityBinary"."BA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1K1Bi" ADD CONSTRAINT "pk_BA1K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1K1Bi" ON "AggregateOneEntityBinary"."BA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1L0Bi" ADD CONSTRAINT "pk_BA1L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1L0Bi" ON "AggregateOneEntityBinary"."BA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1L1Bi" ADD CONSTRAINT "pk_BA1L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1L1Bi" ON "AggregateOneEntityBinary"."BA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1Q1Bi" ADD CONSTRAINT "pk_BA1Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1Q1Bi" ON "AggregateOneEntityBinary"."BA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1S0Bi" ADD CONSTRAINT "pk_BA1S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1S0Bi" ON "AggregateOneEntityBinary"."BA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1S1Bi" ADD CONSTRAINT "pk_BA1S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1S1Bi" ON "AggregateOneEntityBinary"."BA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1V0Bi" ADD CONSTRAINT "pk_BA1V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1V0Bi" ON "AggregateOneEntityBinary"."BA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BA1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BA1V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BA1V1Bi" ADD CONSTRAINT "pk_BA1V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_BA1V1Bi" ON "AggregateOneEntityBinary"."BA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0A0Bi" ADD CONSTRAINT "pk_GA0A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0A0Bi" ON "AggregateOneEntityBinary"."GA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0A1Bi" ADD CONSTRAINT "pk_GA0A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0A1Bi" ON "AggregateOneEntityBinary"."GA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0Bi" ADD CONSTRAINT "pk_GA0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0Bi" ON "AggregateOneEntityBinary"."GA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0C0Bi" ADD CONSTRAINT "pk_GA0C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0C0Bi" ON "AggregateOneEntityBinary"."GA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0C1Bi" ADD CONSTRAINT "pk_GA0C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0C1Bi" ON "AggregateOneEntityBinary"."GA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0K0Bi" ADD CONSTRAINT "pk_GA0K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0K0Bi" ON "AggregateOneEntityBinary"."GA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0K1Bi" ADD CONSTRAINT "pk_GA0K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0K1Bi" ON "AggregateOneEntityBinary"."GA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0L0Bi" ADD CONSTRAINT "pk_GA0L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0L0Bi" ON "AggregateOneEntityBinary"."GA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0L1Bi" ADD CONSTRAINT "pk_GA0L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0L1Bi" ON "AggregateOneEntityBinary"."GA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0Q1Bi" ADD CONSTRAINT "pk_GA0Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0Q1Bi" ON "AggregateOneEntityBinary"."GA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0S0Bi" ADD CONSTRAINT "pk_GA0S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0S0Bi" ON "AggregateOneEntityBinary"."GA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0S1Bi" ADD CONSTRAINT "pk_GA0S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0S1Bi" ON "AggregateOneEntityBinary"."GA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0V0Bi" ADD CONSTRAINT "pk_GA0V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0V0Bi" ON "AggregateOneEntityBinary"."GA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA0V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA0V1Bi" ADD CONSTRAINT "pk_GA0V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA0V1Bi" ON "AggregateOneEntityBinary"."GA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1A0Bi" ADD CONSTRAINT "pk_GA1A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1A0Bi" ON "AggregateOneEntityBinary"."GA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1A1Bi" ADD CONSTRAINT "pk_GA1A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1A1Bi" ON "AggregateOneEntityBinary"."GA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1Bi" ADD CONSTRAINT "pk_GA1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1Bi" ON "AggregateOneEntityBinary"."GA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1C0Bi" ADD CONSTRAINT "pk_GA1C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1C0Bi" ON "AggregateOneEntityBinary"."GA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1C1Bi" ADD CONSTRAINT "pk_GA1C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1C1Bi" ON "AggregateOneEntityBinary"."GA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1K0Bi" ADD CONSTRAINT "pk_GA1K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1K0Bi" ON "AggregateOneEntityBinary"."GA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1K1Bi" ADD CONSTRAINT "pk_GA1K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1K1Bi" ON "AggregateOneEntityBinary"."GA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1L0Bi" ADD CONSTRAINT "pk_GA1L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1L0Bi" ON "AggregateOneEntityBinary"."GA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1L1Bi" ADD CONSTRAINT "pk_GA1L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1L1Bi" ON "AggregateOneEntityBinary"."GA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1Q1Bi" ADD CONSTRAINT "pk_GA1Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1Q1Bi" ON "AggregateOneEntityBinary"."GA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1S0Bi" ADD CONSTRAINT "pk_GA1S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1S0Bi" ON "AggregateOneEntityBinary"."GA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1S1Bi" ADD CONSTRAINT "pk_GA1S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1S1Bi" ON "AggregateOneEntityBinary"."GA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1V0Bi" ADD CONSTRAINT "pk_GA1V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1V0Bi" ON "AggregateOneEntityBinary"."GA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GA1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GA1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GA1V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GA1V1Bi" ADD CONSTRAINT "pk_GA1V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_GA1V1Bi" ON "AggregateOneEntityBinary"."GA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0A0Bi" ADD CONSTRAINT "pk_SA0A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0A0Bi" ON "AggregateOneEntityBinary"."SA0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0A1Bi" ADD CONSTRAINT "pk_SA0A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0A1Bi" ON "AggregateOneEntityBinary"."SA0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0Bi" ADD CONSTRAINT "pk_SA0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0Bi" ON "AggregateOneEntityBinary"."SA0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0C0Bi" ADD CONSTRAINT "pk_SA0C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0C0Bi" ON "AggregateOneEntityBinary"."SA0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0C1Bi" ADD CONSTRAINT "pk_SA0C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0C1Bi" ON "AggregateOneEntityBinary"."SA0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0K0Bi" ADD CONSTRAINT "pk_SA0K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0K0Bi" ON "AggregateOneEntityBinary"."SA0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0K1Bi" ADD CONSTRAINT "pk_SA0K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0K1Bi" ON "AggregateOneEntityBinary"."SA0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0L0Bi" ADD CONSTRAINT "pk_SA0L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0L0Bi" ON "AggregateOneEntityBinary"."SA0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0L1Bi" ADD CONSTRAINT "pk_SA0L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0L1Bi" ON "AggregateOneEntityBinary"."SA0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0Q1Bi" ADD CONSTRAINT "pk_SA0Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0Q1Bi" ON "AggregateOneEntityBinary"."SA0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0S0Bi" ADD CONSTRAINT "pk_SA0S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0S0Bi" ON "AggregateOneEntityBinary"."SA0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0S1Bi" ADD CONSTRAINT "pk_SA0S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0S1Bi" ON "AggregateOneEntityBinary"."SA0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0V0Bi" ADD CONSTRAINT "pk_SA0V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0V0Bi" ON "AggregateOneEntityBinary"."SA0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA0V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA0V1Bi" ADD CONSTRAINT "pk_SA0V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA0V1Bi" ON "AggregateOneEntityBinary"."SA0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1A0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1A0Bi" ADD CONSTRAINT "pk_SA1A0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1A0Bi" ON "AggregateOneEntityBinary"."SA1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1A1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1A1Bi" ADD CONSTRAINT "pk_SA1A1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1A1Bi" ON "AggregateOneEntityBinary"."SA1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1Bi" ADD CONSTRAINT "pk_SA1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1Bi" ON "AggregateOneEntityBinary"."SA1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1C0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1C0Bi" ADD CONSTRAINT "pk_SA1C0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1C0Bi" ON "AggregateOneEntityBinary"."SA1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1C1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1C1Bi" ADD CONSTRAINT "pk_SA1C1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1C1Bi" ON "AggregateOneEntityBinary"."SA1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1K0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1K0Bi" ADD CONSTRAINT "pk_SA1K0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1K0Bi" ON "AggregateOneEntityBinary"."SA1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1K1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1K1Bi" ADD CONSTRAINT "pk_SA1K1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1K1Bi" ON "AggregateOneEntityBinary"."SA1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1L0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1L0Bi" ADD CONSTRAINT "pk_SA1L0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1L0Bi" ON "AggregateOneEntityBinary"."SA1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1L1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1L1Bi" ADD CONSTRAINT "pk_SA1L1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1L1Bi" ON "AggregateOneEntityBinary"."SA1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1Q1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1Q1Bi" ADD CONSTRAINT "pk_SA1Q1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1Q1Bi" ON "AggregateOneEntityBinary"."SA1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1S0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1S0Bi" ADD CONSTRAINT "pk_SA1S0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1S0Bi" ON "AggregateOneEntityBinary"."SA1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1S1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1S1Bi" ADD CONSTRAINT "pk_SA1S1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1S1Bi" ON "AggregateOneEntityBinary"."SA1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1V0Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1V0Bi" ADD CONSTRAINT "pk_SA1V0Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1V0Bi" ON "AggregateOneEntityBinary"."SA1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SA1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('ID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SA1V1Bi. Expected primary key: ID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SA1V1Bi" ADD CONSTRAINT "pk_SA1V1Bi" PRIMARY KEY("ID");
		COMMENT ON CONSTRAINT "pk_SA1V1Bi" ON "AggregateOneEntityBinary"."SA1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0A0Bi. Expected primary key: BA0A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0A0Bi" ADD CONSTRAINT "pk_BE0A0Bi" PRIMARY KEY("BA0A0BiID");
		COMMENT ON CONSTRAINT "pk_BE0A0Bi" ON "AggregateOneEntityBinary"."BE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0A1Bi. Expected primary key: BA0A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0A1Bi" ADD CONSTRAINT "pk_BE0A1Bi" PRIMARY KEY("BA0A1BiID");
		COMMENT ON CONSTRAINT "pk_BE0A1Bi" ON "AggregateOneEntityBinary"."BE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0Bi. Expected primary key: BA0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0Bi" ADD CONSTRAINT "pk_BE0Bi" PRIMARY KEY("BA0BiID");
		COMMENT ON CONSTRAINT "pk_BE0Bi" ON "AggregateOneEntityBinary"."BE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0C0Bi. Expected primary key: BA0C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0C0Bi" ADD CONSTRAINT "pk_BE0C0Bi" PRIMARY KEY("BA0C0BiID");
		COMMENT ON CONSTRAINT "pk_BE0C0Bi" ON "AggregateOneEntityBinary"."BE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0C1Bi. Expected primary key: BA0C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0C1Bi" ADD CONSTRAINT "pk_BE0C1Bi" PRIMARY KEY("BA0C1BiID");
		COMMENT ON CONSTRAINT "pk_BE0C1Bi" ON "AggregateOneEntityBinary"."BE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0K0Bi. Expected primary key: BA0K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0K0Bi" ADD CONSTRAINT "pk_BE0K0Bi" PRIMARY KEY("BA0K0BiID");
		COMMENT ON CONSTRAINT "pk_BE0K0Bi" ON "AggregateOneEntityBinary"."BE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0K1Bi. Expected primary key: BA0K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0K1Bi" ADD CONSTRAINT "pk_BE0K1Bi" PRIMARY KEY("BA0K1BiID");
		COMMENT ON CONSTRAINT "pk_BE0K1Bi" ON "AggregateOneEntityBinary"."BE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0L0Bi. Expected primary key: BA0L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0L0Bi" ADD CONSTRAINT "pk_BE0L0Bi" PRIMARY KEY("BA0L0BiID");
		COMMENT ON CONSTRAINT "pk_BE0L0Bi" ON "AggregateOneEntityBinary"."BE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0L1Bi. Expected primary key: BA0L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0L1Bi" ADD CONSTRAINT "pk_BE0L1Bi" PRIMARY KEY("BA0L1BiID");
		COMMENT ON CONSTRAINT "pk_BE0L1Bi" ON "AggregateOneEntityBinary"."BE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0Q1Bi. Expected primary key: BA0Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0Q1Bi" ADD CONSTRAINT "pk_BE0Q1Bi" PRIMARY KEY("BA0Q1BiID");
		COMMENT ON CONSTRAINT "pk_BE0Q1Bi" ON "AggregateOneEntityBinary"."BE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0S0Bi. Expected primary key: BA0S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0S0Bi" ADD CONSTRAINT "pk_BE0S0Bi" PRIMARY KEY("BA0S0BiID");
		COMMENT ON CONSTRAINT "pk_BE0S0Bi" ON "AggregateOneEntityBinary"."BE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0S1Bi. Expected primary key: BA0S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0S1Bi" ADD CONSTRAINT "pk_BE0S1Bi" PRIMARY KEY("BA0S1BiID");
		COMMENT ON CONSTRAINT "pk_BE0S1Bi" ON "AggregateOneEntityBinary"."BE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0V0Bi. Expected primary key: BA0V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0V0Bi" ADD CONSTRAINT "pk_BE0V0Bi" PRIMARY KEY("BA0V0BiID");
		COMMENT ON CONSTRAINT "pk_BE0V0Bi" ON "AggregateOneEntityBinary"."BE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA0V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE0V1Bi. Expected primary key: BA0V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE0V1Bi" ADD CONSTRAINT "pk_BE0V1Bi" PRIMARY KEY("BA0V1BiID");
		COMMENT ON CONSTRAINT "pk_BE0V1Bi" ON "AggregateOneEntityBinary"."BE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1A0Bi. Expected primary key: BA1A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" ADD CONSTRAINT "pk_BE1A0Bi" PRIMARY KEY("BA1A0BiID");
		COMMENT ON CONSTRAINT "pk_BE1A0Bi" ON "AggregateOneEntityBinary"."BE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1A1Bi. Expected primary key: BA1A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" ADD CONSTRAINT "pk_BE1A1Bi" PRIMARY KEY("BA1A1BiID");
		COMMENT ON CONSTRAINT "pk_BE1A1Bi" ON "AggregateOneEntityBinary"."BE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1Bi. Expected primary key: BA1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" ADD CONSTRAINT "pk_BE1Bi" PRIMARY KEY("BA1BiID");
		COMMENT ON CONSTRAINT "pk_BE1Bi" ON "AggregateOneEntityBinary"."BE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1C0Bi. Expected primary key: BA1C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" ADD CONSTRAINT "pk_BE1C0Bi" PRIMARY KEY("BA1C0BiID");
		COMMENT ON CONSTRAINT "pk_BE1C0Bi" ON "AggregateOneEntityBinary"."BE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1C1Bi. Expected primary key: BA1C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" ADD CONSTRAINT "pk_BE1C1Bi" PRIMARY KEY("BA1C1BiID");
		COMMENT ON CONSTRAINT "pk_BE1C1Bi" ON "AggregateOneEntityBinary"."BE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1K0Bi. Expected primary key: BA1K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" ADD CONSTRAINT "pk_BE1K0Bi" PRIMARY KEY("BA1K0BiID");
		COMMENT ON CONSTRAINT "pk_BE1K0Bi" ON "AggregateOneEntityBinary"."BE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1K1Bi. Expected primary key: BA1K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" ADD CONSTRAINT "pk_BE1K1Bi" PRIMARY KEY("BA1K1BiID");
		COMMENT ON CONSTRAINT "pk_BE1K1Bi" ON "AggregateOneEntityBinary"."BE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1L0Bi. Expected primary key: BA1L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" ADD CONSTRAINT "pk_BE1L0Bi" PRIMARY KEY("BA1L0BiID");
		COMMENT ON CONSTRAINT "pk_BE1L0Bi" ON "AggregateOneEntityBinary"."BE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1L1Bi. Expected primary key: BA1L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" ADD CONSTRAINT "pk_BE1L1Bi" PRIMARY KEY("BA1L1BiID");
		COMMENT ON CONSTRAINT "pk_BE1L1Bi" ON "AggregateOneEntityBinary"."BE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1Q1Bi. Expected primary key: BA1Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ADD CONSTRAINT "pk_BE1Q1Bi" PRIMARY KEY("BA1Q1BiID");
		COMMENT ON CONSTRAINT "pk_BE1Q1Bi" ON "AggregateOneEntityBinary"."BE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1S0Bi. Expected primary key: BA1S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" ADD CONSTRAINT "pk_BE1S0Bi" PRIMARY KEY("BA1S0BiID");
		COMMENT ON CONSTRAINT "pk_BE1S0Bi" ON "AggregateOneEntityBinary"."BE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1S1Bi. Expected primary key: BA1S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" ADD CONSTRAINT "pk_BE1S1Bi" PRIMARY KEY("BA1S1BiID");
		COMMENT ON CONSTRAINT "pk_BE1S1Bi" ON "AggregateOneEntityBinary"."BE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1V0Bi. Expected primary key: BA1V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" ADD CONSTRAINT "pk_BE1V0Bi" PRIMARY KEY("BA1V0BiID");
		COMMENT ON CONSTRAINT "pk_BE1V0Bi" ON "AggregateOneEntityBinary"."BE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BE1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."BE1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('BA1V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.BE1V1Bi. Expected primary key: BA1V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" ADD CONSTRAINT "pk_BE1V1Bi" PRIMARY KEY("BA1V1BiID");
		COMMENT ON CONSTRAINT "pk_BE1V1Bi" ON "AggregateOneEntityBinary"."BE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0A0Bi. Expected primary key: GA0A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0A0Bi" ADD CONSTRAINT "pk_GE0A0Bi" PRIMARY KEY("GA0A0BiID");
		COMMENT ON CONSTRAINT "pk_GE0A0Bi" ON "AggregateOneEntityBinary"."GE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0A1Bi. Expected primary key: GA0A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0A1Bi" ADD CONSTRAINT "pk_GE0A1Bi" PRIMARY KEY("GA0A1BiID");
		COMMENT ON CONSTRAINT "pk_GE0A1Bi" ON "AggregateOneEntityBinary"."GE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0Bi. Expected primary key: GA0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0Bi" ADD CONSTRAINT "pk_GE0Bi" PRIMARY KEY("GA0BiID");
		COMMENT ON CONSTRAINT "pk_GE0Bi" ON "AggregateOneEntityBinary"."GE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0C0Bi. Expected primary key: GA0C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0C0Bi" ADD CONSTRAINT "pk_GE0C0Bi" PRIMARY KEY("GA0C0BiID");
		COMMENT ON CONSTRAINT "pk_GE0C0Bi" ON "AggregateOneEntityBinary"."GE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0C1Bi. Expected primary key: GA0C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0C1Bi" ADD CONSTRAINT "pk_GE0C1Bi" PRIMARY KEY("GA0C1BiID");
		COMMENT ON CONSTRAINT "pk_GE0C1Bi" ON "AggregateOneEntityBinary"."GE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0K0Bi. Expected primary key: GA0K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0K0Bi" ADD CONSTRAINT "pk_GE0K0Bi" PRIMARY KEY("GA0K0BiID");
		COMMENT ON CONSTRAINT "pk_GE0K0Bi" ON "AggregateOneEntityBinary"."GE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0K1Bi. Expected primary key: GA0K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0K1Bi" ADD CONSTRAINT "pk_GE0K1Bi" PRIMARY KEY("GA0K1BiID");
		COMMENT ON CONSTRAINT "pk_GE0K1Bi" ON "AggregateOneEntityBinary"."GE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0L0Bi. Expected primary key: GA0L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0L0Bi" ADD CONSTRAINT "pk_GE0L0Bi" PRIMARY KEY("GA0L0BiID");
		COMMENT ON CONSTRAINT "pk_GE0L0Bi" ON "AggregateOneEntityBinary"."GE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0L1Bi. Expected primary key: GA0L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0L1Bi" ADD CONSTRAINT "pk_GE0L1Bi" PRIMARY KEY("GA0L1BiID");
		COMMENT ON CONSTRAINT "pk_GE0L1Bi" ON "AggregateOneEntityBinary"."GE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0Q1Bi. Expected primary key: GA0Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0Q1Bi" ADD CONSTRAINT "pk_GE0Q1Bi" PRIMARY KEY("GA0Q1BiID");
		COMMENT ON CONSTRAINT "pk_GE0Q1Bi" ON "AggregateOneEntityBinary"."GE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0S0Bi. Expected primary key: GA0S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0S0Bi" ADD CONSTRAINT "pk_GE0S0Bi" PRIMARY KEY("GA0S0BiID");
		COMMENT ON CONSTRAINT "pk_GE0S0Bi" ON "AggregateOneEntityBinary"."GE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0S1Bi. Expected primary key: GA0S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0S1Bi" ADD CONSTRAINT "pk_GE0S1Bi" PRIMARY KEY("GA0S1BiID");
		COMMENT ON CONSTRAINT "pk_GE0S1Bi" ON "AggregateOneEntityBinary"."GE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0V0Bi. Expected primary key: GA0V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0V0Bi" ADD CONSTRAINT "pk_GE0V0Bi" PRIMARY KEY("GA0V0BiID");
		COMMENT ON CONSTRAINT "pk_GE0V0Bi" ON "AggregateOneEntityBinary"."GE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA0V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE0V1Bi. Expected primary key: GA0V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE0V1Bi" ADD CONSTRAINT "pk_GE0V1Bi" PRIMARY KEY("GA0V1BiID");
		COMMENT ON CONSTRAINT "pk_GE0V1Bi" ON "AggregateOneEntityBinary"."GE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1A0Bi. Expected primary key: GA1A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" ADD CONSTRAINT "pk_GE1A0Bi" PRIMARY KEY("GA1A0BiID");
		COMMENT ON CONSTRAINT "pk_GE1A0Bi" ON "AggregateOneEntityBinary"."GE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1A1Bi. Expected primary key: GA1A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" ADD CONSTRAINT "pk_GE1A1Bi" PRIMARY KEY("GA1A1BiID");
		COMMENT ON CONSTRAINT "pk_GE1A1Bi" ON "AggregateOneEntityBinary"."GE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1Bi. Expected primary key: GA1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" ADD CONSTRAINT "pk_GE1Bi" PRIMARY KEY("GA1BiID");
		COMMENT ON CONSTRAINT "pk_GE1Bi" ON "AggregateOneEntityBinary"."GE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1C0Bi. Expected primary key: GA1C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" ADD CONSTRAINT "pk_GE1C0Bi" PRIMARY KEY("GA1C0BiID");
		COMMENT ON CONSTRAINT "pk_GE1C0Bi" ON "AggregateOneEntityBinary"."GE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1C1Bi. Expected primary key: GA1C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" ADD CONSTRAINT "pk_GE1C1Bi" PRIMARY KEY("GA1C1BiID");
		COMMENT ON CONSTRAINT "pk_GE1C1Bi" ON "AggregateOneEntityBinary"."GE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1K0Bi. Expected primary key: GA1K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" ADD CONSTRAINT "pk_GE1K0Bi" PRIMARY KEY("GA1K0BiID");
		COMMENT ON CONSTRAINT "pk_GE1K0Bi" ON "AggregateOneEntityBinary"."GE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1K1Bi. Expected primary key: GA1K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" ADD CONSTRAINT "pk_GE1K1Bi" PRIMARY KEY("GA1K1BiID");
		COMMENT ON CONSTRAINT "pk_GE1K1Bi" ON "AggregateOneEntityBinary"."GE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1L0Bi. Expected primary key: GA1L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" ADD CONSTRAINT "pk_GE1L0Bi" PRIMARY KEY("GA1L0BiID");
		COMMENT ON CONSTRAINT "pk_GE1L0Bi" ON "AggregateOneEntityBinary"."GE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1L1Bi. Expected primary key: GA1L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" ADD CONSTRAINT "pk_GE1L1Bi" PRIMARY KEY("GA1L1BiID");
		COMMENT ON CONSTRAINT "pk_GE1L1Bi" ON "AggregateOneEntityBinary"."GE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1Q1Bi. Expected primary key: GA1Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ADD CONSTRAINT "pk_GE1Q1Bi" PRIMARY KEY("GA1Q1BiID");
		COMMENT ON CONSTRAINT "pk_GE1Q1Bi" ON "AggregateOneEntityBinary"."GE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1S0Bi. Expected primary key: GA1S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" ADD CONSTRAINT "pk_GE1S0Bi" PRIMARY KEY("GA1S0BiID");
		COMMENT ON CONSTRAINT "pk_GE1S0Bi" ON "AggregateOneEntityBinary"."GE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1S1Bi. Expected primary key: GA1S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" ADD CONSTRAINT "pk_GE1S1Bi" PRIMARY KEY("GA1S1BiID");
		COMMENT ON CONSTRAINT "pk_GE1S1Bi" ON "AggregateOneEntityBinary"."GE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1V0Bi. Expected primary key: GA1V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" ADD CONSTRAINT "pk_GE1V0Bi" PRIMARY KEY("GA1V0BiID");
		COMMENT ON CONSTRAINT "pk_GE1V0Bi" ON "AggregateOneEntityBinary"."GE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'GE1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."GE1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('GA1V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.GE1V1Bi. Expected primary key: GA1V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" ADD CONSTRAINT "pk_GE1V1Bi" PRIMARY KEY("GA1V1BiID");
		COMMENT ON CONSTRAINT "pk_GE1V1Bi" ON "AggregateOneEntityBinary"."GE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0A0Bi. Expected primary key: SA0A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0A0Bi" ADD CONSTRAINT "pk_SE0A0Bi" PRIMARY KEY("SA0A0BiID");
		COMMENT ON CONSTRAINT "pk_SE0A0Bi" ON "AggregateOneEntityBinary"."SE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0A1Bi. Expected primary key: SA0A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0A1Bi" ADD CONSTRAINT "pk_SE0A1Bi" PRIMARY KEY("SA0A1BiID");
		COMMENT ON CONSTRAINT "pk_SE0A1Bi" ON "AggregateOneEntityBinary"."SE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0Bi. Expected primary key: SA0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0Bi" ADD CONSTRAINT "pk_SE0Bi" PRIMARY KEY("SA0BiID");
		COMMENT ON CONSTRAINT "pk_SE0Bi" ON "AggregateOneEntityBinary"."SE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0C0Bi. Expected primary key: SA0C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0C0Bi" ADD CONSTRAINT "pk_SE0C0Bi" PRIMARY KEY("SA0C0BiID");
		COMMENT ON CONSTRAINT "pk_SE0C0Bi" ON "AggregateOneEntityBinary"."SE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0C1Bi. Expected primary key: SA0C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0C1Bi" ADD CONSTRAINT "pk_SE0C1Bi" PRIMARY KEY("SA0C1BiID");
		COMMENT ON CONSTRAINT "pk_SE0C1Bi" ON "AggregateOneEntityBinary"."SE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0K0Bi. Expected primary key: SA0K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0K0Bi" ADD CONSTRAINT "pk_SE0K0Bi" PRIMARY KEY("SA0K0BiID");
		COMMENT ON CONSTRAINT "pk_SE0K0Bi" ON "AggregateOneEntityBinary"."SE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0K1Bi. Expected primary key: SA0K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0K1Bi" ADD CONSTRAINT "pk_SE0K1Bi" PRIMARY KEY("SA0K1BiID");
		COMMENT ON CONSTRAINT "pk_SE0K1Bi" ON "AggregateOneEntityBinary"."SE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0L0Bi. Expected primary key: SA0L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0L0Bi" ADD CONSTRAINT "pk_SE0L0Bi" PRIMARY KEY("SA0L0BiID");
		COMMENT ON CONSTRAINT "pk_SE0L0Bi" ON "AggregateOneEntityBinary"."SE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0L1Bi. Expected primary key: SA0L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0L1Bi" ADD CONSTRAINT "pk_SE0L1Bi" PRIMARY KEY("SA0L1BiID");
		COMMENT ON CONSTRAINT "pk_SE0L1Bi" ON "AggregateOneEntityBinary"."SE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0Q1Bi. Expected primary key: SA0Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0Q1Bi" ADD CONSTRAINT "pk_SE0Q1Bi" PRIMARY KEY("SA0Q1BiID");
		COMMENT ON CONSTRAINT "pk_SE0Q1Bi" ON "AggregateOneEntityBinary"."SE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0S0Bi. Expected primary key: SA0S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0S0Bi" ADD CONSTRAINT "pk_SE0S0Bi" PRIMARY KEY("SA0S0BiID");
		COMMENT ON CONSTRAINT "pk_SE0S0Bi" ON "AggregateOneEntityBinary"."SE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0S1Bi. Expected primary key: SA0S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0S1Bi" ADD CONSTRAINT "pk_SE0S1Bi" PRIMARY KEY("SA0S1BiID");
		COMMENT ON CONSTRAINT "pk_SE0S1Bi" ON "AggregateOneEntityBinary"."SE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0V0Bi. Expected primary key: SA0V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0V0Bi" ADD CONSTRAINT "pk_SE0V0Bi" PRIMARY KEY("SA0V0BiID");
		COMMENT ON CONSTRAINT "pk_SE0V0Bi" ON "AggregateOneEntityBinary"."SE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE0V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE0V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA0V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE0V1Bi. Expected primary key: SA0V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE0V1Bi" ADD CONSTRAINT "pk_SE0V1Bi" PRIMARY KEY("SA0V1BiID");
		COMMENT ON CONSTRAINT "pk_SE0V1Bi" ON "AggregateOneEntityBinary"."SE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1A0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1A0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1A0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1A0Bi. Expected primary key: SA1A0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" ADD CONSTRAINT "pk_SE1A0Bi" PRIMARY KEY("SA1A0BiID");
		COMMENT ON CONSTRAINT "pk_SE1A0Bi" ON "AggregateOneEntityBinary"."SE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1A1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1A1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1A1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1A1Bi. Expected primary key: SA1A1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" ADD CONSTRAINT "pk_SE1A1Bi" PRIMARY KEY("SA1A1BiID");
		COMMENT ON CONSTRAINT "pk_SE1A1Bi" ON "AggregateOneEntityBinary"."SE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1Bi. Expected primary key: SA1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" ADD CONSTRAINT "pk_SE1Bi" PRIMARY KEY("SA1BiID");
		COMMENT ON CONSTRAINT "pk_SE1Bi" ON "AggregateOneEntityBinary"."SE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1C0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1C0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1C0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1C0Bi. Expected primary key: SA1C0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" ADD CONSTRAINT "pk_SE1C0Bi" PRIMARY KEY("SA1C0BiID");
		COMMENT ON CONSTRAINT "pk_SE1C0Bi" ON "AggregateOneEntityBinary"."SE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1C1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1C1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1C1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1C1Bi. Expected primary key: SA1C1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" ADD CONSTRAINT "pk_SE1C1Bi" PRIMARY KEY("SA1C1BiID");
		COMMENT ON CONSTRAINT "pk_SE1C1Bi" ON "AggregateOneEntityBinary"."SE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1K0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1K0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1K0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1K0Bi. Expected primary key: SA1K0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" ADD CONSTRAINT "pk_SE1K0Bi" PRIMARY KEY("SA1K0BiID");
		COMMENT ON CONSTRAINT "pk_SE1K0Bi" ON "AggregateOneEntityBinary"."SE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1K1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1K1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1K1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1K1Bi. Expected primary key: SA1K1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" ADD CONSTRAINT "pk_SE1K1Bi" PRIMARY KEY("SA1K1BiID");
		COMMENT ON CONSTRAINT "pk_SE1K1Bi" ON "AggregateOneEntityBinary"."SE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1L0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1L0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1L0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1L0Bi. Expected primary key: SA1L0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" ADD CONSTRAINT "pk_SE1L0Bi" PRIMARY KEY("SA1L0BiID");
		COMMENT ON CONSTRAINT "pk_SE1L0Bi" ON "AggregateOneEntityBinary"."SE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1L1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1L1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1L1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1L1Bi. Expected primary key: SA1L1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" ADD CONSTRAINT "pk_SE1L1Bi" PRIMARY KEY("SA1L1BiID");
		COMMENT ON CONSTRAINT "pk_SE1L1Bi" ON "AggregateOneEntityBinary"."SE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1Q1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1Q1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1Q1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1Q1Bi. Expected primary key: SA1Q1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ADD CONSTRAINT "pk_SE1Q1Bi" PRIMARY KEY("SA1Q1BiID");
		COMMENT ON CONSTRAINT "pk_SE1Q1Bi" ON "AggregateOneEntityBinary"."SE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1S0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1S0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1S0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1S0Bi. Expected primary key: SA1S0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" ADD CONSTRAINT "pk_SE1S0Bi" PRIMARY KEY("SA1S0BiID");
		COMMENT ON CONSTRAINT "pk_SE1S0Bi" ON "AggregateOneEntityBinary"."SE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1S1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1S1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1S1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1S1Bi. Expected primary key: SA1S1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" ADD CONSTRAINT "pk_SE1S1Bi" PRIMARY KEY("SA1S1BiID");
		COMMENT ON CONSTRAINT "pk_SE1S1Bi" ON "AggregateOneEntityBinary"."SE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1V0Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1V0Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1V0BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1V0Bi. Expected primary key: SA1V0BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" ADD CONSTRAINT "pk_SE1V0Bi" PRIMARY KEY("SA1V0BiID");
		COMMENT ON CONSTRAINT "pk_SE1V0Bi" ON "AggregateOneEntityBinary"."SE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

DO $$ 
DECLARE _pk VARCHAR;
BEGIN
	IF EXISTS(SELECT * FROM pg_index i JOIN pg_class c ON i.indrelid = c.oid JOIN pg_namespace n ON c.relnamespace = n.oid WHERE i.indisprimary AND n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SE1V1Bi') THEN
		SELECT array_to_string(array_agg(sq.attname), ', ') INTO _pk
		FROM
		(
			SELECT atr.attname
			FROM pg_index i
			JOIN pg_class c ON i.indrelid = c.oid 
			JOIN pg_attribute atr ON atr.attrelid = c.oid 
			WHERE 
				c.oid = '"AggregateOneEntityBinary"."SE1V1Bi"'::regclass
				AND atr.attnum = any(i.indkey)
				AND indisprimary
			ORDER BY (SELECT i FROM generate_subscripts(i.indkey,1) g(i) WHERE i.indkey[i] = atr.attnum LIMIT 1)
		) sq;
		IF ('SA1V1BiID' != _pk) THEN
			RAISE EXCEPTION 'Different primary key defined for table AggregateOneEntityBinary.SE1V1Bi. Expected primary key: SA1V1BiID. Found: %', _pk;
		END IF;
	ELSE
		ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" ADD CONSTRAINT "pk_SE1V1Bi" PRIMARY KEY("SA1V1BiID");
		COMMENT ON CONSTRAINT "pk_SE1V1Bi" ON "AggregateOneEntityBinary"."SE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0A0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0A0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0A0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0A0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0A0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0A0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0A1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0A1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0A1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0A1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0A1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0A1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0A1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0C0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0C0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0C0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0C0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0C0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0C0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0C1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0C1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0C1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0C1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0C1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0C1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0C1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0K0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0K0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0K0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0K0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0K0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0K0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0K1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0K1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0K1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0K1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0K1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0K1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0K1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0L0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0L0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0L0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0L0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0L0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0L0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0L1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0L1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0L1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0L1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0L1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0L1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0L1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0Q1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0Q1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0Q1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0Q1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0Q1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0Q1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0Q1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0S0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0S0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0S0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0S0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0S0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0S0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0S1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0S1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0S1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0S1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0S1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0S1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0S1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0V0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0V0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0V0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0V0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0V0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0V0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA0V1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA0V1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA0V1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA0V1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA0V1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA0V1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA0V1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BA1A0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1A0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1A0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1A0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1A0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1A0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" ALTER "p1A0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1A1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1A1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1A1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1A1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1A1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1A1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1A1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" ALTER "p1A1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" ALTER "p1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1C0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1C0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1C0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1C0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1C0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1C0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" ALTER "p1C0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1C1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1C1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1C1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1C1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1C1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1C1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1C1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" ALTER "p1C1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1K0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1K0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1K0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1K0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1K0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1K0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" ALTER "p1K0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1K1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1K1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1K1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1K1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1K1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1K1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1K1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" ALTER "p1K1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1L0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1L0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1L0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1L0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1L0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1L0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" ALTER "p1L0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1L1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1L1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1L1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1L1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1L1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1L1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1L1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" ALTER "p1L1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1Q1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1Q1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1Q1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1Q1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1Q1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1Q1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1Q1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ALTER "p1Q1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1S0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1S0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1S0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1S0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1S0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1S0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" ALTER "p1S0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1S1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1S1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1S1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1S1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1S1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1S1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1S1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" ALTER "p1S1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1V0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1V0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1V0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1V0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1V0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1V0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" ALTER "p1V0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BA1V1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'BA1V1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."BA1V1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."BA1V1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."BA1V1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."BA1V1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."BA1V1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" ALTER "p1V1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0A0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0A1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0C0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0C1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0K0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0K1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0L0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0L1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0Q1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0S0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0S1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0V0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA0V1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1A0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" ALTER "p1A0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1A1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" ALTER "p1A1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" ALTER "p1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1C0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" ALTER "p1C0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1C1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" ALTER "p1C1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1K0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" ALTER "p1K0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1K1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" ALTER "p1K1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1L0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" ALTER "p1L0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1L1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" ALTER "p1L1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1Q1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ALTER "p1Q1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1S0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" ALTER "p1S0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1S1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" ALTER "p1S1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1V0Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" ALTER "p1V0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GA1V1Bi" ALTER "ID" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" ALTER "p1V1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA0A0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0A0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0A0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0A0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0A0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0A0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0A1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0A1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0A1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0A1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0A1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0A1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0A1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0C0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0C0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0C0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0C0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0C0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0C0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0C1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0C1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0C1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0C1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0C1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0C1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0C1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0K0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0K0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0K0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0K0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0K0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0K0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0K1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0K1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0K1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0K1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0K1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0K1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0K1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0L0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0L0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0L0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0L0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0L0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0L0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0L1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0L1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0L1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0L1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0L1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0L1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0L1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0Q1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0Q1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0Q1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0Q1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0Q1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0Q1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0Q1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0S0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0S0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0S0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0S0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0S0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0S0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0S1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0S1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0S1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0S1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0S1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0S1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0S1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0V0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0V0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0V0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0V0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0V0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0V0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA0V1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA0V1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA0V1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA0V1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA0V1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA0V1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA0V1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SA1A0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1A0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1A0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1A0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1A0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1A0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" ALTER "p1A0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1A1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1A1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1A1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1A1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1A1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1A1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1A1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" ALTER "p1A1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" ALTER "p1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1C0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1C0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1C0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1C0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1C0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1C0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" ALTER "p1C0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1C1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1C1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1C1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1C1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1C1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1C1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1C1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" ALTER "p1C1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1K0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1K0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1K0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1K0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1K0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1K0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" ALTER "p1K0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1K1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1K1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1K1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1K1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1K1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1K1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1K1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" ALTER "p1K1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1L0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1L0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1L0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1L0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1L0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1L0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" ALTER "p1L0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1L1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1L1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1L1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1L1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1L1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1L1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1L1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" ALTER "p1L1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1Q1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1Q1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1Q1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1Q1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1Q1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1Q1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1Q1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ALTER "p1Q1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1S0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1S0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1S0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1S0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1S0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1S0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" ALTER "p1S0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1S1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1S1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1S1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1S1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1S1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1S1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1S1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" ALTER "p1S1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1V0Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V0Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1V0Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1V0Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1V0Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1V0Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1V0Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" ALTER "p1V0Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."SA1V1Bi" ALTER "ID" SET NOT NULL;

DO $$ 
BEGIN
	IF NOT EXISTS(SELECT * FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE n.nspname = 'AggregateOneEntityBinary' AND c.relname = 'SA1V1Bi_ID_seq' AND c.relkind = 'S') THEN
		CREATE SEQUENCE "AggregateOneEntityBinary"."SA1V1Bi_ID_seq";
		ALTER TABLE "AggregateOneEntityBinary"."SA1V1Bi"	ALTER COLUMN "ID" SET DEFAULT NEXTVAL('"AggregateOneEntityBinary"."SA1V1Bi_ID_seq"');
		PERFORM SETVAL('"AggregateOneEntityBinary"."SA1V1Bi_ID_seq"', COALESCE(MAX("ID"), 0) + 1000) FROM "AggregateOneEntityBinary"."SA1V1Bi";
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" ALTER "p1V1Bi" SET NOT NULL;
ALTER TABLE "AggregateOneEntityBinary"."BE0A0Bi" ALTER "BA0A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0A0Bi" 
			ADD CONSTRAINT "fk_bE0A0Bi"
				FOREIGN KEY ("BA0A0BiID") REFERENCES "AggregateOneEntityBinary"."BA0A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0A0Bi" ON "AggregateOneEntityBinary"."BE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0A1Bi" ALTER "BA0A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0A1Bi" 
			ADD CONSTRAINT "fk_bE0A1Bi"
				FOREIGN KEY ("BA0A1BiID") REFERENCES "AggregateOneEntityBinary"."BA0A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0A1Bi" ON "AggregateOneEntityBinary"."BE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0Bi" ALTER "BA0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0Bi" 
			ADD CONSTRAINT "fk_bE0Bi"
				FOREIGN KEY ("BA0BiID") REFERENCES "AggregateOneEntityBinary"."BA0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0Bi" ON "AggregateOneEntityBinary"."BE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0C0Bi" ALTER "BA0C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0C0Bi" 
			ADD CONSTRAINT "fk_bE0C0Bi"
				FOREIGN KEY ("BA0C0BiID") REFERENCES "AggregateOneEntityBinary"."BA0C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0C0Bi" ON "AggregateOneEntityBinary"."BE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0C1Bi" ALTER "BA0C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0C1Bi" 
			ADD CONSTRAINT "fk_bE0C1Bi"
				FOREIGN KEY ("BA0C1BiID") REFERENCES "AggregateOneEntityBinary"."BA0C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0C1Bi" ON "AggregateOneEntityBinary"."BE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0K0Bi" ALTER "BA0K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0K0Bi" 
			ADD CONSTRAINT "fk_bE0K0Bi"
				FOREIGN KEY ("BA0K0BiID") REFERENCES "AggregateOneEntityBinary"."BA0K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0K0Bi" ON "AggregateOneEntityBinary"."BE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0K1Bi" ALTER "BA0K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0K1Bi" 
			ADD CONSTRAINT "fk_bE0K1Bi"
				FOREIGN KEY ("BA0K1BiID") REFERENCES "AggregateOneEntityBinary"."BA0K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0K1Bi" ON "AggregateOneEntityBinary"."BE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0L0Bi" ALTER "BA0L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0L0Bi" 
			ADD CONSTRAINT "fk_bE0L0Bi"
				FOREIGN KEY ("BA0L0BiID") REFERENCES "AggregateOneEntityBinary"."BA0L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0L0Bi" ON "AggregateOneEntityBinary"."BE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0L1Bi" ALTER "BA0L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0L1Bi" 
			ADD CONSTRAINT "fk_bE0L1Bi"
				FOREIGN KEY ("BA0L1BiID") REFERENCES "AggregateOneEntityBinary"."BA0L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0L1Bi" ON "AggregateOneEntityBinary"."BE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0Q1Bi" ALTER "BA0Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0Q1Bi" 
			ADD CONSTRAINT "fk_bE0Q1Bi"
				FOREIGN KEY ("BA0Q1BiID") REFERENCES "AggregateOneEntityBinary"."BA0Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0Q1Bi" ON "AggregateOneEntityBinary"."BE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0S0Bi" ALTER "BA0S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0S0Bi" 
			ADD CONSTRAINT "fk_bE0S0Bi"
				FOREIGN KEY ("BA0S0BiID") REFERENCES "AggregateOneEntityBinary"."BA0S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0S0Bi" ON "AggregateOneEntityBinary"."BE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0S1Bi" ALTER "BA0S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0S1Bi" 
			ADD CONSTRAINT "fk_bE0S1Bi"
				FOREIGN KEY ("BA0S1BiID") REFERENCES "AggregateOneEntityBinary"."BA0S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0S1Bi" ON "AggregateOneEntityBinary"."BE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0V0Bi" ALTER "BA0V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0V0Bi" 
			ADD CONSTRAINT "fk_bE0V0Bi"
				FOREIGN KEY ("BA0V0BiID") REFERENCES "AggregateOneEntityBinary"."BA0V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0V0Bi" ON "AggregateOneEntityBinary"."BE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE0V1Bi" ALTER "BA0V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE0V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE0V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE0V1Bi" 
			ADD CONSTRAINT "fk_bE0V1Bi"
				FOREIGN KEY ("BA0V1BiID") REFERENCES "AggregateOneEntityBinary"."BA0V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE0V1Bi" ON "AggregateOneEntityBinary"."BE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" ALTER "BA1A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1A0Bi" 
			ADD CONSTRAINT "fk_bE1A0Bi"
				FOREIGN KEY ("BA1A0BiID") REFERENCES "AggregateOneEntityBinary"."BA1A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1A0Bi" ON "AggregateOneEntityBinary"."BE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" ALTER "BA1A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1A1Bi" 
			ADD CONSTRAINT "fk_bE1A1Bi"
				FOREIGN KEY ("BA1A1BiID") REFERENCES "AggregateOneEntityBinary"."BA1A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1A1Bi" ON "AggregateOneEntityBinary"."BE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" ALTER "BA1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1Bi" 
			ADD CONSTRAINT "fk_bE1Bi"
				FOREIGN KEY ("BA1BiID") REFERENCES "AggregateOneEntityBinary"."BA1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1Bi" ON "AggregateOneEntityBinary"."BE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" ALTER "BA1C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1C0Bi" 
			ADD CONSTRAINT "fk_bE1C0Bi"
				FOREIGN KEY ("BA1C0BiID") REFERENCES "AggregateOneEntityBinary"."BA1C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1C0Bi" ON "AggregateOneEntityBinary"."BE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" ALTER "BA1C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1C1Bi" 
			ADD CONSTRAINT "fk_bE1C1Bi"
				FOREIGN KEY ("BA1C1BiID") REFERENCES "AggregateOneEntityBinary"."BA1C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1C1Bi" ON "AggregateOneEntityBinary"."BE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" ALTER "BA1K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1K0Bi" 
			ADD CONSTRAINT "fk_bE1K0Bi"
				FOREIGN KEY ("BA1K0BiID") REFERENCES "AggregateOneEntityBinary"."BA1K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1K0Bi" ON "AggregateOneEntityBinary"."BE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" ALTER "BA1K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1K1Bi" 
			ADD CONSTRAINT "fk_bE1K1Bi"
				FOREIGN KEY ("BA1K1BiID") REFERENCES "AggregateOneEntityBinary"."BA1K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1K1Bi" ON "AggregateOneEntityBinary"."BE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" ALTER "BA1L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1L0Bi" 
			ADD CONSTRAINT "fk_bE1L0Bi"
				FOREIGN KEY ("BA1L0BiID") REFERENCES "AggregateOneEntityBinary"."BA1L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1L0Bi" ON "AggregateOneEntityBinary"."BE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" ALTER "BA1L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1L1Bi" 
			ADD CONSTRAINT "fk_bE1L1Bi"
				FOREIGN KEY ("BA1L1BiID") REFERENCES "AggregateOneEntityBinary"."BA1L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1L1Bi" ON "AggregateOneEntityBinary"."BE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" ALTER "BA1Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1Q1Bi" 
			ADD CONSTRAINT "fk_bE1Q1Bi"
				FOREIGN KEY ("BA1Q1BiID") REFERENCES "AggregateOneEntityBinary"."BA1Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1Q1Bi" ON "AggregateOneEntityBinary"."BE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" ALTER "BA1S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1S0Bi" 
			ADD CONSTRAINT "fk_bE1S0Bi"
				FOREIGN KEY ("BA1S0BiID") REFERENCES "AggregateOneEntityBinary"."BA1S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1S0Bi" ON "AggregateOneEntityBinary"."BE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" ALTER "BA1S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1S1Bi" 
			ADD CONSTRAINT "fk_bE1S1Bi"
				FOREIGN KEY ("BA1S1BiID") REFERENCES "AggregateOneEntityBinary"."BA1S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1S1Bi" ON "AggregateOneEntityBinary"."BE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" ALTER "BA1V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1V0Bi" 
			ADD CONSTRAINT "fk_bE1V0Bi"
				FOREIGN KEY ("BA1V0BiID") REFERENCES "AggregateOneEntityBinary"."BA1V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1V0Bi" ON "AggregateOneEntityBinary"."BE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" ALTER "BA1V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_bE1V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'BE1V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."BE1V1Bi" 
			ADD CONSTRAINT "fk_bE1V1Bi"
				FOREIGN KEY ("BA1V1BiID") REFERENCES "AggregateOneEntityBinary"."BA1V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_bE1V1Bi" ON "AggregateOneEntityBinary"."BE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0A0Bi" ALTER "GA0A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0A0Bi" 
			ADD CONSTRAINT "fk_gE0A0Bi"
				FOREIGN KEY ("GA0A0BiID") REFERENCES "AggregateOneEntityBinary"."GA0A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0A0Bi" ON "AggregateOneEntityBinary"."GE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0A1Bi" ALTER "GA0A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0A1Bi" 
			ADD CONSTRAINT "fk_gE0A1Bi"
				FOREIGN KEY ("GA0A1BiID") REFERENCES "AggregateOneEntityBinary"."GA0A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0A1Bi" ON "AggregateOneEntityBinary"."GE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0Bi" ALTER "GA0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0Bi" 
			ADD CONSTRAINT "fk_gE0Bi"
				FOREIGN KEY ("GA0BiID") REFERENCES "AggregateOneEntityBinary"."GA0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0Bi" ON "AggregateOneEntityBinary"."GE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0C0Bi" ALTER "GA0C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0C0Bi" 
			ADD CONSTRAINT "fk_gE0C0Bi"
				FOREIGN KEY ("GA0C0BiID") REFERENCES "AggregateOneEntityBinary"."GA0C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0C0Bi" ON "AggregateOneEntityBinary"."GE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0C1Bi" ALTER "GA0C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0C1Bi" 
			ADD CONSTRAINT "fk_gE0C1Bi"
				FOREIGN KEY ("GA0C1BiID") REFERENCES "AggregateOneEntityBinary"."GA0C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0C1Bi" ON "AggregateOneEntityBinary"."GE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0K0Bi" ALTER "GA0K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0K0Bi" 
			ADD CONSTRAINT "fk_gE0K0Bi"
				FOREIGN KEY ("GA0K0BiID") REFERENCES "AggregateOneEntityBinary"."GA0K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0K0Bi" ON "AggregateOneEntityBinary"."GE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0K1Bi" ALTER "GA0K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0K1Bi" 
			ADD CONSTRAINT "fk_gE0K1Bi"
				FOREIGN KEY ("GA0K1BiID") REFERENCES "AggregateOneEntityBinary"."GA0K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0K1Bi" ON "AggregateOneEntityBinary"."GE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0L0Bi" ALTER "GA0L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0L0Bi" 
			ADD CONSTRAINT "fk_gE0L0Bi"
				FOREIGN KEY ("GA0L0BiID") REFERENCES "AggregateOneEntityBinary"."GA0L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0L0Bi" ON "AggregateOneEntityBinary"."GE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0L1Bi" ALTER "GA0L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0L1Bi" 
			ADD CONSTRAINT "fk_gE0L1Bi"
				FOREIGN KEY ("GA0L1BiID") REFERENCES "AggregateOneEntityBinary"."GA0L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0L1Bi" ON "AggregateOneEntityBinary"."GE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0Q1Bi" ALTER "GA0Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0Q1Bi" 
			ADD CONSTRAINT "fk_gE0Q1Bi"
				FOREIGN KEY ("GA0Q1BiID") REFERENCES "AggregateOneEntityBinary"."GA0Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0Q1Bi" ON "AggregateOneEntityBinary"."GE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0S0Bi" ALTER "GA0S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0S0Bi" 
			ADD CONSTRAINT "fk_gE0S0Bi"
				FOREIGN KEY ("GA0S0BiID") REFERENCES "AggregateOneEntityBinary"."GA0S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0S0Bi" ON "AggregateOneEntityBinary"."GE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0S1Bi" ALTER "GA0S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0S1Bi" 
			ADD CONSTRAINT "fk_gE0S1Bi"
				FOREIGN KEY ("GA0S1BiID") REFERENCES "AggregateOneEntityBinary"."GA0S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0S1Bi" ON "AggregateOneEntityBinary"."GE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0V0Bi" ALTER "GA0V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0V0Bi" 
			ADD CONSTRAINT "fk_gE0V0Bi"
				FOREIGN KEY ("GA0V0BiID") REFERENCES "AggregateOneEntityBinary"."GA0V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0V0Bi" ON "AggregateOneEntityBinary"."GE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE0V1Bi" ALTER "GA0V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE0V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE0V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE0V1Bi" 
			ADD CONSTRAINT "fk_gE0V1Bi"
				FOREIGN KEY ("GA0V1BiID") REFERENCES "AggregateOneEntityBinary"."GA0V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE0V1Bi" ON "AggregateOneEntityBinary"."GE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" ALTER "GA1A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1A0Bi" 
			ADD CONSTRAINT "fk_gE1A0Bi"
				FOREIGN KEY ("GA1A0BiID") REFERENCES "AggregateOneEntityBinary"."GA1A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1A0Bi" ON "AggregateOneEntityBinary"."GE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" ALTER "GA1A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1A1Bi" 
			ADD CONSTRAINT "fk_gE1A1Bi"
				FOREIGN KEY ("GA1A1BiID") REFERENCES "AggregateOneEntityBinary"."GA1A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1A1Bi" ON "AggregateOneEntityBinary"."GE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" ALTER "GA1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1Bi" 
			ADD CONSTRAINT "fk_gE1Bi"
				FOREIGN KEY ("GA1BiID") REFERENCES "AggregateOneEntityBinary"."GA1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1Bi" ON "AggregateOneEntityBinary"."GE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" ALTER "GA1C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1C0Bi" 
			ADD CONSTRAINT "fk_gE1C0Bi"
				FOREIGN KEY ("GA1C0BiID") REFERENCES "AggregateOneEntityBinary"."GA1C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1C0Bi" ON "AggregateOneEntityBinary"."GE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" ALTER "GA1C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1C1Bi" 
			ADD CONSTRAINT "fk_gE1C1Bi"
				FOREIGN KEY ("GA1C1BiID") REFERENCES "AggregateOneEntityBinary"."GA1C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1C1Bi" ON "AggregateOneEntityBinary"."GE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" ALTER "GA1K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1K0Bi" 
			ADD CONSTRAINT "fk_gE1K0Bi"
				FOREIGN KEY ("GA1K0BiID") REFERENCES "AggregateOneEntityBinary"."GA1K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1K0Bi" ON "AggregateOneEntityBinary"."GE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" ALTER "GA1K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1K1Bi" 
			ADD CONSTRAINT "fk_gE1K1Bi"
				FOREIGN KEY ("GA1K1BiID") REFERENCES "AggregateOneEntityBinary"."GA1K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1K1Bi" ON "AggregateOneEntityBinary"."GE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" ALTER "GA1L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1L0Bi" 
			ADD CONSTRAINT "fk_gE1L0Bi"
				FOREIGN KEY ("GA1L0BiID") REFERENCES "AggregateOneEntityBinary"."GA1L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1L0Bi" ON "AggregateOneEntityBinary"."GE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" ALTER "GA1L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1L1Bi" 
			ADD CONSTRAINT "fk_gE1L1Bi"
				FOREIGN KEY ("GA1L1BiID") REFERENCES "AggregateOneEntityBinary"."GA1L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1L1Bi" ON "AggregateOneEntityBinary"."GE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" ALTER "GA1Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1Q1Bi" 
			ADD CONSTRAINT "fk_gE1Q1Bi"
				FOREIGN KEY ("GA1Q1BiID") REFERENCES "AggregateOneEntityBinary"."GA1Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1Q1Bi" ON "AggregateOneEntityBinary"."GE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" ALTER "GA1S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1S0Bi" 
			ADD CONSTRAINT "fk_gE1S0Bi"
				FOREIGN KEY ("GA1S0BiID") REFERENCES "AggregateOneEntityBinary"."GA1S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1S0Bi" ON "AggregateOneEntityBinary"."GE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" ALTER "GA1S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1S1Bi" 
			ADD CONSTRAINT "fk_gE1S1Bi"
				FOREIGN KEY ("GA1S1BiID") REFERENCES "AggregateOneEntityBinary"."GA1S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1S1Bi" ON "AggregateOneEntityBinary"."GE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" ALTER "GA1V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1V0Bi" 
			ADD CONSTRAINT "fk_gE1V0Bi"
				FOREIGN KEY ("GA1V0BiID") REFERENCES "AggregateOneEntityBinary"."GA1V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1V0Bi" ON "AggregateOneEntityBinary"."GE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" ALTER "GA1V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_gE1V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'GE1V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."GE1V1Bi" 
			ADD CONSTRAINT "fk_gE1V1Bi"
				FOREIGN KEY ("GA1V1BiID") REFERENCES "AggregateOneEntityBinary"."GA1V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_gE1V1Bi" ON "AggregateOneEntityBinary"."GE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0A0Bi" ALTER "SA0A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0A0Bi" 
			ADD CONSTRAINT "fk_sE0A0Bi"
				FOREIGN KEY ("SA0A0BiID") REFERENCES "AggregateOneEntityBinary"."SA0A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0A0Bi" ON "AggregateOneEntityBinary"."SE0A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0A1Bi" ALTER "SA0A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0A1Bi" 
			ADD CONSTRAINT "fk_sE0A1Bi"
				FOREIGN KEY ("SA0A1BiID") REFERENCES "AggregateOneEntityBinary"."SA0A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0A1Bi" ON "AggregateOneEntityBinary"."SE0A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0Bi" ALTER "SA0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0Bi" 
			ADD CONSTRAINT "fk_sE0Bi"
				FOREIGN KEY ("SA0BiID") REFERENCES "AggregateOneEntityBinary"."SA0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0Bi" ON "AggregateOneEntityBinary"."SE0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0C0Bi" ALTER "SA0C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0C0Bi" 
			ADD CONSTRAINT "fk_sE0C0Bi"
				FOREIGN KEY ("SA0C0BiID") REFERENCES "AggregateOneEntityBinary"."SA0C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0C0Bi" ON "AggregateOneEntityBinary"."SE0C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0C1Bi" ALTER "SA0C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0C1Bi" 
			ADD CONSTRAINT "fk_sE0C1Bi"
				FOREIGN KEY ("SA0C1BiID") REFERENCES "AggregateOneEntityBinary"."SA0C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0C1Bi" ON "AggregateOneEntityBinary"."SE0C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0K0Bi" ALTER "SA0K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0K0Bi" 
			ADD CONSTRAINT "fk_sE0K0Bi"
				FOREIGN KEY ("SA0K0BiID") REFERENCES "AggregateOneEntityBinary"."SA0K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0K0Bi" ON "AggregateOneEntityBinary"."SE0K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0K1Bi" ALTER "SA0K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0K1Bi" 
			ADD CONSTRAINT "fk_sE0K1Bi"
				FOREIGN KEY ("SA0K1BiID") REFERENCES "AggregateOneEntityBinary"."SA0K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0K1Bi" ON "AggregateOneEntityBinary"."SE0K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0L0Bi" ALTER "SA0L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0L0Bi" 
			ADD CONSTRAINT "fk_sE0L0Bi"
				FOREIGN KEY ("SA0L0BiID") REFERENCES "AggregateOneEntityBinary"."SA0L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0L0Bi" ON "AggregateOneEntityBinary"."SE0L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0L1Bi" ALTER "SA0L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0L1Bi" 
			ADD CONSTRAINT "fk_sE0L1Bi"
				FOREIGN KEY ("SA0L1BiID") REFERENCES "AggregateOneEntityBinary"."SA0L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0L1Bi" ON "AggregateOneEntityBinary"."SE0L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0Q1Bi" ALTER "SA0Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0Q1Bi" 
			ADD CONSTRAINT "fk_sE0Q1Bi"
				FOREIGN KEY ("SA0Q1BiID") REFERENCES "AggregateOneEntityBinary"."SA0Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0Q1Bi" ON "AggregateOneEntityBinary"."SE0Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0S0Bi" ALTER "SA0S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0S0Bi" 
			ADD CONSTRAINT "fk_sE0S0Bi"
				FOREIGN KEY ("SA0S0BiID") REFERENCES "AggregateOneEntityBinary"."SA0S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0S0Bi" ON "AggregateOneEntityBinary"."SE0S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0S1Bi" ALTER "SA0S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0S1Bi" 
			ADD CONSTRAINT "fk_sE0S1Bi"
				FOREIGN KEY ("SA0S1BiID") REFERENCES "AggregateOneEntityBinary"."SA0S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0S1Bi" ON "AggregateOneEntityBinary"."SE0S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0V0Bi" ALTER "SA0V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0V0Bi" 
			ADD CONSTRAINT "fk_sE0V0Bi"
				FOREIGN KEY ("SA0V0BiID") REFERENCES "AggregateOneEntityBinary"."SA0V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0V0Bi" ON "AggregateOneEntityBinary"."SE0V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE0V1Bi" ALTER "SA0V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE0V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE0V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE0V1Bi" 
			ADD CONSTRAINT "fk_sE0V1Bi"
				FOREIGN KEY ("SA0V1BiID") REFERENCES "AggregateOneEntityBinary"."SA0V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE0V1Bi" ON "AggregateOneEntityBinary"."SE0V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" ALTER "SA1A0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1A0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1A0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1A0Bi" 
			ADD CONSTRAINT "fk_sE1A0Bi"
				FOREIGN KEY ("SA1A0BiID") REFERENCES "AggregateOneEntityBinary"."SA1A0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1A0Bi" ON "AggregateOneEntityBinary"."SE1A0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" ALTER "SA1A1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1A1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1A1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1A1Bi" 
			ADD CONSTRAINT "fk_sE1A1Bi"
				FOREIGN KEY ("SA1A1BiID") REFERENCES "AggregateOneEntityBinary"."SA1A1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1A1Bi" ON "AggregateOneEntityBinary"."SE1A1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" ALTER "SA1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1Bi" 
			ADD CONSTRAINT "fk_sE1Bi"
				FOREIGN KEY ("SA1BiID") REFERENCES "AggregateOneEntityBinary"."SA1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1Bi" ON "AggregateOneEntityBinary"."SE1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" ALTER "SA1C0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1C0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1C0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1C0Bi" 
			ADD CONSTRAINT "fk_sE1C0Bi"
				FOREIGN KEY ("SA1C0BiID") REFERENCES "AggregateOneEntityBinary"."SA1C0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1C0Bi" ON "AggregateOneEntityBinary"."SE1C0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" ALTER "SA1C1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1C1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1C1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1C1Bi" 
			ADD CONSTRAINT "fk_sE1C1Bi"
				FOREIGN KEY ("SA1C1BiID") REFERENCES "AggregateOneEntityBinary"."SA1C1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1C1Bi" ON "AggregateOneEntityBinary"."SE1C1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" ALTER "SA1K0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1K0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1K0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1K0Bi" 
			ADD CONSTRAINT "fk_sE1K0Bi"
				FOREIGN KEY ("SA1K0BiID") REFERENCES "AggregateOneEntityBinary"."SA1K0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1K0Bi" ON "AggregateOneEntityBinary"."SE1K0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" ALTER "SA1K1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1K1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1K1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1K1Bi" 
			ADD CONSTRAINT "fk_sE1K1Bi"
				FOREIGN KEY ("SA1K1BiID") REFERENCES "AggregateOneEntityBinary"."SA1K1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1K1Bi" ON "AggregateOneEntityBinary"."SE1K1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" ALTER "SA1L0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1L0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1L0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1L0Bi" 
			ADD CONSTRAINT "fk_sE1L0Bi"
				FOREIGN KEY ("SA1L0BiID") REFERENCES "AggregateOneEntityBinary"."SA1L0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1L0Bi" ON "AggregateOneEntityBinary"."SE1L0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" ALTER "SA1L1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1L1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1L1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1L1Bi" 
			ADD CONSTRAINT "fk_sE1L1Bi"
				FOREIGN KEY ("SA1L1BiID") REFERENCES "AggregateOneEntityBinary"."SA1L1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1L1Bi" ON "AggregateOneEntityBinary"."SE1L1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" ALTER "SA1Q1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1Q1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1Q1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1Q1Bi" 
			ADD CONSTRAINT "fk_sE1Q1Bi"
				FOREIGN KEY ("SA1Q1BiID") REFERENCES "AggregateOneEntityBinary"."SA1Q1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1Q1Bi" ON "AggregateOneEntityBinary"."SE1Q1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" ALTER "SA1S0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1S0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1S0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1S0Bi" 
			ADD CONSTRAINT "fk_sE1S0Bi"
				FOREIGN KEY ("SA1S0BiID") REFERENCES "AggregateOneEntityBinary"."SA1S0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1S0Bi" ON "AggregateOneEntityBinary"."SE1S0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" ALTER "SA1S1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1S1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1S1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1S1Bi" 
			ADD CONSTRAINT "fk_sE1S1Bi"
				FOREIGN KEY ("SA1S1BiID") REFERENCES "AggregateOneEntityBinary"."SA1S1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1S1Bi" ON "AggregateOneEntityBinary"."SE1S1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" ALTER "SA1V0BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1V0Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1V0Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1V0Bi" 
			ADD CONSTRAINT "fk_sE1V0Bi"
				FOREIGN KEY ("SA1V0BiID") REFERENCES "AggregateOneEntityBinary"."SA1V0Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1V0Bi" ON "AggregateOneEntityBinary"."SE1V0Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;
ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" ALTER "SA1V1BiID" SET NOT NULL;

DO $$ BEGIN
	IF NOT EXISTS(SELECT * FROM pg_constraint c JOIN pg_class r ON c.conrelid = r.oid JOIN pg_namespace n ON n.oid = r.relnamespace WHERE c.conname = 'fk_sE1V1Bi' AND n.nspname = 'AggregateOneEntityBinary' AND r.relname = 'SE1V1Bi') THEN	
		ALTER TABLE "AggregateOneEntityBinary"."SE1V1Bi" 
			ADD CONSTRAINT "fk_sE1V1Bi"
				FOREIGN KEY ("SA1V1BiID") REFERENCES "AggregateOneEntityBinary"."SA1V1Bi" ("ID")
				ON UPDATE CASCADE ON DELETE CASCADE;
		COMMENT ON CONSTRAINT "fk_sE1V1Bi" ON "AggregateOneEntityBinary"."SE1V1Bi" IS 'NGS generated';
	END IF;
END $$ LANGUAGE plpgsql;

SELECT "-NGS-".Persist_Concepts('"c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableArrayOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0A0Bi {
    BE0A0Bi bE0A0Bi;
  }

  entity BE0A0Bi {
    Array<Binary?>? p0A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableArrayOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0A1Bi {
    BE0A1Bi bE0A1Bi;
  }

  entity BE0A1Bi {
    Array<Binary>? p0A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableBinaryPropertyWithinOneEntity
  big aggregate root BA0Bi {
    BE0Bi bE0Bi;
  }

  entity BE0Bi {
    Binary? p0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableStackOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0C0Bi {
    BE0C0Bi bE0C0Bi;
  }

  entity BE0C0Bi {
    Stack<Binary?>? p0C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableStackOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0C1Bi {
    BE0C1Bi bE0C1Bi;
  }

  entity BE0C1Bi {
    Stack<Binary>? p0C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableLinkedListOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0K0Bi {
    BE0K0Bi bE0K0Bi;
  }

  entity BE0K0Bi {
    Linked List<Binary?>? p0K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableLinkedListOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0K1Bi {
    BE0K1Bi bE0K1Bi;
  }

  entity BE0K1Bi {
    Linked List<Binary>? p0K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableListOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0L0Bi {
    BE0L0Bi bE0L0Bi;
  }

  entity BE0L0Bi {
    List<Binary?>? p0L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableListOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0L1Bi {
    BE0L1Bi bE0L1Bi;
  }

  entity BE0L1Bi {
    List<Binary>? p0L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableQueueOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0Q1Bi {
    BE0Q1Bi bE0Q1Bi;
  }

  entity BE0Q1Bi {
    Queue<Binary>? p0Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableSetOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0S0Bi {
    BE0S0Bi bE0S0Bi;
  }

  entity BE0S0Bi {
    Set<Binary?>? p0S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableSetOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0S1Bi {
    BE0S1Bi bE0S1Bi;
  }

  entity BE0S1Bi {
    Set<Binary>? p0S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableVectorOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA0V0Bi {
    BE0V0Bi bE0V0Bi;
  }

  entity BE0V0Bi {
    Vector<Binary?>? p0V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA0V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndNullableVectorOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA0V1Bi {
    BE0V1Bi bE0V1Bi;
  }

  entity BE0V1Bi {
    Vector<Binary>? p0V1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneArrayOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1A0Bi {
    BE1A0Bi bE1A0Bi;
  }

  entity BE1A0Bi {
    Array<Binary?> p1A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneArrayOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1A1Bi {
    BE1A1Bi bE1A1Bi;
  }

  entity BE1A1Bi {
    Array<Binary> p1A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneBinaryPropertyWithinOneEntity
  big aggregate root BA1Bi {
    BE1Bi bE1Bi;
  }

  entity BE1Bi {
    Binary p1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneStackOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1C0Bi {
    BE1C0Bi bE1C0Bi;
  }

  entity BE1C0Bi {
    Stack<Binary?> p1C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneStackOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1C1Bi {
    BE1C1Bi bE1C1Bi;
  }

  entity BE1C1Bi {
    Stack<Binary> p1C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneLinkedListOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1K0Bi {
    BE1K0Bi bE1K0Bi;
  }

  entity BE1K0Bi {
    Linked List<Binary?> p1K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneLinkedListOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1K1Bi {
    BE1K1Bi bE1K1Bi;
  }

  entity BE1K1Bi {
    Linked List<Binary> p1K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneListOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1L0Bi {
    BE1L0Bi bE1L0Bi;
  }

  entity BE1L0Bi {
    List<Binary?> p1L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneListOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1L1Bi {
    BE1L1Bi bE1L1Bi;
  }

  entity BE1L1Bi {
    List<Binary> p1L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneQueueOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1Q1Bi {
    BE1Q1Bi bE1Q1Bi;
  }

  entity BE1Q1Bi {
    Queue<Binary> p1Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneSetOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1S0Bi {
    BE1S0Bi bE1S0Bi;
  }

  entity BE1S0Bi {
    Set<Binary?> p1S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneSetOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1S1Bi {
    BE1S1Bi bE1S1Bi;
  }

  entity BE1S1Bi {
    Set<Binary> p1S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneVectorOfNullableBinariesPropertyWithinOneEntity
  big aggregate root BA1V0Bi {
    BE1V0Bi bE1V0Bi;
  }

  entity BE1V0Bi {
    Vector<Binary?> p1V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\BA1V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // BigAggregateWithSurrogateKeyAndOneVectorOfOneBinariesPropertyWithinOneEntity
  big aggregate root BA1V1Bi {
    BE1V1Bi bE1V1Bi;
  }

  entity BE1V1Bi {
    Vector<Binary> p1V1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableArrayOfNullableBinariesPropertyWithinOneEntity
  guid root GA0A0Bi {
    GE0A0Bi gE0A0Bi;
  }

  entity GE0A0Bi {
    Array<Binary?>? p0A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableArrayOfOneBinariesPropertyWithinOneEntity
  guid root GA0A1Bi {
    GE0A1Bi gE0A1Bi;
  }

  entity GE0A1Bi {
    Array<Binary>? p0A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableBinaryPropertyWithinOneEntity
  guid root GA0Bi {
    GE0Bi gE0Bi;
  }

  entity GE0Bi {
    Binary? p0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableStackOfNullableBinariesPropertyWithinOneEntity
  guid root GA0C0Bi {
    GE0C0Bi gE0C0Bi;
  }

  entity GE0C0Bi {
    Stack<Binary?>? p0C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableStackOfOneBinariesPropertyWithinOneEntity
  guid root GA0C1Bi {
    GE0C1Bi gE0C1Bi;
  }

  entity GE0C1Bi {
    Stack<Binary>? p0C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableLinkedListOfNullableBinariesPropertyWithinOneEntity
  guid root GA0K0Bi {
    GE0K0Bi gE0K0Bi;
  }

  entity GE0K0Bi {
    Linked List<Binary?>? p0K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableLinkedListOfOneBinariesPropertyWithinOneEntity
  guid root GA0K1Bi {
    GE0K1Bi gE0K1Bi;
  }

  entity GE0K1Bi {
    Linked List<Binary>? p0K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableListOfNullableBinariesPropertyWithinOneEntity
  guid root GA0L0Bi {
    GE0L0Bi gE0L0Bi;
  }

  entity GE0L0Bi {
    List<Binary?>? p0L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableListOfOneBinariesPropertyWithinOneEntity
  guid root GA0L1Bi {
    GE0L1Bi gE0L1Bi;
  }

  entity GE0L1Bi {
    List<Binary>? p0L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableQueueOfOneBinariesPropertyWithinOneEntity
  guid root GA0Q1Bi {
    GE0Q1Bi gE0Q1Bi;
  }

  entity GE0Q1Bi {
    Queue<Binary>? p0Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableSetOfNullableBinariesPropertyWithinOneEntity
  guid root GA0S0Bi {
    GE0S0Bi gE0S0Bi;
  }

  entity GE0S0Bi {
    Set<Binary?>? p0S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableSetOfOneBinariesPropertyWithinOneEntity
  guid root GA0S1Bi {
    GE0S1Bi gE0S1Bi;
  }

  entity GE0S1Bi {
    Set<Binary>? p0S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableVectorOfNullableBinariesPropertyWithinOneEntity
  guid root GA0V0Bi {
    GE0V0Bi gE0V0Bi;
  }

  entity GE0V0Bi {
    Vector<Binary?>? p0V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA0V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndNullableVectorOfOneBinariesPropertyWithinOneEntity
  guid root GA0V1Bi {
    GE0V1Bi gE0V1Bi;
  }

  entity GE0V1Bi {
    Vector<Binary>? p0V1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneArrayOfNullableBinariesPropertyWithinOneEntity
  guid root GA1A0Bi {
    GE1A0Bi gE1A0Bi;
  }

  entity GE1A0Bi {
    Array<Binary?> p1A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneArrayOfOneBinariesPropertyWithinOneEntity
  guid root GA1A1Bi {
    GE1A1Bi gE1A1Bi;
  }

  entity GE1A1Bi {
    Array<Binary> p1A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneBinaryPropertyWithinOneEntity
  guid root GA1Bi {
    GE1Bi gE1Bi;
  }

  entity GE1Bi {
    Binary p1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneStackOfNullableBinariesPropertyWithinOneEntity
  guid root GA1C0Bi {
    GE1C0Bi gE1C0Bi;
  }

  entity GE1C0Bi {
    Stack<Binary?> p1C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneStackOfOneBinariesPropertyWithinOneEntity
  guid root GA1C1Bi {
    GE1C1Bi gE1C1Bi;
  }

  entity GE1C1Bi {
    Stack<Binary> p1C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneLinkedListOfNullableBinariesPropertyWithinOneEntity
  guid root GA1K0Bi {
    GE1K0Bi gE1K0Bi;
  }

  entity GE1K0Bi {
    Linked List<Binary?> p1K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneLinkedListOfOneBinariesPropertyWithinOneEntity
  guid root GA1K1Bi {
    GE1K1Bi gE1K1Bi;
  }

  entity GE1K1Bi {
    Linked List<Binary> p1K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneListOfNullableBinariesPropertyWithinOneEntity
  guid root GA1L0Bi {
    GE1L0Bi gE1L0Bi;
  }

  entity GE1L0Bi {
    List<Binary?> p1L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneListOfOneBinariesPropertyWithinOneEntity
  guid root GA1L1Bi {
    GE1L1Bi gE1L1Bi;
  }

  entity GE1L1Bi {
    List<Binary> p1L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneQueueOfOneBinariesPropertyWithinOneEntity
  guid root GA1Q1Bi {
    GE1Q1Bi gE1Q1Bi;
  }

  entity GE1Q1Bi {
    Queue<Binary> p1Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneSetOfNullableBinariesPropertyWithinOneEntity
  guid root GA1S0Bi {
    GE1S0Bi gE1S0Bi;
  }

  entity GE1S0Bi {
    Set<Binary?> p1S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneSetOfOneBinariesPropertyWithinOneEntity
  guid root GA1S1Bi {
    GE1S1Bi gE1S1Bi;
  }

  entity GE1S1Bi {
    Set<Binary> p1S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneVectorOfNullableBinariesPropertyWithinOneEntity
  guid root GA1V0Bi {
    GE1V0Bi gE1V0Bi;
  }

  entity GE1V0Bi {
    Vector<Binary?> p1V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\GA1V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // GuidAggregateWithSurrogateKeyAndOneVectorOfOneBinariesPropertyWithinOneEntity
  guid root GA1V1Bi {
    GE1V1Bi gE1V1Bi;
  }

  entity GE1V1Bi {
    Vector<Binary> p1V1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableArrayOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0A0Bi {
    SE0A0Bi sE0A0Bi;
  }

  entity SE0A0Bi {
    Array<Binary?>? p0A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableArrayOfOneBinariesPropertyWithinOneEntity
  aggregate SA0A1Bi {
    SE0A1Bi sE0A1Bi;
  }

  entity SE0A1Bi {
    Array<Binary>? p0A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableBinaryPropertyWithinOneEntity
  aggregate SA0Bi {
    SE0Bi sE0Bi;
  }

  entity SE0Bi {
    Binary? p0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableStackOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0C0Bi {
    SE0C0Bi sE0C0Bi;
  }

  entity SE0C0Bi {
    Stack<Binary?>? p0C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableStackOfOneBinariesPropertyWithinOneEntity
  aggregate SA0C1Bi {
    SE0C1Bi sE0C1Bi;
  }

  entity SE0C1Bi {
    Stack<Binary>? p0C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableLinkedListOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0K0Bi {
    SE0K0Bi sE0K0Bi;
  }

  entity SE0K0Bi {
    Linked List<Binary?>? p0K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableLinkedListOfOneBinariesPropertyWithinOneEntity
  aggregate SA0K1Bi {
    SE0K1Bi sE0K1Bi;
  }

  entity SE0K1Bi {
    Linked List<Binary>? p0K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableListOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0L0Bi {
    SE0L0Bi sE0L0Bi;
  }

  entity SE0L0Bi {
    List<Binary?>? p0L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableListOfOneBinariesPropertyWithinOneEntity
  aggregate SA0L1Bi {
    SE0L1Bi sE0L1Bi;
  }

  entity SE0L1Bi {
    List<Binary>? p0L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableQueueOfOneBinariesPropertyWithinOneEntity
  aggregate SA0Q1Bi {
    SE0Q1Bi sE0Q1Bi;
  }

  entity SE0Q1Bi {
    Queue<Binary>? p0Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableSetOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0S0Bi {
    SE0S0Bi sE0S0Bi;
  }

  entity SE0S0Bi {
    Set<Binary?>? p0S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableSetOfOneBinariesPropertyWithinOneEntity
  aggregate SA0S1Bi {
    SE0S1Bi sE0S1Bi;
  }

  entity SE0S1Bi {
    Set<Binary>? p0S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableVectorOfNullableBinariesPropertyWithinOneEntity
  aggregate SA0V0Bi {
    SE0V0Bi sE0V0Bi;
  }

  entity SE0V0Bi {
    Vector<Binary?>? p0V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA0V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndNullableVectorOfOneBinariesPropertyWithinOneEntity
  aggregate SA0V1Bi {
    SE0V1Bi sE0V1Bi;
  }

  entity SE0V1Bi {
    Vector<Binary>? p0V1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1A0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneArrayOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1A0Bi {
    SE1A0Bi sE1A0Bi;
  }

  entity SE1A0Bi {
    Array<Binary?> p1A0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1A1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneArrayOfOneBinariesPropertyWithinOneEntity
  aggregate SA1A1Bi {
    SE1A1Bi sE1A1Bi;
  }

  entity SE1A1Bi {
    Array<Binary> p1A1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneBinaryPropertyWithinOneEntity
  aggregate SA1Bi {
    SE1Bi sE1Bi;
  }

  entity SE1Bi {
    Binary p1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1C0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneStackOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1C0Bi {
    SE1C0Bi sE1C0Bi;
  }

  entity SE1C0Bi {
    Stack<Binary?> p1C0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1C1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneStackOfOneBinariesPropertyWithinOneEntity
  aggregate SA1C1Bi {
    SE1C1Bi sE1C1Bi;
  }

  entity SE1C1Bi {
    Stack<Binary> p1C1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1K0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneLinkedListOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1K0Bi {
    SE1K0Bi sE1K0Bi;
  }

  entity SE1K0Bi {
    Linked List<Binary?> p1K0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1K1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneLinkedListOfOneBinariesPropertyWithinOneEntity
  aggregate SA1K1Bi {
    SE1K1Bi sE1K1Bi;
  }

  entity SE1K1Bi {
    Linked List<Binary> p1K1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1L0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneListOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1L0Bi {
    SE1L0Bi sE1L0Bi;
  }

  entity SE1L0Bi {
    List<Binary?> p1L0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1L1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneListOfOneBinariesPropertyWithinOneEntity
  aggregate SA1L1Bi {
    SE1L1Bi sE1L1Bi;
  }

  entity SE1L1Bi {
    List<Binary> p1L1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1Q1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneQueueOfOneBinariesPropertyWithinOneEntity
  aggregate SA1Q1Bi {
    SE1Q1Bi sE1Q1Bi;
  }

  entity SE1Q1Bi {
    Queue<Binary> p1Q1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1S0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneSetOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1S0Bi {
    SE1S0Bi sE1S0Bi;
  }

  entity SE1S0Bi {
    Set<Binary?> p1S0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1S1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneSetOfOneBinariesPropertyWithinOneEntity
  aggregate SA1S1Bi {
    SE1S1Bi sE1S1Bi;
  }

  entity SE1S1Bi {
    Set<Binary> p1S1Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1V0Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneVectorOfNullableBinariesPropertyWithinOneEntity
  aggregate SA1V0Bi {
    SE1V0Bi sE1V0Bi;
  }

  entity SE1V0Bi {
    Vector<Binary?> p1V0Bi;
  }
}
", "c:\\Users\\mono\\code\\DSL-OCD-Target\\aggregates\\surrogate-one-entity-Binary\\java_project\\..\\dsl\\aggregates\\AggregateOneEntityBinary\\SA1V1Bi.dsl"=>"module AggregateOneEntityBinary
{
  // StandardAggregateWithSurrogateKeyAndOneVectorOfOneBinariesPropertyWithinOneEntity
  aggregate SA1V1Bi {
    SE1V1Bi sE1V1Bi;
  }

  entity SE1V1Bi {
    Vector<Binary> p1V1Bi;
  }
}
"', '\x','1.3.5716.20415');
