/*
 * Copyright (c) 2020, PostgreSQL Global Development Group
 * See the LICENSE file in the project root for more information.
 */

package org.postgresql.core;

import org.checkerframework.checker.nullness.qual.Nullable;

public class ExecuteOptions {
  private final Query query;
  private final ResultHandler handler;
  private final @Nullable ParameterList parameters;
  private final int maxRows;
  private final int fetchSize;
  private final int flags;

  private ExecuteOptions(Builder builder) {
    this.query = builder.query;
    this.handler = builder.handler;
    this.parameters = builder.parameters;
    this.maxRows = builder.maxRows;
    this.fetchSize = builder.fetchSize;
    this.flags = builder.flags;
  }

  public Query getQuery() {
    return query;
  }

  public ResultHandler getHandler() {
    return handler;
  }

  public @Nullable ParameterList getParameters() {
    return parameters;
  }

  public int getMaxRows() {
    return maxRows;
  }

  public int getFetchSize() {
    return fetchSize;
  }

  public int getFlags() {
    return flags;
  }

  public static class Builder {
    private Query query;
    private ResultHandler handler;
    private @Nullable ParameterList parameters = null;
    private int maxRows = 0;
    private int fetchSize = 0;
    private int flags = 0;

    private Builder(Query query, ResultHandler handler) {
      this.query = query;
      this.handler = handler;
    }

    /**
     * Set the query parameters.
     *
     * @param parameters the parameters for the query. Must be non-<code>null</code> if the query
     *        takes parameters. Must be a parameter object returned by
     *        {@link org.postgresql.core.Query#createParameterList()}.
     * @return This builder
     */
    public Builder parameters(@Nullable ParameterList parameters) {
      this.parameters = parameters;
      return this;
    }

    /**
     * Sets the query max rows.
     *
     * @param maxRows the maximum number of rows to retrieve
     * @return This builder
     */
    public Builder maxRows(int maxRows) {
      this.maxRows = maxRows;
      return this;
    }

    /**
     * Sets the query fetch size.
     *
     * @param fetchSize if QUERY_FORWARD_CURSOR is set, the preferred number of rows to retrieve
     *        before suspending
     * @return This builder
     */
    public Builder fetchSize(int fetchSize) {
      this.fetchSize = fetchSize;
      return this;
    }

    /**
     * Sets the query flags.
     *
     * @param flags a combination of QUERY_* flags indicating how to handle the query.
     * @return This builder
     */
    public Builder flags(int flags) {
      this.flags = flags;
      return this;
    }

    public ExecuteOptions build() {
      return new ExecuteOptions(this);
    }
  }

  /**
   * Creates a builder object to build instances of ExecuteQueryOptions.
   *
   * @param query the query to execute; must be a query returned from calling
   *        {@link org.postgresql.core.QueryExecutor#wrap(List)} on a QueryExecutor object.
   * @param handler a ResultHandler responsible for handling results generated by this query
   * @return a builder object that be further configured
   */
  public static Builder builder(Query query, ResultHandler handler) {
    if (query == null) {
      throw new NullPointerException("query is null");
    }
    if (handler == null) {
      throw new NullPointerException("handler is null");
    }
    return new Builder(query, handler);
  }
}
