/*
 * Copyright (c) 2020, PostgreSQL Global Development Group
 * See the LICENSE file in the project root for more information.
 */

package org.postgresql.core;

import org.postgresql.jdbc.BatchResultHandler;

import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.List;

public class ExecuteManyOptions {
  private final Query[] queries;
  private final @Nullable ParameterList[] parameterLists;
  private final BatchResultHandler handler;
  private final int maxRows;
  private final int fetchSize;
  private final int flags;

  private ExecuteManyOptions(Builder builder) {
    this.queries = builder.queries;
    this.parameterLists = builder.parameterLists;
    this.handler = builder.handler;
    this.maxRows = builder.maxRows;
    this.fetchSize = builder.fetchSize;
    this.flags = builder.flags;
  }

  public Query[] getQueries() {
    return queries;
  }

  public @Nullable ParameterList[] getParameterLists() {
    return parameterLists;
  }

  public BatchResultHandler getHandler() {
    return handler;
  }

  public int getMaxRows() {
    return maxRows;
  }

  public int getFetchSize() {
    return fetchSize;
  }

  public int getFlags() {
    return flags;
  }

  public static class Builder {
    private Query[] queries;
    private BatchResultHandler handler;
    private @Nullable ParameterList[] parameterLists;
    private int maxRows;
    private int fetchSize;
    private int flags;

    private Builder(Query[] queries, BatchResultHandler handler, @Nullable ParameterList[] parameterLists) {
      this.queries = queries;
      this.handler = handler;
      this.parameterLists = parameterLists;
    }

    /**
     * Sets the query max rows.
     *
     * @param maxRows the maximum number of rows to retrieve
     * @return This builder
     */
    public Builder maxRows(int maxRows) {
      this.maxRows = maxRows;
      return this;
    }

    /**
     * Sets the query fetch size.
     *
     * @param fetchSize if QUERY_FORWARD_CURSOR is set, the preferred number of rows to retrieve
     *        before suspending
     * @return This builder
     */
    public Builder fetchSize(int fetchSize) {
      this.fetchSize = fetchSize;
      return this;
    }

    /**
     * Sets the query flags.
     *
     * @param flags a combination of QUERY_* flags indicating how to handle the query.
     * @return This builder
     */
    public Builder flags(int flags) {
      this.flags = flags;
      return this;
    }

    public ExecuteManyOptions build() {
      return new ExecuteManyOptions(this);
    }
  }

  /**
   * Creates a builder object to build instances of ExecuteQueryOptions.
   *
   * @param queries the queries to execute; each must be a query returned from calling
   *        {@link org.postgresql.core.QueryExecutor#wrap(List)} on the QueryExecutor object.
   * @param handler a ResultHandler responsible for handling results generated by this query
   * @param parameterLists the parameter lists for the queries. The parameter lists correspond 1:1
   *        to the queries passed in the <code>queries</code> array. Each must be non-
   *        <code>null</code> if the corresponding query takes parameters, and must be a parameter
   *        object returned by {@link org.postgresql.core.Query#createParameterList()} created by
   *        the corresponding query.
   * @return a builder object that be further configured
   */
  public static Builder builder(Query[] queries, BatchResultHandler handler, @Nullable ParameterList[] parameterLists) {
    if (queries == null) {
      throw new NullPointerException("queries is null");
    }
    if (handler == null) {
      throw new NullPointerException("handler is null");
    }
    return new Builder(queries, handler, parameterLists);
  }
}
